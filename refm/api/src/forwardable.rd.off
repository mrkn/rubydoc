クラスに対してメソッドの委譲機能を定義します。
以下のモジュールが定義されます。

* ((<Forwardable>))
* ((<SingleForwardable>))

詳細は ((<"ruby-src:doc/forwardable.rd.ja">)) を参照

== 参考

* ((<Rubyist Magazine|URL:http://jp.rubyist.net/magazine/>))
  * ((<標準添付ライブラリ紹介【第 6 回】委譲|URL:http://jp.rubyist.net/magazine/?0012-BundledLibraries>))



= class Forwardable

クラスに対しメソッドの委譲機能を定義するモジュールです。

== 使い方

クラスに対して ((<Object/extend>)) して使います。((<Module/include>)) でないところに注意して下さい。
  
  class Foo
    extend Forwardable

    def_delegators("@out", "printf", "print")
    def_delegators(:@in, :gets)
    def_delegator(:@contents, :[], "content_at")
  end
  f = Foo.new
  f.printf ...
  f.gets
  f.content_at(1)

== Instance Methods

--- def_instance_delegators(accessor, *methods)

    ((|methods|)) で渡されたメソッドのリストを ((|accessor|)) に委譲する
    ようにします。

--- def_instance_delegator(accessor, method, ali = method)

    ((|method|)) で渡されたメソッドを ((|accessor|)) に委譲するようにし
    ます。((|ali|))が引数として渡されたときは、メソッド((|ali|))が呼ば
    れたときには、((|accessor|)) に対し ((|method|)) を呼び出します。

--- def_delegators(accessor, *methods)

    def_instance_delegators の 別名です。

--- def_delegator(accessor, method, ali = method)

    def_instance_delegator の別名です。

== Module Methods

--- Forwardable.debug
--- Forwardable.debug=(bool)

    委譲したメソッドをバックトレースに含めるかどうかを設定します。
    (デフォルトは表示しません。)



= class SingleForwardable

オブジェクトに対し、メソッドの委譲機能を定義するモジュールです。

== 使い方

オブジェクトに対して((|extend|))して使います。

  g = Goo.new
  g.extend SingleForwardable
  g.def_delegator("@out", :puts)
  g.puts ...

== メソッド

--- def_singleton_delegators(accessor, *methods)

    ((|methods|))で渡されたメソッドのリストを((|accessor|))に委譲する
    ようにします。

--- def_singleton_delegator(accessor, method, ali = method)

    ((|method|))で渡されたメソッドを((|accessor|))に委譲するようにしま
    す。((|ali|))が引数として渡されたときは, メソッド((|ali|))が呼ばれ
    たときには、((|accessor|))に対し((|method|))を呼び出します。

--- def_delegators(accessor, *methods)

    def_singleton_delegators の別名です。

--- def_delegator(accessor, method, ali = method)

    def_singleton_delegator の別名です。
