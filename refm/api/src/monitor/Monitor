= class Monitor < Object

include MonitorMixin

スレッドの同期機構としてのモニター機能を提供するクラスです。
また同じスレッドから何度も lock できる Mutex としての機能も提供します。

=== 例

  require 'monitor'
  
  buf = []
  mon = Monitor.new
  empty_cond = mon.new_cond
  
  # consumer
  Thread.start do
    loop do
      buf.synchronize do
        empty_cond.wait_while { buf.empty? }
        print buf.shift
      end
    end
  end
  
  # producer
  while line = ARGF.gets
    buf.synchronize do
      buf.push(line)
      empty_cond.signal
    end
  end

2回ロックしてもデッドロックにならない例です。

   require 'monitor'
   mon = Monitor.new
   mon.synchronize {
     mon.synchronize{
     
     }
   }

[[c:Mutex]] ではデッドロックになります。

   require 'thread'
   mx = Mutex.new
   mx.synchronize {
     mx.synchronize{

     }
   }
   # => deadlock; recursive locking (ThreadError)

== Class Methods

--- new
#@todo

Monitor オブジェクトを生成します。

== Instance Methods

--- mon_enter
--- enter
#@todo

モニターをロックします。[[m:MonitorMixin#mon_enter]] を
参照して下さい。

--- mon_exit
--- exit
#@todo

モニターを解放します。[[m:MonitorMixin#mon_exit]] を
参照して下さい。

--- mon_synchronize { ... }
--- synchronize     { ... }
#@todo

[[m:MonitorMixin#mon_synchronize]] を参照して下さい。

--- mon_try_enter
--- try_enter
#@todo

[[m:MonitorMixin#mon_try_enter]] を参照して下さい。

--- new_cond
#@todo

[[m:MonitorMixin#new_cond]] を参照して下さい。
