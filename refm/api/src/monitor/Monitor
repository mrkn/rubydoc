= class Monitor < Object

include MonitorMixin

スレッドの同期機構としてのモニター機能を提供するクラスです。
また同じスレッドから何度も lock できる Mutex としての機能も提供します。


=== 例

  require 'monitor'
  
  buf = []
  mon = Monitor.new
  empty_cond = mon.new_cond
  
  # consumer
  Thread.start do
    loop do
      mon.synchronize do
        empty_cond.wait_while { buf.empty? }
        print buf.shift
      end
    end
  end
  
  # producer
  while line = ARGF.gets
    mon.synchronize do
      buf.push(line)
      empty_cond.signal
    end
  end

2回ロックしてもデッドロックにならない例です。

   require 'monitor'
   mon = Monitor.new
   mon.synchronize {
     mon.synchronize{
     
     }
   }

[[c:Mutex]] ではデッドロックになります。

   require 'thread'
   mx = Mutex.new
   mx.synchronize {
     mx.synchronize{

     }
   }
   # => deadlock; recursive locking (ThreadError)

== Class Methods

--- new -> Monitor
新しい Monitor オブジェクトを生成します。

== Instance Methods

--- enter -> ()

モニターをロックします。

@see [[m:MonitorMixin#mon_enter]]

--- mon_exit -> ()
--- exit -> ()

モニターのロックを解放します。

@see [[m:MonitorMixin#mon_exit]]

--- mon_synchronize { ... } -> object
--- synchronize     { ... } -> object

モニターをロックし、ブロックを実行します。実行後に必ずモニターのロックを解放します。

ブロックの評価値を返り値として返します。

@see [[m:MonitorMixin#mon_synchronize]]

--- mon_try_enter -> bool
--- try_enter -> bool

モニターのロックを取得しようと試みます。
ロックに成功した(ロックが開放状態だった、もしくは
ロックを取得していたスレッドが自分自身であった)場合には
真を返します。

@see [[m:MonitorMixin#mon_try_enter]]

--- new_cond -> MonitorMixin::ConditionVariable
モニタに関連付けられた、新しい 
[[c:MonitorMixin::ConditionVariable]] を生成して返します。

@see [[m:MonitorMixin#new_cond]]
