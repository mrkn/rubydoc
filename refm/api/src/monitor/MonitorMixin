= module MonitorMixin

スレッドの同期機構としてのモニター機能を提供するモジュールです。

=== 例

  require 'monitor'
  
  buf = []
  buf.extend(MonitorMixin)
  empty_cond = buf.new_cond
  
  # consumer
  Thread.start do
    loop do
      buf.synchronize do
        empty_cond.wait_while { buf.empty? }
        print buf.shift
      end
    end
  end
  
  # producer
  while line = ARGF.gets
    buf.synchronize do
      buf.push(line)
      empty_cond.signal
    end
  end

=== 初期化

MonitorMixin は初期化される必要があります。
上の例のように [[m:Object#extend]] を使って利用する場合は
自動的に初期化されます。

  require 'monitor'
  buf = []
  buf.extend(MonitorMixin)

しかし、MonitorMixin をクラス定義の際に [[m:Module#include]] を使って
利用する場合は、initialize メソッドで super() か super を呼んで、初期化する必要があります。
スーパークラスの initialize に引数を渡したい場合は super を、そうでない場合は super() を呼んで下さい。
詳しくは、[[ref:d:spec/call#super]] を参照して下さい。
例えば、以下の MyObject のスーパークラスは Object であり、その initialize は引数を受け付けないので
super ではなく super() を呼ぶ必要があります。

  require 'monitor'
  class MyObject
    include MonitorMixin
    
    def initialize(val)
      super()
      @value = val
    end
    
    def to_s
      synchronize {
        @value.to_s
      }
    end
  end

以下も参考になります。

  * [[ruby-dev:9384]]
  * [[ruby-dev:9386]]

== Instance Methods

--- mon_enter
#@todo

モニターをロックします。一度に一つのスレッドだけがモニターをロックできます。
[[m:Mutex#lock]] に相当します。返り値は不定です。
Mutex#lock と違うのは現在のモニターの所有者が現在実行されているスレッドである場合、
何度でもロックできる点です。ロックした回数だけ mon_exit を呼ばなければモニターは
解放されません。

例:

  require 'monitor'
  buf = []
  buf.extend(MonitorMixin)
  buf.mon_enter
  buf.mon_enter

Mutex#lock ではデッドロックが起きます。

例:

  require 'thread'
  m = Mutex.new
  m.lock
  m.lock # => deadlock; recursive locking (ThreadError)

--- mon_exit
#@todo

モニターのロックを解放します。mon_enter でロックした回数だけ mon_exit を
呼ばなければモニターは解放されません。返り値は不定です。

モニターが解放されればモニターのロック待ちになっていたスレッドの実行は
再開されます。

--- mon_synchronize { ... }
--- synchronize     { ... }
#@todo

モニターをロックし、ブロックを実行します。実行後に必ずモニターのロックを解放します。

#@since 1.8.1
--- mon_try_enter
#@end
--- try_mon_enter
#@todo

モニターを開始しようとして成功した場合、true を返します。
つまりモニターしているスレッドがいないか、モニターしているのがスレッドが
現在のスレッドの場合に true を返します。

--- new_cond
#@todo

新しい [[c:MonitorMixin::ConditionVariable]] を生成して返します。

#@if (version <= "1.8.0")
= module MonitorMixin::Accesible

== Protected Instance Methods

--- mon_owner
--- mon_owner=(owner)
#@todo

--- mon_count
--- mon_count=(count)
#@todo

--- mon_entering_queue
#@todo

--- mon_waiting_queue
#@todo
#@end

#@if (version <= "1.8.0")
= module MonitorMixin::Initializable

== Protected Instance Methods

--- mon_initialize
#@todo
#@end
