
= module JSON::Generator::GeneratorMethods::Array
alias JSON::Ext::Generator::GeneratorMethods::Array

[[c:Array]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state = nil, depth = 0) -> String

自身から生成した JSON 形式の文字列を返します。

@param state 生成する JSON 形式の文字列をカスタマイズするために [[c:JSON::State]] のインスタンスを指定します。

@param depth ネストの深さを見つけるために使用されます。

= module JSON::Generator::GeneratorMethods::FalseClass
alias JSON::Ext::Generator::GeneratorMethods::FalseClass

[[c:FalseClass]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json -> String

自身から生成した JSON 形式の文字列を返します。

"false" という文字列を返します。

= module JSON::Generator::GeneratorMethods::Float
alias JSON::Ext::Generator::GeneratorMethods::Float

[[c:Float]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json -> String

自身から生成した JSON 形式の文字列を返します。

= module JSON::Generator::GeneratorMethods::Hash
alias JSON::Ext::Generator::GeneratorMethods::Hash

[[c:Hash]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json(state = nil, depth = 0) -> String

自身から生成した JSON 形式の文字列を返します。

@param state 生成する JSON 形式の文字列をカスタマイズするために [[c:JSON::State]] のインスタンスを指定します。

@param depth ネストの深さを見つけるために使用されます。

= module JSON::Generator::GeneratorMethods::Integer
alias JSON::Ext::Generator::GeneratorMethods::Integer

[[c:Integer]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json -> String

自身から生成した JSON 形式の文字列を返します。

= module JSON::Generator::GeneratorMethods::NilClass
alias JSON::Ext::Generator::GeneratorMethods::NilClass

[[c:NilClass]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json -> String

自身から生成した JSON 形式の文字列を返します。

"null" という文字列を返します。

= module JSON::Generator::GeneratorMethods::Object
alias JSON::Ext::Generator::GeneratorMethods::Object

[[c:Object]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json -> String

自身を to_s で文字列にした結果を JSON 形式の文字列に変換して返します。

このメソッドはあるオブジェクトに to_json メソッドが定義されていない場合に使用する
フォールバックのためのメソッドです。

= module JSON::Generator::GeneratorMethods::String
alias JSON::Ext::Generator::GeneratorMethods::String

[[c:String]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json -> String

自身から生成した JSON 形式の文字列を返します。

自身のエンコードは UTF-8 であるべきです。
"\u????" のように UTF-16 ビッグエンディアンでエンコードされた文字列を返すことがあります。

--- to_json_raw -> String

自身に対して [[m:String#to_json_raw_object]] を呼び出して [[m:Hash#to_json]] した結果を返します。

@see [[m:String#to_json_raw_object]], [[m:Hash#to_json]]

--- to_json_raw_object -> Hash

生の文字列を格納したハッシュを生成します。

このメソッドは UTF-8 の文字列ではなく生の文字列を JSON に変換する場合に使用してください。

  "にほんご".encode("euc-jp").to_json_raw_object
  # => {"json_class"=>"String", "raw"=>[164, 203, 164, 219, 164, 243, 164, 180]}
  "にほんご".encode("euc-jp").to_json # source sequence is illegal/malformed (JSON::GeneratorError)

= module JSON::Generator::GeneratorMethods::String::Extend
alias JSON::Ext::Generator::GeneratorMethods::String::Extend

[[c:String]] に JSON で使用する特異メソッドを追加するためのモジュールです。

== Class Methods
--- json_create(hash) -> String

JSON のオブジェクトから Ruby の文字列を生成して返します。

@param hash キーとして "raw" という文字列を持ち、その値として数値の配列を持つハッシュを指定します。

  String.json_create({"raw" => [0x41, 0x42, 0x43]}) # => "ABC"

= module JSON::Generator::GeneratorMethods::TrueClass
alias JSON::Ext::Generator::GeneratorMethods::TrueClass

[[c:TrueClass]] に JSON で使用するインスタンスメソッドを追加するためのモジュールです。

== Public Instance Methods
--- to_json -> String

自身から生成した JSON 形式の文字列を返します。

"true" という文字列を返します。

