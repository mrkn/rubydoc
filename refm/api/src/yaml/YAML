= module YAML

YAML (YAML Ain't Markup Language) を扱うクラスです。

=== 参考

* YAML Specification
  * [[m:URL:http:#/www.yaml.org/spec/]]
  * [[m:URL:http:#/www.yaml.org/type/]]
* YAML4R
  * [[m:URL:http:#/yaml4r.sourceforge.net/]]
  * [[m:URL:http:#/yaml4r.sourceforge.net/cookbook/]]
  * [[m:URL:http:#/yaml4r.sourceforge.net/doc/]]
* [[unknown:Ruby with YAML|URL:http://www.namikilab.tuat.ac.jp/~sasada/prog/yaml.html]]
* [[unknown:Rubyist Magazine|URL:http://jp.rubyist.net/magazine/]]
  * [[unknown:プログラマーのための YAML 入門 (初級編)|URL:http://jp.rubyist.net/magazine/?0009-YAML]]
  * [[unknown:プログラマーのための YAML 入門 (中級編)|URL:http://jp.rubyist.net/magazine/?0010-YAML]]
  * [[unknown:プログラマーのための YAML 入門 (実践編)|URL:http://jp.rubyist.net/magazine/?0011-YAML]]
  * [[unknown:プログラマーのための YAML 入門 (検証編)|URL:http://jp.rubyist.net/magazine/?0012-YAML]]
  * [[unknown:プログラマーのための YAML 入門 (探索編)|URL:http://jp.rubyist.net/magazine/?0013-YAML]]

== Module Functions

--- add_builtin_type(type_re){|obj| ...}
#@todo

--- add_domain_type(domain, type_re){|obj| ...}
#@todo

--- add_private_type(type_re){|obj| ...}
#@todo

--- add_ruby_type(type){|obj| ...}
#@todo

--- detect_implicit(val)
#@todo

--- dump(obj, io = nil)
#@todo

与えられた obj を YAML フォーマットに変換し、io に書き込みます。
io が与えられていない場合は、YAML フォーマットの文字列を返します。

  YAML.dump( ['badger', 'elephant', 'tiger'],
             File.open('sample.yml', 'w')    )

#@since 1.8.2
--- dump_stream(*objs)
#@todo

与えられた objs を順に YAML フォーマットに変換していき、一つの文字列にまとめたものを返します。

  require "yaml"
  puts YAML.dump_stream( "hoge\nfoo", [1,2], {"foo" => "bar"} )
  --- |-
  hoge
  foo
  ---
  - 1
  - 2
  ---
  foo: bar
#@end

--- each_document(io) {|obj| ...}
--- load_documents(io) {|obj| ...}
#@todo

与えられた io から YAML フォーマットの文書をすべて順に読み込み
Ruby のオブジェクトに変換し、
生成したオブジェクトを引数としてブロックを評価していきます。

  # sample.yml
  - apple
  - banana
  - carrot
  ---
  foo: bar
  
  #!/usr/bin/env ruby
  require "yaml"
  File.open( 'sample.yml' ) do |io|
    YAML.load_documents(io){|y|
      p y
    }
  end
  #=>   ["apple", "banana", "carrot"]
  #=>   {"foo"=>"bar"}

--- each_node(io) {|obj| ...}
#@todo

--- load(io)
--- load(str)
#@todo

YAML フォーマットの文書を読み込み Ruby のオブジェクトを生成して返します。
引数として IO オブジェクトと文字列を受け付けます。
io や 文字列が複数の YAML ドキュメントを含んでいても、最初のものしか
Ruby のオブジェクトに変換しません。

  $ ruby-1.8 -ryaml -e '
  p YAML.load(<<HERE)
  - apple
  - banana
  - carrot
  ---
  foo: bar
  HERE
  '
  ["apple", "banana", "carrot"]

#@since 1.8.2
--- load_file(file)
#@todo

与えられた名前のファイルから YAML フォーマットの文書を読み込み
Ruby のオブジェクトを生成して返します。
ファイルが複数の YAML ドキュメントを含んでいても、
最初のものしか Ruby のオブジェクトに変換しません。
#@end

--- load_stream(io)
#@todo

与えられた io から YAML フォーマットの文書を
すべて順に読み込んで Ruby のオブジェクトに変換していき、
それらオブジェクトを含んだ [[c:YAML::Stream]] を返します。

--- object_maker(obj_class, val, is_attr = false)
#@todo

--- parse(io)
#@todo

--- parse_documents(io) {|obj| ...}
#@todo

#@since 1.8.2
--- parse_file
#@todo
#@end

--- quick_emit(oid, opts={}) {|obj| ...}
#@todo

--- read_type_class(type, obj_class)
#@todo

#@since 1.8.3
--- tagurize(val)
#@todo
#@end

--- transfer
#@todo

--- try_implicit(obj)
#@todo

= reopen Kernel
== private instance methods
--- y(obj)
#@todo

= reopen Class
== instance methods
--- to_yaml(opts = {})
#@todo

= reopen Object
== instance methods
--- to_yaml(opts = {})
#@todo

--- to_yaml_style
#@todo

--- to_yaml_properties
#@todo

= reopen Struct
== class methods
--- yaml_tag_class_name
#@todo

--- yaml_tag_read_class(name)
#@todo

= reopen String
== instance methods
--- is_complex_yaml?
#@todo

--- is_binary_data?
#@todo
