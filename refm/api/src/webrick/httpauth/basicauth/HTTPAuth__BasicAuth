= class WEBrick::HTTPAuth::BasicAuth < Object
include WEBrick::HTTPAuth::Authenticator

HTTP の Basic 認証のためのクラスです。

例

    realm = "WEBrick's realm"
    srv = HTTPServer.new({ :BindAddress => '127.0.0.1', :Port => 10080})

    htpd = HTTPAuth::Htpasswd.new('dot.htpasswd')
    htpd.set_passwd(nil, 'username', 'supersecretpass')

    authenticator = HTTPAuth::BasicAuth.new(:UserDB => htpd, :Realm => realm)
    srv.mount_proc('/basic_auth') {|req, res|
      authenticator.authenticate(req, res)
      res.body = "hoge"
    }

== Class Methods

--- make_passwd(realm, user, pass)
#@todo
pass をランダムなソルトで crypt した文字列を返します。

--- new(config, default=Config::BasicAuth)
#@todo
BasicAuth オブジェクトを生成します。config は設定を保存したハッシュです。

config で有効なハッシュキーは以下の通りです。
 #
 :Realm            =>
 :UserDB           =>
 :Logger           =>
 :AutoReloadUserDB =>

realm を表す文字列 :Realm には与えます。:UserDB
には [[c:WEBrick::HTTPAuth::Htpasswd]] オブジェクトを与えます。:Logger には
ロガーオブジェクトを与えます。また、:AutoReloadUserDB には
[[m:WEBrick::HTTPAuth::Htpasswd#get_passwd]] の
reload_db に渡す引数を与えます。

== Instance Methods

--- authenticate(req, res)
#@todo
クライアントから送られてきたユーザ名とパスワードを認証します。
認証に失敗した場合は challenge を呼びます。

--- challenge(req, res)
#@todo
クライアントにパスワードを要求するために res に WWW-Authenticate ヘッダを
設定し、例外 WEBrick::HTTPStatus::Unauthorized を投げます。

--- logger
#@todo
ロガーオブジェクトを返します。

--- realm
#@todo
realm を文字列で返します。

--- userdb
#@todo
ユーザ名とパスワードを保存した [[c:WEBrick::HTTPAuth::Htpasswd]] オブジェクトを
返します。
