= class WEBrick::GenericServer < Object

サーバの一般的な機能を提供するクラスです。
[[c:WEBrick::HTTPServer]] のスーパークラスです。

== Class Methods

--- new(config={}, default=WEBrick::Config::General)
#@todo
GenericServer オブジェクトを生成して返します。

@param config サーバの設定を保存したハッシュを指定します。有効なキーと値は以下のとおりです。

: :ServerName
  サーバのホスト名を表す文字列を指定します。デフォルトの Utils.getservername は /etc/hostname
  に書かれている文字列です。
: :BindAddress
  サーバのアドレスを指定します。デフォルトの nil や "0.0.0.0", "::" などを指定した
  場合は使用可能なすべてのネットワークインターフェースに対して listen を開始します。
  [[ref:lib:socket#host_format]]を参照して下さい。
: :Port
  サーバのポートを指定します。[[ref:lib:socket#service_format]]を参照を参照して下さい。
: :MaxClients
  クライアントの最大接続数を表す整数です。
: :ServerType
  サーバのタイプを表すクラスを指定します。 [[c:WEBrick::SimpleServer]] と [[c:WEBrick::Daemon]] が
  提供されています。
: :Logger
  ログをとるオブジェクト(Logger オブジェクト)を指定します。通常は [[c:WEBrick::Log]] のインスタンスを指定します。
  WEBrick::Log.new(log_file, level) のように出力先とログレベルを設定することができます。
  Logger オブジェクトに定義されているべきメソッドに関しては [[c:WEBrick::Log]] を参照して下さい。
: :ServerSoftware
  サーバソフトウェア名を文字列で指定します。[[c:WEBrick::HTTPServer]] では Server ヘッダにこの値が出力されます。
: :DoNotListen
  true の場合、GenericServer オブジェクトを生成しただけでは listen を開始しません。
: :StartCallback
  start 開始時に呼ばれる [[c:Proc]] オブジェクト。呼ばれる時に引数は
  特に与えられません。
: :StopCallback
  サーバを stop した時に呼ばれる [[c:Proc]] オブジェクトを指定します。呼ばれる時に引数は
  特に与えられません。
: :AcceptCallback
  クライアントからの接続を accept したときに呼ばれる [[c:Proc]] オブジェクトを指定します。
  クライアントと接続された [[c:TCPSocket]] オブジェクトを引数として呼ばれます。
#@since 1.9.1
: :DoNotReverseLookup
  true の場合、ホスト名への逆引きを行わなくなります。
  [[m:BasicSocket#do_not_reverse_lookup]]
  も参照して下さい。
#@end

@param default サーバのデフォルトの設定を保存したハッシュを指定します。指定された config で
               設定がなかった項目に関してはこの default の値が使われます。

@see [[m:WEBrick::Config::General]]

== Instance Methods

--- [](key)    -> object
#@todo
self.config[key] と同値。

--- config     -> Hash
#@todo
サーバの設定を保存したハッシュを返す。

--- listen(address, port) -> [TCPServer]

与えられたアドレスとポートで [[c:TCPServer]] オブジェクトを生成し listeners に加えます。
[[m:WEBrick::GenericServer#listeners]] を返します。

@param address アドレスを文字列で指定します。

@param port listen するポートを整数で指定します。

@see [[m:TCPServer#listen]]

--- listeners    -> [TCPServer]
#@todo
listen している [[c:TCPServer]] オブジェクトの配列を返します。

--- logger    -> WEBrick::Log

生成する時に指定された、自身をロギングする [[c:WEBrick::Log]] のインスタンスを返します。

--- shutdown     -> ()

[[m:WEBrick::GenericServer#stop]] を呼び、全ての listeners を close します。

--- start               -> ()
--- start{|soc| ... }   -> ()

サーバをスタートします。

ブロックが与えられた場合 [[m:WEBrick::GenericServer#run]] メソッドの
代わりにブロックが実際のクライアントとの応答を担います。
ブロックは [[c:TCPSocket]] オブジェクトを引数として呼ばれます。

--- status    -> Symbol

現在のサーバのステータスを [[c:Symbol]] オブジェクトで返します。
値は :Running(活動中), :Shutdown(終了処理中), :Stop(完全に停止) のいずれかです。

--- stop    -> ()
#@todo
サーバを停止します。

実際にはサーバの状態を :Shutdown にするだけで、サーバがすぐに停止するとは限りません。

--- tokens    -> SizedQueue

MaxClient の設定のために使われる [[c:SizedQueue]] オブジェクトを返します。
[[c:SizedQueue]] オブジェクトのサイズは現在受け付けることのできるクライアントの数です。

MaxClient を知りたい場合は self.tokens.max です。
self.tokens.max - self.tokens.length が現在のクライアントの接続数です。

--- run(sock)    -> ()

クライアントと接続された TCPSocket オブジェクトを引数として呼ばれ、
具体的な処理を行います。
WEBrick::GenericServer のサブクラスはこのメソッドを適切に再定義しなければいけません。

@param sock クライアントと接続された TCPSocket オブジェクトを指定します。
