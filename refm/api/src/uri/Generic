= class URI::Generic
include URI

すべての URI クラスの基底クラスです。

== Class Methods

--- default_port    -> Integer | nil

スキームに対応するデフォルトのポート番号を整数で返します。

  require 'uri'
  p URI::Generic.default_port     # => nil
  p URI::HTTP.default_port        # => 80

--- component     -> [Symbol]

URI の構成要素を表すシンボルの配列を返します。

  require 'uri'
  p URI::Generic.component
  p URI::MailTo.component
  
  # => [:scheme, :userinfo, :host, :port, :registry, :path, :opaque, :query, :fragment]
  # => [:scheme, :to, :headers]

--- use_registry    -> boolean
#@todo

構成要素 registry を受け付けるなら true を返します。
URI::Generic クラスでは false です。

--- build2(ary)     -> URI::Generic
--- build2(hash)    -> URI::Generic
#@todo

URI::Generic.build と同じですが、例外 URI::InvalidComponentError
が発生した場合に、引数の各要素を URI.escape して再度 build を試み
ます。

@param ary 構成要素を表す文字列の配列を与えます。要素は以下の順です。
//emlist{
      [scheme, userinfo, host, port, registry, path, opaque, query, fragment]
//}

@param hash  構成要素を表すハッシュを与えます。ハッシュのキーはシンボルは以下
            のいずれかです。 ハッシュの値は文字列で与えます。
//emlist{
      :scheme, :userinfo, :host, :port, :registry, :path, :opaque, :query, :fragment 
//}
            

--- build(ary)     -> URI::Generic
--- build(hash)    -> URI::Generic
#@todo

引数で与えられた URI 構成要素から URI::Generic オブジェクトを生成します。

@param ary 構成要素を表す配列を与えます。要素は以下の順です。
//emlist{
      [scheme, userinfo, host, port, registry, path, opaque, query, fragment]
//}

@path hash  構成要素を表すハッシュを与えます。ハッシュのキーはシンボルは以下のいずれかです。
            ハッシュの値は文字列で与えます。
//emlist{
      :scheme ,:userinfo, :host, :port, :registry, :path, :opaque, :query, :fragment 
//}

@raise URI::InvalidComponentError 各要素が適合しない場合に発生します。

--- new(scheme, userinfo, host, port, registry, path, opaque, query, fragment, arg_check = false)    -> URI::Generic
#@todo

各引数を成分とする URI::Generic オブジェクトを生成して返します。

@param scheme 構成要素 scheme を表す文字列を与えます。

@param userinfo 構成要素を表す文字列を与えます。

@param host 構成要素を表す文字列を与えます。

@param port 構成要素を表す文字列を与えます。

@param registry 構成要素を表す文字列を与えます。

@param path 構成要素を表す文字列を与えます。

@param opaque 構成要素を表す文字列を与えます。

@param query 構成要素を表す文字列を与えます。

@param fragment 構成要素を表す文字列を与えます。

@param arg_check 真が与えられた場合は、各引数が字句規則に適合しているか否かを検査します。適合しない場合は例外 URI::InvalidComponentError が起ります。

@raise URI::InvalidURIError use_registry が偽のとき、registry が与えられると発生します。

== Instance Methods

--- default_port     -> Integer | nil

self.class.default_port を返します。

@see [[m:URI::Generic.default_port]]

--- component     -> [Symbol]

self.class.component を返します。

@see [[m:URI::Generic.component]]

--- scheme    -> String | nil
#@todo

自身の scheme を文字列で返します。設定されていない場合は nil を返します。

--- scheme=(s)
#@todo

自身の scheme を設定します。

@param s 自身の scheme を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

--- userinfo    -> String | nil
#@todo

自身の userinfo を文字列で返します。設定されていない場合は nil を返します。

--- userinfo=(s)
#@todo

自身の userinfo を設定します。

@param s 自身の userinfo を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError userinfo と registry を同時に設定した場合に発生します。

--- user    -> String | nil
#@todo

自身の userinfo を文字列で返します。

userinfo が「username:password」の形式である場合は、username 部を返します。
設定されていない場合は nil を返します。

--- user=(s)
#@todo

自身の user を設定します。

@param s 自身の user を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError user と registry を同時に設定した場合に発生します。

--- password    -> String | nil
#@todo

自身の password を文字列で返します。設定されていない場合は nil を返します。

--- password=(s)
#@todo

自身の password を設定します。

@param s 自身の password を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError userinfo と registry を同時に設定した場合に発生します。

--- host    -> String | nil
#@todo

自身の host を文字列で返します。設定されていない場合は nil を返します。

--- host=(s)
#@todo

自身の host を設定します。

@param s 自身の host を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError host と registry を同時に設定した場合に発生します。

--- port     -> String | nil
#@todo

自身の port を文字列で返します。設定されていない場合は nil を返します。

--- port=(s)
#@todo

自身の port を設定します。

@param s 自身の port を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError port と registry を同時に設定した場合に発生します。

--- registry    -> String | nil
#@todo

自身の registry を文字列で返します。設定されていない場合は nil を返します。

--- registry=(s)
#@todo

自身の registry を設定します。

@param s 自身の registry を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError server 部と registry を同時に設定した場合に発生します。

--- path     -> String | nil
#@todo

自身の path を文字列で返します。設定されていない場合は nil を返します。

  p URI.parse('http://example.com/hoge').path       #=> "/hoge"
  p URI.parse('http://example.com').path            #=> ""
  p URI.parse('mailto:nospam@localhost').path       #=> nil

--- path=(s)
#@todo

自身の path を設定します。

@param s 自身の path を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError opaque と path を同時に設定した場合に発生します。

--- query     -> String | nil
#@todo

自身の query を文字列で返します。設定されていない場合は nil を返します。

--- query=(s)
#@todo

自身の query を設定します。

@param s 自身の query を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError opaque と query を同時に設定した場合に発生します。

--- opaque     -> String | nil
#@todo

自身の opaque を文字列で返します。設定されていない場合は nil を返します。

 p URI.parse('http://example.com/').opaque       #=> nil
 p URI.parse('mailto:nospam@localhost').opaque   #=> "nospam@localhost"
 p URI.parse('urn:ietf:rfc:1149').opaque         #=> "ietf:rfc:1149"

--- opaque=(s)
#@todo

自身の opaque を設定します。

@param s 自身の opaque を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

@raise URI::InvalidURIError  opaque とヒエラルキーパートを同時に設定した場合に発生します。

--- fragment     -> String | nil
#@todo

自身の fragment を文字列で返します。設定されていない場合は nil を返します。

--- fragment=(s)
#@todo

自身の fragment を設定します。

@param s 自身の fragment を表す文字列を指定します。

@raise URI::InvalidComponentError 不正な引数 s に対して発生します。

--- hierarchical?    -> boolean
#@todo

自身に path が設定されているなら true を返します。そうでない場合は false を返します。

--- absolute     -> boolean
--- absolute?    -> boolean
#@todo

自身に scheme が設定されているなら true を返します。そうでない場合は false を返します。

--- relative?    -> boolean
#@todo

自身に scheme が設定されていないなら true を返します。そうでない場合は false を返します。

--- merge!(rel)    -> self

与えられたパス rel を自身へ連結します。

[[rfc:2396]] の Section 5.2 の仕様に従います。
rel が文字列の場合は URI.parse(rel) によって、URI に変換してから連結します。

@param rel 連結したいパスを文字列か URI オブジェクトで与えます。

例:
  u = URI.parse('http://www.ruby-lang.org/')
  u.merge!('/en/raa.html')
  p u.to_s                                   #=> http://www.ruby-lang.org/en/raa.html

--- merge(rel)     -> URI::Generic
--- +(rel)         -> URI::Generic

自身と与えられたパス rel を連結した新しい URI オブジェクトを生成して返します。

[[rfc:2396]] の Section 5.2 の仕様に従います。
rel が文字列の場合は URI.parse(rel) によって、URI に変換してから連結します。

@param rel 連結したいパスを文字列か URI オブジェクトで与えます。

例:
  require 'uri'
  p URI.parse('http://www.ruby-lang.org/') + '/en/raa.html'
  #=> #<URI::HTTP:0x201001c0 URL:http://www.ruby-lang.org/en/raa.html>

--- route_from(src)    -> URI::Generic
--- -(src)             -> URI::Generic

与えられた URI を表す src からの相対パスを返します。

@param src 自身の相対パスを算出するための、ルートとなる Absolute URI を与えます。

例:
  require 'uri'
  p URI.parse('http://www.ruby-lang.org/en/raa.html') - 'http://www.ruby-lang.org/'
  #=> #<URI::Generic:0x20100256 URL:en/raa.html>

--- route_to(dst)     -> URI::Generic
#@todo

自身から dst への相対パスを返します。

@param dst 文字列かURIオブジェクトを与えます。

例:
  require 'uri'
  p URI.parse('http://www.ruby-lang.org/').route_to('http://www.ruby-lang.org/en/raa.html')
  
  #=> #<URI::Generic:0x20100198 URL:en/raa.html>

--- normalize     -> URI::Generic
--- normalize!    -> nil
#@todo

URI オブジェクトを正規化して返します。ホスト名を小文字にし、パスと
構成要素がなければ '/' をセットします。

例:
  u = URI.parse('http://Example.Com')
  p u.to_s                            #=> "http://Example.Com"
  p u.normalize.to_s                  #=> "http://example.com/"

--- to_s      -> String
--- to_str    -> String
#@todo

自身が表す URI を文字列として返します。

例:
 p URI.parse('http://example.com/').to_s #=> "http://example.com/"

--- ==(uri)    -> boolean
#@todo

引数に指定した URI (文字列またはURIオブジェクト)との一致判定を行い
ます。URI は正規化して比較されます。

--- select(*components)    -> [String]
#@todo
Args

components: Multiple Symbol arguments defined in URI::HTTP

Description

Selects specified components from URI

Usage

  require 'uri'
  
  uri = URI.parse('http://myuser:mypass@my.example.com/test.rbx')
  p uri.select(:userinfo, :host, :path)
  # => ["myuser:mypass", "my.example.com", "/test.rbx"]

@param select 
