= class OptionParser < Object

コマンドラインのオプションを取り扱うためのクラスです。
オプションが指定された時に呼ばれるブロックを
[[m:OptionParser#on]] メソッドで登録していきます。
つまり、OptionParser を使う場合、基本的には

 * (1) OptionParser オブジェクト opt を生成する。
 * (2) オプションを取り扱うブロックを opt に登録する。
 * (3) opt.parse(ARGV) でコマンドラインを実際に parse する。

というような流れになります。

  require "optparse"
  ProgramConfig = Hash.new
  opts = OptionParser.new
  opts.on("-a"){|v| ProgramConfig[:a] = true } # オプション「-a」がコマンドラインで指定されていた場合の動作。
  opts.parse!(ARGV)                            # 実際にコマンドラインの parse を行う。

=== デフォルトで利用可能なオプション

以下はデフォルトで利用可能なオプションです。オプションサマリには
出てきません。

: --help

オプションサマリを表示します。

: --version

定数 ::Version が定義されていたら、それを表示します。


== Class Methods

--- new(banner=nil, width=32, indent = ' ' * 4)              -> OptionParser
--- new(banner=nil, width=32, indent = ' ' * 4) {|opt| ...}  -> object
#@todo

OptionParser オブジェクトを生成して返します。

ブロックが与えられた場合、生成した OptionParser オブジェクトを引数としてブロックを評
価します。つまり、以下のような書き方が可能です。

  require 'optparse'
  OptionParser.new do |opt|

    opt.on('-a') {|v| p v }
    opt.on('-b') {|v| p v }

    opt.parse!(ARGV)
  end

@param banner ヘルプ(サマリ)の最初の部分に表示される、アプリケーションの説明などを文字列で与えます。

@param width サマリの幅を整数で与えます。

@param indent サマリのインデントを文字列で与えます。

--- accept(klass, pat = /.*/){|str| ...}    -> ()
#@todo

オプションの引数を文字列から Ruby のオブジェクトに変換するための
ブロックを登録します。すべての OptionParser インスタンスに共通です。
klass にはクラスオブジェクトを与えます。pat には match メソッドを持ったオブジェクト
([[c:Regexp]] オブジェクトなど)を与えます。

ブロックには、文字列として与えられるオプションの引数から klass のインスタンスを生成して返すものを指定します。

[[m:OptionParser#on]] で klass を指定した場合、
コマンドラインのオプションに与えられた引数はこの accept で登録したブロックで
klass のインスタンスに変換されてから、
OptionParser#on で登録したブロックに渡されます。

  require "optparse"
  require "time"
  
  OptionParser.accept(Time) do |s,|
    begin
      Time.parse(s) if s
    rescue
      raise OptionParser::InvalidArgument, s
    end
  end

  opts = OptionParser.new

  opts.on("-t", "--time [TIME]", Time) do |time|
    p time.class #=> Time
  end

  opts.parse!(ARGV)

いくつかのクラスに対しては変換用のブロックがデフォルトで登録されて
います。[[m:OptionParser#on]]を参照
して下さい。

@param klass クラスオブジェクトを与えます。

@param pat match メソッドを持ったオブジェクト([[c:Regexp]] オブジェクトなど)を与えます。

--- reject(klass)    -> ()
#@todo

[[m:OptionParser.accept]] で登録したブロックを削除します。

@param klass 削除したいクラスオブジェクトを与えます。

#@since 1.8.5
--- getopts(*args)
#@todo

self.new.getopts(*args) と同じです。
[[m:OptionParser#getopts]] を参照して下さい。

#@end

== Instance Methods

--- accept(klass, pat = /.*/){|str| ...}    -> ()
#@todo

[[m:OptionParser.accept]] と同様ですが、
登録したブロックはレシーバーに限定されます。

--- reject(klass)    -> ()
#@todo

[[m:OptionParser#accept]] で登録したクラスとブロックを
自身から削除します。

@parse klass 自身から削除したいクラスを指定します。

--- banner            -> String
--- banner=(heading)
#@todo

サマリの最初の部分を設定します。

--- summary_width         -> Integer
--- summary_width=(width)
#@todo

サマリを表示するときの幅を数値で設定します。

--- summary_indent          -> String
--- summary_indent=(indent)
#@todo

サマリを表示する時のインデントを文字列で設定します。

--- program_name           -> String
--- program_name=(name)
#@todo
プログラムの名前を文字列で設定します。デフォルトは $0 が使わ
れます。

--- version       -> [Integer]
--- version=(ver)
#@todo
プログラムのバージョンを設定します。

--- release       -> Integer
--- release=(rel)
#@todo
Release code.

--- ver    -> String
#@todo
program_name、version と release から生成したバー
ジョンを表す文字列を返します。

--- summarize(to = [], width = @summary_width, max = width - 1, indent= @summary_indent)
--- summarize(to = [], width = @summary_width, max = width - 1, indent= @summary_indent) {|line| ... }
#@todo

サマリを to へと加えていきます。
to には << メソッドが定義されたオブジェクトを与えます。
デフォルトは [] です。
width にはサマリの幅を数値で与えます。デフォルトは self.summary_width です。
サマリの最大幅を数値で与えます。デフォルトは self.summary_width - 1です。
indent にはサマリのインデントを文字列で与えます。デフォルトは
self.summary_indent です。

ブロックが与えられた場合、サマリの各行を引数としてブロックを評価します。
この場合、ブロックの中で明示的に to へと加えていかない限り、
to にサマリが加えられることはありません。

--- help    -> String
--- to_s    -> String
#@todo

サマリの文字列を返します。

--- to_a    -> [String]
#@todo

サマリの各行を要素とした配列を返します。

--- separator(sep)    -> ()
#@todo

サマリを表示する時に使われる、オプションを区切るための文字列 sep を設定します。
オプションにいくつかの種類がある場合に、サマリがわかりやすくなります。

サマリには on メソッドを呼んだ順にオプションが表示されるので、区切りを挿入したい
ところでこのメソッドを呼びます。[[unknown:例|optparse/Example]]を参照してください。

@param sep 区切りとして表示されます。

--- on(short, desc = "") {|v| ... }        -> self
--- on(long, desc = "") {|v| ... }         -> self
--- on(short, long, desc = "") {|v| ... }  -> self
#@todo

オプションを取り扱うためのブロックを登録します。

short にはショートオプションを表す文字列を与えます。
そのオプションが引数をとらない場合は、
  on("-x"){|boolean| ...}
となります。コマンドラインにオプションが存在した場合 true を引数と
してブロックを評価します。
ショートオプションが引数をとる場合は、
  on("-x MANDATORY"){|val| ...}
となります。"MANDATORY" の部分は任意の文字列で構いません。
オプションの引数が必須でない場合は [ ] をつけて、
  on("-x [OPTIONAL]"){|val| ...}
となります。

long にはロングオプションを表す文字列を与えます。ショートオプショ
ンの時と同様に、
  on("--long"){|boolean| ...}
  on("--long MANDATORY"){|val| ...}
  on("--long [OPTIONAL]"){|val| ...}
と指定できます。

ショートオプションとロングオプションを同時に登録することもできます。
  opts.on("-r", "--require LIBRARY"){|lib| ...}
これは以下と同値です。
  opts.on("-r LIBRARY"){|lib| ...}
  opts.on("--require LIBRARY"){|lib| ...}


--- on(short, pat = /.*/, desc = "") {|v| ...}        -> self
--- on(long, pat = /.*/, desc = "") {|v| ...}         -> self
--- on(short, long, pat = /.*/, desc = "") {|v| ...}  -> self
#@todo

オプションを取り扱うためのブロックを登録します。

pat にはオプションの引数に許すパターンを表す正規表現で与えます。
コマンドに与えられた引数がパターンにマッチしない場合、
例外 OptionParser::InvalidArgument が parse 実行時に投げられます。

  opts.on("--username VALUE", /[a-zA-Z0-9_]+/){|name| ...}
  # ruby command --username=ruby_user
  # ruby command --username=ruby.user #=> Error

@param pat オプションの引数に許すパターンを表す正規表現で与えます。

@param desc オプションの説明を文字列で与えます。サマリに表示されます。

--- on(short, klass = String, desc = "") {|v| ...}        -> self
--- on(long, klass = String, desc = "") {|v| ...}         -> self
--- on(short, long, klass = String, desc = "") {|v| ...}  -> self
#@todo

オプションを取り扱うためのブロックを登録します。

klass にはクラスを与えます。
どのようなクラスを受け付けるかは、
以下の「デフォルトで利用可能な引数クラス」を参照して下さ
い。OptionParser.accept や OptionParser#accept によって、受け付け
るクラスを増やすことができます。登録されていないクラスが指定された
場合、例外 ArgumentError を投げます。

オプションの引数は accept で登録したブロックで klass のインスタンス
に変換されてから、ブロックに渡されます。

  opts.on("-w", "--width N", Integer){|w|
    p w.class #=> Integer
  }
  # ruby command --width=32

  opts.on("-o", "--overwrite VALUE", TrueClass){|boolean| ...}
  # ruby command --overwrite yes

desc にはオプションの説明を文字列で与えます。
サマリに表示されます。

==== デフォルトで利用可能な引数クラス

: Object
 any string, and no conversion. this is fall-back.

: String
 any none-empty string, and no conversion.

: Integer
 Ruby/C-like integer, octal for 0-7 sequence, binary for
 0b, hexadecimal for 0x, and decimal for others; with
 optional sign prefix. Converts to Integer.

: Float
 Float number format, and converts to Float.

: Numeric
 Generic numeric format, and converts to Integer for integer
 format, Float for float format.

: OptionParser::DecimalInteger
 Decimal integer format, to be converted to Integer.

: OptionParser::OctalInteger
 Ruby/C like octal/hexadecimal/binary integer format, to be converted
 to Integer.

: OptionParser::DecimalNumeric
 Decimal integer/float number format, to be converted to
 Integer for integer format, Float for float format.

: TrueClass
 Boolean switch, which means whether it is present or not, whether it
 is absent or not with prefix no-, or it takes an argument
 yes/no/true/false/+/-.

: FalseClass
 Similar to TrueClass, but defaulted to false.

: Array
 List of strings separated by ","

--- on(short, *rest) {|v| ...}        -> self
--- on(long, *rest) {|v| ...}         -> self
--- on(short, long, *rest) {|v| ...}  -> self
#@todo

オプションを取り扱うためのブロックを登録します。

klass には可能な引数を列挙した配列やハッシュを
与えることもできます。
  opts.on("--protocol VALUE", [:http, :ftp, :https]){|w|
    p w
  }
  # ruby command --protocol=http #=> :http

  opts.on("-c", "--charset VALUE", {"jis" => "iso-2022-jp", "sjis" => "shift_jis"}){|w|
    p w
  }
  # ruby command --charset=jis #=> "iso-2022-jp"

コマンドに与えられた引数が配列やハッシュに含まれない場合、
例外 OptionParser::InvalidArgument が parse 実行時に投げられます。

--- on_head(short [, long [, klass [, pat [, desc]]]]) {...}
--- on_tail(short [, long [, klass [, pat [, desc]]]]) {...}
#@todo

[[m:OptionParser#on]]と同様の働きをします。
on メソッドと違う点は、OptionParser オブジェクトが保持している
リストの最初かあるいは最後にブロックを登録する点です。

--version や --help の説明をサマリの最後に表示したい時に便利です。

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on_tail("--version", "Show version") do
    puts OptionParser::Version.join('.')
    exit
  end

--- order(*argv)                    -> String
--- order(*argv){|s| ...}           -> String
--- order!(argv = ARGV)             -> String
--- order!(argv = ARGV) {|s| ...}   -> String
#@todo

与えられた argv を順番にパースします。
オプションではないコマンドの引数(下の例で言うと somefile)に出会うと、パースを中断します。
ブロックが与えられている場合は、パースを中断せずに
引数をブロックに渡してブロックを評価し、パースを継続します。argv を返します。

order! は与えられた argv を破壊的にパースします。
argv からオプションがすべて取り除かれます。

  $ cat opt.rb
  require 'optparse'
  opt = OptionParser.new

  opt.on('-a [VAL]') {|v| p :a }
  opt.on('-b') {|v| p :b }

  opt.order!(ARGV)
  p ARGV

  $ ruby opt2.rb -a foo somefile -b
  :a
  ["somefile", "-b"]

コマンドの引数 somefile よりも後ろにオプションを置くことができま
せん。-b もコマンドのオプションではない引数として扱われてしまいます。

--- permute(*argv)          -> String
--- permute!(argv = ARGV)   -> String
#@todo

与えられた argv をパースします。
オプションではないコマンドの引数(下の例で言うと somefile)があってもパースを中断しません。
オプションでない引数の配列を返します。

permute! は与えられた argv を破壊的にパースします。
argv からオプションがすべて取り除かれます

  $ cat opt.rb
  require 'optparse'
  opt = OptionParser.new

  opt.on('-a [VAL]') {|v| p :a }
  opt.on('-b ') {|v| p :b }

  opt.permute!(ARGV)
  p ARGV

  $ ruby opt2.rb -a foo somefile -b
  :a
  :b
  ["somefile"]

order と違いコマンドの引数 somefile よりも後ろにオプションを置くことが
できます。

--- parse(*argv)          -> String
--- parse!(argv = ARGV)   -> String
#@todo

与えられた argv をパースします。
permute と同様に振舞います。しかし、
環境変数に POSIXLY_CORRECT が設定されている場合は、
order と同様に振舞います。

parse! は permute! と同様に argv を破壊的にをパースします。
環境変数に POSIXLY_CORRECT が設定されている場合は、
order! と同様に振舞います。

--- load(filename)     -> bool
#@todo

file を読み込んで各行に対して parse を行ないます。

--- environment(env)    -> String
#@todo

環境変数 env に対して
[[m:Shellwords.shellwords]] を呼
んで配列にしてから parse を行ないます。

@param env 環境変数名を文字列で与えます。

#@since 1.8.3
--- default_argv    -> [String]
--- default_argv=
#@todo
Strings to be parsed in default. ARGV is default.
#@end

#@since 1.8.5
--- getopts    -> Hash
#@todo
Wrapper method for getopts.rb.

 params = ARGV.getopts("ab:", "foo", "bar:")
 # params[:a] = true   # -a
 # params[:b] = "1"    # -b1
 # params[:foo] = "1"  # --foo
 # params[:bar] = "x"  # --bar x

#@end
