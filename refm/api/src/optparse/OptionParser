= class OptionParser < Object

コマンドラインのオプションを取り扱うためのクラスです。

オプションが指定された時に呼ばれるブロックを
[[m:OptionParser#on]] メソッドで登録していきます。
つまり、OptionParser を使う場合、基本的には

 * (1) OptionParser オブジェクト opt を生成する。
 * (2) オプションを取り扱うブロックを opt に登録する。
 * (3) opt.parse(ARGV) でコマンドラインを実際に parse する。

というような流れになります。

  require "optparse"
  ProgramConfig = Hash.new
  opts = OptionParser.new
  opts.on("-a"){|v| ProgramConfig[:a] = true } # オプション「-a」がコマンドラインで指定されていた場合の動作。
  opts.parse!(ARGV)                            # 実際にコマンドラインの parse を行う。

=== デフォルトで利用可能なオプション

以下はデフォルトで利用可能なオプションです。オプションサマリには
出てきません。

: --help
 オプションサマリを表示してから exit します。

: --version

 [[m:OptionParser#ver]] を表示してから exit します。
 [[m:OptionParser#ver]] が定義されていない場合は、そのようにエラーメッセージを出力して abort します。
 オプション「--version」に「,」で区切られたクラス名かモジュール名を引数として与えた場合は、そのクラスおよびモジュールで定義されている定数「Version」および「Release」を表示して、終了します。
//emlist{
 $ ruby t.rb --version=OptionParser,URI,OpenSSL
 t: OptionParser version 12203 (2007-04-20)
 t: URI version 0.9.11
 t: OpenSSL version 1.0.0
//}
== Class Methods

--- new(banner = nil, width = 32, indent = ' ' * 4)              -> OptionParser
--- new(banner = nil, width = 32, indent = ' ' * 4) {|opt| ...}  -> OptionParser

OptionParser オブジェクトを生成して返します。

ブロックが与えられた場合、生成した OptionParser オブジェクトを引数としてブロックを評
価します。つまり、以下のような書き方が可能です。

  require 'optparse'
  OptionParser.new do |opt|

    opt.on('-a') {|v| p v }
    opt.on('-b') {|v| p v }

    opt.parse!(ARGV)
  end

@param banner ヘルプ(サマリ)の最初の部分に表示される、アプリケーションの説明などを文字列で与えます。

@param width サマリの幅を整数で与えます。

@param indent サマリのインデントを文字列で与えます。

--- accept(klass, pat = /.*/){|str| ...}    -> ()

オプションの引数を文字列から Ruby のオブジェクトに変換するための
ブロックを登録します。すべての OptionParser インスタンスに共通です。

ブロックには、文字列として与えられるオプションの引数から klass のインスタンスを生成して返すものを指定します。

[[m:OptionParser#on]] で klass を指定した場合、
コマンドラインのオプションに与えられた引数は、この accept で登録したブロックで
klass のインスタンスに変換されてから、OptionParser#on メソッドで登録したブロックに渡されます。

  require "optparse"
  require "time"
  
  OptionParser.accept(Time) do |s,|
    begin
      Time.parse(s) if s
    rescue
      raise OptionParser::InvalidArgument, s
    end
  end

  opts = OptionParser.new

  opts.on("-t", "--time [TIME]", Time) do |time|
    p time.class #=> Time
  end

  opts.parse!(ARGV)

いくつかのクラスに対しては変換用のブロックがデフォルトで登録されて
います。[[m:OptionParser#on]] を参照して下さい。

@param klass クラスオブジェクトを与えます。

@param pat match メソッドを持ったオブジェクト([[c:Regexp]] オブジェクトなど)を与えます。

--- reject(klass)    -> ()

[[m:OptionParser.accept]] メソッドで登録したブロックを削除します。

@param klass 削除したいクラスオブジェクトを指定します。

#@since 1.8.5
--- getopts(argv, *opts)
--- getopts(*opts)
#@todo

self.new.getopts(*args) と同じです。
[[m:OptionParser#getopts]] を参照して下さい。

#@end

== Instance Methods

--- accept(klass, pat = /.*/){|str| ...}    -> ()

[[m:OptionParser.accept]] と同様ですが、
登録したブロックはレシーバーに限定されます。

@param klass クラスオブジェクトを与えます。

@param pat match メソッドを持ったオブジェクト([[c:Regexp]] オブジェクトなど)を与えます。

--- reject(klass)    -> ()

[[m:OptionParser#accept]] で登録したクラスとブロックを
自身から削除します。

@param klass 自身から削除したいクラスを指定します。

--- banner            -> String
--- banner=(heading)

サマリの最初に表示される文字列を表すアクセサです。

@param heading サマリの最初に表示される文字列を指定します。

--- summary_width         -> Integer
--- summary_width=(width)

サマリを表示するときの幅を表すアクセサです。

@param width サマリを表示するときの幅を整数で設定します。

--- summary_indent          -> String
--- summary_indent=(indent)

サマリを表示する時のインデントを表すアクセサです。

@param indent サマリを表示する時に使われるインデントを文字列で指定します。

--- program_name           -> String
--- program_name=(name)

プログラムの名前を表すアクセサです。デフォルトは $0 が使われます。

@param name プログラムの名前を文字列で指定します。

--- version       -> String
--- version=(ver)

プログラムのバージョンを表すアクセサです。

@param ver プログラムのバージョンを文字列で指定します。

--- release       -> String
--- release=(rel)

Release code.

@param rel プログラムのリリースを文字列で指定します。

--- ver    -> String

program_name、version と release から生成したバージョンを表す文字列を返します。

--- summarize(to = [], width = self.summary_width, max = width - 1, indent= self.summary_indent)               -> ()
--- summarize(to = [], width = self.summary_width, max = width - 1, indent= self.summary_indent) {|line| ... } -> ()

サマリを指定された to へと加えていきます。

ブロックが与えられた場合、サマリの各行を引数としてブロックを評価します。
この場合、ブロックの中で明示的に to へと加えていかない限り、
to にサマリが加えられることはありません。

@param to サマリを出力するオブジェクトを指定します。to には << メソッドが定義されいる必要があります。

@param width サマリの幅を整数で指定します。

@param max サマリの最大幅を整数で指定します。

@param indent サマリのインデントを文字列で指定します。

--- help    -> String
--- to_s    -> String

サマリの文字列を返します。

--- to_a    -> [String]

サマリの各行を要素とした配列を返します。

--- separator(sep)    -> ()

サマリにオプションを区切るための文字列 sep を挿入します。
オプションにいくつかの種類がある場合に、サマリがわかりやすくなります。

サマリには on メソッドを呼んだ順にオプションが表示されるので、区切りを挿入したい
ところでこのメソッドを呼びます。[[unknown:例|optparse/Example]]を参照してください。

@param sep サマリの区切りを文字列で指定します。

例:
       require 'optparse'
       opts = OptionParser.new 
       opts.banner = "Usage: example.rb [options]"
       
       opts.separator ""
       opts.separator "Specific options:"
       
       opts.on("-r", "--require LIBRARY") do |lib|
               options.library << lib
       end

       opts.separator ""
       opts.separator "Common options:"
       
       opts.on_tail("-h", "--help", "Show this message") do
         puts opts
         exit
       end
       

--- on(short, desc = "") {|v| ... }        -> self
--- on(long, desc = "") {|v| ... }         -> self
--- on(short, long, desc = "") {|v| ... }  -> self

オプションを取り扱うためのブロックを自身に登録します。
ブロックはコマンドラインのパース時に、オプションが指定されていれば呼ばれます。

ショートオプションとロングオプションを同時に登録することもできます。
  opts.on("-r", "--require LIBRARY"){|lib| ...}
これは以下と同値です。
  opts.on("-r LIBRARY"){|lib| ...}
  opts.on("--require LIBRARY"){|lib| ...}

複数の異なるオプションに同じブロックを一度に登録することもできます。

  opt.on('-v', '-vv'){|boolean| ...}
  opt.on('--require X', '--need', '--dependon'){|x| ... }

@param short ショートオプションを表す文字列を指定します。
             そのオプションが引数をとらない場合は、
//emlist{
  on("-x"){|boolean| ...}
//}
             となります。コマンドラインにオプションが存在した場合 true を引数と
             してブロックを評価します。
             ショートオプションが引数をとる場合は、
//emlist{
  on("-x MANDATORY"){|val| ...}
//}
             となります。"MANDATORY" の部分は任意の文字列で構いません。
             オプションの引数が必須でない場合は [ ] をつけて、
//emlist{
  on("-x [OPTIONAL]"){|val| ...}
//}
             となります。

@param long ロングオプションを表す文字列を指定します。ショートオプションの時と同様に、
//emlist{
  on("--long"){|boolean| ...}
  on("--long MANDATORY"){|val| ...}
  on("--long [OPTIONAL]"){|val| ...}
//}
            と指定できます。

@param desc オプションの説明を文字列で与えます。サマリに表示されます。

--- on(short, pat = /.*/, desc = "") {|v| ...}        -> self
--- on(long, pat = /.*/, desc = "") {|v| ...}         -> self
--- on(short, long, pat = /.*/, desc = "") {|v| ...}  -> self

オプションを取り扱うためのブロックを自身に登録します。
ブロックはコマンドラインのパース時に、オプションが指定されていれば呼ばれます。

pat にはオプションの引数に許すパターンを表す正規表現で与えます。
コマンドに与えられた引数がパターンにマッチしない場合、
例外 OptionParser::InvalidArgument が parse 実行時に投げられます。

  opts.on("--username VALUE", /[a-zA-Z0-9_]+/){|name| ...}
  # ruby command --username=ruby_user
  # ruby command --username=ruby.user #=> Error

@param short ショートオプションを表す文字列を指定します。

@param long ロングオプションを表す文字列を指定します。

@param pat オプションの引数に許すパターンを表す正規表現で指定します。

@param desc オプションの説明を文字列で与えます。サマリに表示されます。

--- on(short, klass = String, desc = "") {|v| ...}        -> self
--- on(long, klass = String, desc = "") {|v| ...}         -> self
--- on(short, long, klass = String, desc = "") {|v| ...}  -> self
#@todo

オプションを取り扱うためのブロックを自身に登録します。
ブロックはコマンドラインのパース時に、オプションが指定されていれば呼ばれます。

klass にはクラスを与えます。どのようなクラスを受け付けるかは、
以下の「デフォルトで利用可能な引数クラス」を参照して下さい。
OptionParser.accept や OptionParser#accept によって、受け付け
るクラスを増やすことができます。登録されていないクラスが指定された
場合、例外 ArgumentError を投げます。

オプションの引数は accept で登録したブロックで klass のインスタンス
に変換されてから、ブロックに渡されます。

  opts.on("-w", "--width N", Integer){|w|
    p w.class #=> Integer
  }
  # ruby command --width=32

  opts.on("-o", "--overwrite VALUE", TrueClass){|boolean| ...}
  # ruby command --overwrite yes

@param short ショートオプションを表す文字列を指定します。

@param long ロングオプションを表す文字列を指定します。

@param klass オプションの引数のクラスを指定します。

@param desc オプションの説明を文字列で与えます。サマリに表示されます。

@raise ArgumentError 登録されていないクラスが klass に指定された場合に発生します。

==== デフォルトで利用可能な引数クラス

: Object
 any string, and no conversion. this is fall-back.

: String
 any none-empty string, and no conversion.

: Integer
 Ruby/C-like integer, octal for 0-7 sequence, binary for
 0b, hexadecimal for 0x, and decimal for others; with
 optional sign prefix. Converts to Integer.

: Float
 Float number format, and converts to Float.

: Numeric
 Generic numeric format, and converts to Integer for integer
 format, Float for float format.

: OptionParser::DecimalInteger
 Decimal integer format, to be converted to Integer.

: OptionParser::OctalInteger
 Ruby/C like octal/hexadecimal/binary integer format, to be converted
 to Integer.

: OptionParser::DecimalNumeric
 Decimal integer/float number format, to be converted to
 Integer for integer format, Float for float format.

: TrueClass
 Boolean switch, which means whether it is present or not, whether it
 is absent or not with prefix no-, or it takes an argument
 yes/no/true/false/+/-.

: FalseClass
 Similar to TrueClass, but defaulted to false.

: Array
 List of strings separated by ","

--- on(short, *rest) {|v| ...}        -> self
--- on(long, *rest) {|v| ...}         -> self
--- on(short, long, *rest) {|v| ...}  -> self

オプションを取り扱うためのブロックを自身に登録します。
ブロックはコマンドラインのパース時に、オプションが指定されていれば呼ばれます。

コマンドに与えられた引数が配列やハッシュに含まれない場合、
例外 OptionParser::InvalidArgument が parse 実行時に投げられます。

@param short ショートオプションを表す文字列を指定します。

@param long ロングオプションを表す文字列を指定します。

@param rest 可能な引数を列挙した配列やハッシュを与えます。文字列を与えた場合は、
            サマリに表示されるオプションの説明と見なします。

例:
  opts.on("--protocol VALUE", [:http, :ftp, :https]){|w|
    p w
  }
  # ruby command --protocol=http #=> :http

  opts.on("-c", "--charset VALUE", {"jis" => "iso-2022-jp", "sjis" => "shift_jis"}){|w|
    p w
  }
  # ruby command --charset=jis #=> "iso-2022-jp"

--- on_head(*arg, &block)
--- on_tail(*arg, &block)

[[m:OptionParser#on]]と同様、オプションを取り扱うためのブロックを自身に登録します。
on メソッドと違う点は、OptionParser オブジェクトが保持している
リストの最初かあるいは最後にブロックを登録する点です。

--version や --help の説明をサマリの最後に表示したい時に便利です。

@param arg [[m:OptionParser#on]] と同様です。

@param block [[m:OptionParser#on]] と同様です。

例:

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on_tail("--version", "Show version") do
    puts OptionParser::Version.join('.')
    exit
  end

--- order(argv)                     -> [String]
--- order(argv){|s| ...}            -> [String]
--- order(*args)                    -> [String]
--- order(*args){|s| ...}           -> [String]

与えられた argv を順番にパースします。
オプションではないコマンドの引数(下の例で言うと somefile)に出会うと、パースを中断します。
argv からオプションを取り除いたものを返します。

ブロックが与えられている場合は、パースを中断せずに引数をブロックに渡してブロックを評価し、
パースを継続します。argv を返します。

下の例で言うと、コマンドの引数 somefile よりも後ろにオプションを置くことができま
せん。-b もコマンドのオプションではない引数として扱われてしまいます。

@param argv パースしたい引数を文字列の配列で指定します。

@param args パースしたい引数を順に文字列として与えます。

@raise OptionParser::ParseError パースに失敗した場合、例外 OptionParser::ParseError の
                                サブクラスが投げられます。

例:
  $ cat opt.rb
  require 'optparse'
  opt = OptionParser.new

  opt.on('-a [VAL]') {|v| p :a }
  opt.on('-b') {|v| p :b }

  opt.order!(ARGV)
  p ARGV

  $ ruby opt2.rb -a foo somefile -b
  :a
  ["somefile", "-b"]

--- order!(argv = self.default_argv)             -> [String]
--- order!(argv = self.default_argv) {|s| ...}   -> [String]

与えられた argv を順番に破壊的にパースします。
argv からオプションがすべて取り除かれます。
argv を返します。

オプションではないコマンドの引数(下の例で言うと somefile)に出会うと、パースを中断します。
ブロックが与えられている場合は、パースを中断せずに
引数をブロックに渡してブロックを評価し、パースを継続します。argv を返します。

下の例で言うと、コマンドの引数 somefile よりも後ろにオプションを置くことができません。
-b もコマンドのオプションではない引数として扱われてしまいます。

@param argv パースしたい引数を文字列の配列で指定します。

@raise OptionParser::ParseError パースに失敗した場合、例外 OptionParser::ParseError の
                                サブクラスが投げられます。

例:
  $ cat opt.rb
  require 'optparse'
  opt = OptionParser.new

  opt.on('-a [VAL]') {|v| p :a }
  opt.on('-b') {|v| p :b }

  opt.order!(ARGV)
  p ARGV

  $ ruby opt2.rb -a foo somefile -b
  :a
  ["somefile", "-b"]

--- permute(argv)            -> [String]
--- permute(*args)           -> [String]

与えられた argv をパースします。
オプションではないコマンドの引数(下の例で言うと somefile)があってもパースを中断しません。
argv からオプションを取り除いたものを返します。

下の例で言うと、order と違いコマンドの引数 somefile よりも後ろにオプションを置くことが
できます。

@param argv パースしたい引数を文字列の配列で指定します。

@param args パースしたい引数を順に文字列として与えます。

@raise OptionParser::ParseError パースに失敗した場合、例外 OptionParser::ParseError の
                                サブクラスが投げられます。

例:

  $ cat opt.rb
  require 'optparse'
  opt = OptionParser.new

  opt.on('-a [VAL]') {|v| p :a }
  opt.on('-b ') {|v| p :b }

  opt.permute!(ARGV)
  p ARGV

  $ ruby opt2.rb -a foo somefile -b
  :a
  :b
  ["somefile"]

--- permute!(argv = self.default_argv)    -> [String]

与えられた argv を破壊的にパースします。argv からオプションがすべて取り除かれます
オプションではないコマンドの引数(下の例で言うと somefile)があってもパースを中断しません。
argv を返します。

下の例で言うと、order と違いコマンドの引数 somefile よりも後ろにオプションを置くことが
できます。

@param argv パースしたい引数を文字列の配列で指定します。

@raise OptionParser::ParseError パースに失敗した場合、例外 OptionParser::ParseError の
                                サブクラスが投げられます。

例:

  $ cat opt.rb
  require 'optparse'
  opt = OptionParser.new

  opt.on('-a [VAL]') {|v| p :a }
  opt.on('-b ') {|v| p :b }

  opt.permute!(ARGV)
  p ARGV

  $ ruby opt2.rb -a foo somefile -b
  :a
  :b
  ["somefile"]

--- parse(argv)           -> [String]
--- parse(*args)          -> [String]

与えられた argv をパースします。
argv からオプションを取り除いたものを返します。

[[m:OptionParser#permute]] と同様に振舞います。しかし、
環境変数に POSIXLY_CORRECT が設定されている場合は、
[[m:OptionParser#order]] と同様に振舞います。

@param argv パースしたい引数を文字列の配列で指定します。

@param args パースしたい引数を順に文字列として与えます。

@raise OptionParser::ParseError パースに失敗した場合、例外 OptionParser::ParseError の
                                サブクラスが投げられます。

--- parse!(argv = self.default_argv)   -> [String]

与えられた argv をパースします。

[[m:OptionParser#permute!]] と同様に argv を破壊的にパースします。
環境変数に POSIXLY_CORRECT が設定されている場合は、
[[m:OptionParser#order!]] と同様に振舞います。

@param argv パースしたい引数を文字列の配列で指定します。

@param args パースしたい引数を順に文字列として与えます。

@raise OptionParser::ParseError パースに失敗した場合、例外 OptionParser::ParseError の
                                サブクラスが投げられます。

--- load(filename = nil)     -> bool

指定された filename を読み込んで各行をまとめたものに対して [[m:OptionParser#parse]] を行ないます。

パースが成功した場合に true を返します。
ファイルが存在しなかった場合に false を返します。

@param filename 各行をパースしたいファイルの名前を文字列で指定します。
                指定されないか nil である場合、~/.options/ に
                プログラムのサフィックスを付けた '~/.options/コマンド名' というファイルをパースします。
                
--- environment(env)    -> [String]
#@todo

環境変数 env に対して
[[m:Shellwords.#shellwords]] を呼
んで配列にしてから parse を行ないます。

@param env 環境変数名を文字列で与えます。

@raise OptionParser::ParseError パースに失敗した場合、例外 OptionParser::ParseError のサブクラスが投げられます。

#@since 1.8.3
--- default_argv    -> [String]
--- default_argv=(argv)

自身がデフォルトでパースする引数を表すアクセサです。
文字列の配列です。

[[m:OptionParser#parse]] の引数が指定されなかったときに使われます。

@param argv デフォルトでパースしたい文字列の配列を指定します。

#@end

#@since 1.8.5
--- getopts(argv, *opts)   -> Hash
--- getopts(*opts)         -> Hash
#@todo
#@until 1.9.1
[[lib:getopts]] 相当の機能を提供します。
getopts と違って、グローバル変数を定義しません。
#@end
引数をパースした結果を、Hash として返します。

配列 argv を与えた場合、argv をパースします。そうでない場合は、
default_argv をパースします。

 opt = OptionParser.new
 params = opt.getopts(ARGV, "ab:", "foo", "bar:")
 # params["a"] = true   # -a
 # params["b"] = "1"    # -b1
 # params["foo"] = true  # --foo
 # params["bar"] = "x"  # --bar x

@param argv パースしたい配列を指定します。

@param opts 引数を文字列で指定します。[[m:Kernel#getopts]] を参照して下さい。

@raise OptionParser::ParseError パースに失敗した場合、例外 OptionParser::ParseError のサブクラスが投げられます。

#@end
