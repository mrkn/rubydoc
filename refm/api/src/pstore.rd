Rubyのオブジェクトを外部ファイルに格納するためのライブラリです。

= class PStore < Object

Rubyのオブジェクトを外部ファイルに格納するためのクラスです。
内部で [[c:Marshal]] を使っています。

=== 使い方

データベースにアクセスするためには、
transaction のブロック内である必要があります。
インターフェースは [[c:Hash]] に似ています。

  require 'pstore'
  db = PStore.new("/tmp/foo")
  db.transaction do
    p db.roots       # => []
    ary = db["root"] = [1,2,3,4]
    ary[0] = [1,1.5]
  end
  
  db.transaction do
    p db["root"]     # => [[1, 1.5], 2, 3, 4]
  end


== Class Methods

--- new(file) -> PStore

ファイル名 file に対してデータベースを読み書きする。

file のあるディレクトリは書き込み可能である必要がある。
データベースを更新するときにバックアップファイルが作成されるため。

@param file データベースファイル名。

#@since 1.8.2
データベースの更新が成功すると、バックアップファイルは削除される。バックアップファイル名は
ファイル名に ".tmp" および ".new" を付けたもの。
#@else
バックアップファイルは削除されずに残る。バックアップファイル名はファイル名の後に "~" を付けたもの。
#@end

== Instance Methods

#@since 1.8.0
--- transaction(read_only = false) {|pstore| ... } -> ()

トランザクションに入ります。
このブロックの中でのみデータベースの読み書きができます。

読み込み専用のトランザクションが使用可能です。

@param read_only 真を指定すると、読み込み専用のトランザクションになります。

@raise PStore::Error read_only を真にしたときに、データベースを変更しようした場合に発生します。

例:

  require 'pstore'
  db = PStore.new("/tmp/foo")
  db.transaction do
    p db.roots       # => []
    ary = db["root"] = [1,2,3,4]
    ary[0] = [1,1.5]
  end
  
  db.transaction(true) do |pstore|
    pstore["root"] = 'aaa' # => ここで例外発生
  end


#@end

--- [](name) -> object

ルートnameに対応する値を得る。

@param name 探索するルート。

@raise PStore::Error トランザクション外でこのメソッドが呼び出された場合に発生します。

@see [[m:Hash#[] ]]

--- []=(name, value)

ルート name に対応する値 value をセットする。

@param name ルート。

@aram value 格納する値。

@raise PStore::Error トランザクション外でこのメソッドが呼び出された場合に発生します。

@see [[m:Hash#[]=]]

#@since 1.8.0
--- fetch(name, default = PStore::Error) -> object

ルートnameに対応する値を得る。

該当するルートが登録されていない時には、
引数 default が与えられていればその値を返し、
与えられていなければ例外 [[c:PStore::Error]] が発生します。

@param name 探索するルート。

@param default name に対応するルートが登録されていない場合に返す値を指定する。

@raise PStore::Error name に対応するルートが登録されていないかつ、
                     default が与えられていない場合に発生します。
                     また、トランザクション外でこのメソッドが呼び出された場合に発生します。

例:

  require 'pstore'
  db = PStore.new("/tmp/foo")
  db.transaction do
    p db.roots       # => []
    ary = db["root"] = [1,2,3,4]
    ary[0] = [1,1.5]
  end
  
  db.transaction(true) do |pstore|
    pstore.fetch("root")        # => [[1, 1.5], 2, 3, 4]
    pstore.fetch("root", 'aaa') # => [[1, 1.5], 2, 3, 4]
    pstore.fetch("not_root")    # => 例外発生
  end

@see [[m:Hash#fetch]], [[m:PStore#[] ]]
#@end

--- delete(name) -> object
#@todo

ルートnameに対応する値を削除します。

@param name 探索するルート。

@return 削除した値を返します。

@raise PStore::Error トランザクション外でこのメソッドが呼び出された場合に発生します。

例:

  require 'pstore'
  db = PStore.new("/tmp/foo")
  db.transaction do
    p db.roots       # => []
    ary = db["root"] = [1,2,3,4]
    ary[0] = [1,1.5]
  end
  
  db.transaction do |pstore|
    pstore.delete("root")       # => [[1, 1.5], 2, 3, 4]
    pstore.delete("root")       # => nil
  end

@see [[m:Hash#delete]]

--- roots -> Array

ルートの集合を配列で返します。

@raise PStore::Error トランザクション外でこのメソッドが呼び出された場合に発生します。

@see [[m:Hash#keys]]

--- root?(name) -> bool

ルート name がデータベースに格納されている場合に真を返します。

@param name 探索するルート。

@raise PStore::Error トランザクション外でこのメソッドが呼び出された場合に発生します。

@see [[m:Hash#key?]]

--- path -> String

データベースのファイル名を得ます。

--- commit -> ()

データベースの読み書きを終了します。

transaction ブロックから抜け、データベースの変更が反映されます。

@raise PStore::Error トランザクション外でこのメソッドが呼び出された場合に発生します。

例:

  require 'pstore'
  db = PStore.new("/tmp/foo")
  db.transaction do
    p db.roots       # => []
    ary = db["root"] = [1,2,3,4]
    db.commit
    ary[0] = [1,1.5] # => ここは実行されない。
  end
  
  db.transaction do |pstore|
    pstore["root"]       # => [[1, 2, 3, 4]
  end

--- abort -> ()

データベースの読み書きを終了する。

transaction ブロックから抜けますが、データベースの変更は反映されません。

@raise PStore::Error トランザクション外でこのメソッドが呼び出された場合に発生します。

例:

  require 'pstore'
  db = PStore.new("/tmp/foo")
  db.transaction do
    p db.roots       # => []
    ary = db["root"] = [1,2,3,4]
    db.abort
    ary[0] = [1,1.5] # => ここは実行されない。
  end
  
  db.transaction do |pstore|
    pstore["root"]       # => nil
  end

== Private Instance Methods

--- in_transaction -> ()

トランザクションの中でなければ例外を発生させます。

= class PStore::Error < StandardError

[[c:PStore]] の中で発生する例外です。
