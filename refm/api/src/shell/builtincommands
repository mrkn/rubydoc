#@# -*- mode: rd; -*-
#@# Shell::CommandProcessor.install_builtin_commands で定義されるメソッド
#@# Shell, Shell::Filter, Shell::CommandProcessor に定義される

#@# from File
--- atime(filename) -> Time
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:File.atime]]

--- basename(filename, suffix = "")     -> String
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列を指定します。

@param suffix サフィックスを文字列で与えます。'.*' という文字列を与えた場合、'*' はワイルドカードとして働き
              '.' を含まない任意の文字列にマッチします。

@see [[m:File.basename]]


--- chmod(mode, *filename)    -> Integer

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列を指定します。

@param mode [[man:chmod(2)]] と同様に整数で指定します。

@see [[m:File.chmod]]

--- chown(owner, group, *filename)    -> Integer
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param owner [[man:chown(2)]] と同様に数値で指定します。nil または -1 を指定することで、オーナーを現在の>ままにすることができます。

@param group [[man:chown(2)]] と同様に数値で指定します。nil または -1 を指定することで、グループを現在の>ままにすることができます。

@param filename ファイル名を表す文字列を指定します。

@see [[m:File.chown]]

--- ctime(filename)    -> Time
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:File.ctime]]

--- delete(*filename)    -> Integer
--- rm(*filename)        -> Integer
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列を指定します。

@see [[m:File.delete]]

--- dirname(filename)    -> String

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列を指定します。

@see [[m:File.dirname]]

--- ftype(filename)    -> String

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列を指定します。

@see [[m:File.ftype]]

--- join(*item)    -> String
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param item 連結したいディレクトリ名やファイル名を文字列で与えます。

@see [[m:File.join]]

--- link(old, new)    -> 0

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param old ファイル名を表す文字列を指定します。

@param new ファイル名を表す文字列を指定します。

@see [[m:File.link]]


--- lstat(filename)   -> File::Stat

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列を指定します。

@see [[m:File.lstat]]

--- mtime(filename)    -> Time

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:File.mtime]]

--- readlink(path)    -> String
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param path シンボリックリンクを表す文字列を指定します。

@see [[m:File.readlink]]

--- rename(from, to)    -> 0
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param from ファイルの名前を文字列で与えます。

@param to 新しいファイル名を文字列で与えます。

@see [[m:File.rename]]

--- split(pathname)    -> [String]

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param pathname パス名を表す文字列を指定します。

@see [[m:File.split]]

--- stat(filename)    -> File::Stat

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列を指定します。

@see [[m:File.stat]]


--- symlink(old, new)    -> 0
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param old ファイル名を表す文字列を指定します。

@param new シンボリックリンクを表す文字列を指定します。

@see [[m:File.symlink]]


--- truncate(path, length)    -> 0

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param path パスを表す文字列を指定します。

@param length 変更したいサイズを整数で与えます。

@see [[m:File.truncate]]

--- utime(atime, mtime, *filename)    -> Integer
[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filename ファイル名を表す文字列を指定します。

@param atime 最終アクセス時刻を [[c:Time]] か、起算時からの経過秒数を数値で指定します。

@param utime 更新時刻を [[c:Time]] か、起算時からの経過秒数を数値で指定します。

@see [[m:File.utime]]

#@# from FileTest

--- blockdev?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#blockdev?]]

--- chardev?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#chardev?]]

--- directory?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#directory?]]

--- executable?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#executable?]]

--- executable_real?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#executable_real?]]

--- exist?(file) -> bool
--- exists?(file) -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#exist?]] [[m:FileTest.#exists?]]

--- file?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#file?]]

--- grpowned?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#grpowned?]]

--- owned?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#owned?]]

--- pipe?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#pipe?]]

--- readable?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#readable?]]

--- readable_real?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#readable_real?]]

--- setgid?(file) -> bool

[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#setgid?]]

--- setuid?(file)    -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#setuid?]]

--- size(file) -> Integer
--- size?(file) -> Integer | nil

[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#size]] [[m:FileTest.#size?]]

--- socket?(file) -> bool

[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#socket?]]


--- sticky?(file) -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#sticky?]]

--- symlink?(file) -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#symlink?]]

--- writable?(file) -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#writable?]]

--- writable_real?(file) -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#writable_real?]]

--- zero?(file) -> bool
[[c:FileTest]] モジュールにある同名のクラスメソッドと同じです.

@param file ファイル名を表す文字列を指定します。

@see [[m:FileTest.#zero?]]

#@until 1.9.1
--- syscopy(from, to) -> bool

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param from ファイルの名前を文字列で与えます。

@param to 新しいファイル名を文字列で与えます。

@see [[m:File.syscopy]]

--- copy(from, to) -> bool
--- cp(from, to) -> bool

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param from ファイルの名前を文字列で与えます。

@param to 新しいファイル名を文字列で与えます。

@see [[m:File.copy]]

--- move(from, to) -> bool
--- mv(from, to) -> bool

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param from ファイルの名前を文字列で与えます。

@param to 新しいファイル名を文字列で与えます。

@see [[m:File.move]]

--- compare(file1, file2) -> bool
--- cmp(file1, file2) -> bool

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param file1 ファイルの名前を文字列で与えます。

@param file2 新しいファイル名を文字列で与えます。

@see [[m:File.compare]]

--- safe_unlink(*filenames) -> Array
--- rm_f(*filenames) -> Array

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param filenames 削除するファイルを指定します。

@see [[m:File.safe_unlink]]

--- makedirs(*dirs) -> Array
--- mkpath(*dirs) -> Array

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param dirs 作成するディレクトリを指定します。

@see [[m:File.makedirs]]

--- install(from, to, mode = nil, verbose = false) -> () 

[[c:File]] クラスにある同名のクラスメソッドと同じです.

@param from コピー元のファイル。

@param to コピー先のファイル。

@param mode ファイルのアクセスモード。8進数で指定します。

@param verbose 真を指定すると詳細を表示します。

@see [[m:File.install]]

#@end

#@# Shell::CommandProcessor に直接定義されているメソッド

--- foreach(path = nil, &block) -> ()

pathがファイルなら, File#foreach
pathがディレクトリなら, Dir#foreach
の動作をします。

@param path ファイルもしくはディレクトリのパスを文字列で指定します。

使用例
  require 'shell'
  Shell.verbose = false
  sh = Shell.new
  sh.foreach("/tmp"){|f|
    puts f
  }

--- open(path, mode) -> File | Dir

path がファイルなら、 [[m:File.open]] path がディレクトリなら、 [[m:Dir.open]] の動作をします。

@param path 開きたいパスを指定します。

@param mode アクセスモードを指定します。path がディレクトリの場合は無視されます。

@see [[m:File.open]], [[m:Dir.open]]

--- unlink(path) -> self

path がファイルなら、 [[m:File.unlink path]] がディレクトリなら、 [[m:Dir.unlink]] の動作をします。

@param path 削除したいパスを指定します。

@see [[m:File.unlink]], [[m:Dir.unlink]]

--- test(command, file1, file2 = nil) -> bool | Time | Integer | nil
--- [](command, file1, file2 = nil) -> bool | Time | Integer | nil

[[Kernel.#test]] や [[c:FileTest]] のメソッドに処理を委譲します。

@param command 数値、またはサイズが 1 の文字列の場合は [[m:Kernel#test]] に処理委譲します。
               2 文字以上の文字列の場合は [[c:FileTest]] のメソッドとして実行します。

@param file1 文字列でファイルへのパスを指定します。

@param file2 文字列でファイルへのパスを指定します。

  require 'shell'
  Shell.verbose = false
  sh = Shell.new
  begin
    sh.mkdir("foo")
  rescue
  end
  p sh[?e, "foo"]         # => true
  p sh[:e, "foo"]         # => true
  p sh["e", "foo"]        # => true
  p sh[:exists?, "foo"]   # => true
  p sh["exists?", "foo"]  # => true

@see [[m:Kernel.#test]], [[c:FileTest]]


--- mkdir(*path) -> Array

Dir.mkdirと同じです。 (複数可)

@param path 作成するディレクトリ名を文字列で指定します。

@return 作成するディレクトリの一覧の配列を返します。

使用例
  require 'shell'
  Shell.verbose = false
  sh = Shell.new
  begin
    p sh.mkdir("foo") #=> ["foo"]
  rescue => err
    puts err
  end

--- rmdir(*path) -> ()

Dir.rmdirと同じです。 (複数可)

@param path 削除するディレクトリ名を文字列で指定します。

--- system(command, *opts) -> Shell::SystemCommand

command を実行する.

@param command 実行するコマンドのパスを文字列で指定します。

@param opts command のオプションを文字列で指定します。複数可。

使用例:

  require 'shell'
  Shell.verbose = false
  sh = Shell.new

  print sh.system("ls", "-l")
  Shell.def_system_command("head")
  sh.system("ls", "-l") | sh.head("-n 3") > STDOUT


--- rehash -> {}

登録されているシステムコマンドの情報をクリアします。
通常、使うことはありません。

--- check_point
--- finish_all_jobs
#@todo

--- transact { ... } -> object

ブロック中で shell を self として実行します。

例:

  require 'shell'
  Shell.def_system_command("head")
  sh = Shell.new
  sh.transact{
    system("ls", "-l") | head > STDOUT
    # transact の中では、
    # sh.system("ls", "-l") | sh.head > STDOUT と同じとなる。
  }

--- out(dev = STDOUT, &block) -> ()

[[m:Shell#transact]] を呼び出しその結果を dev に出力します。

@param dev  出力先をIO オブジェクトなどで指定します。

@param block transact 内部で実行するシェルを指定します。


使用例:
  require 'shell'
  Shell.def_system_command("head")
  sh = Shell.new
  File.open("out.txt", "w"){ |fp|
    sh.out(fp) {
      system("ls", "-l") | head("-n 3")
    }
  }


--- echo(*strings) -> Shell::Filter
実行すると, それらを内容とする Filter オブジェクトを返します.

@param strings シェルコマンド echo に与える引数を文字列で指定します。

動作例
  require 'shell'
  Shell.def_system_command("head")
  sh = Shell.new
  sh.transact {
    glob("*.txt").to_a.each { |file|
      file.chomp!
      cat(file).each { |l|
        echo(l) | tee(file + ".tee") >> "all.tee"
      }
    }
  }


--- cat(*files) -> Shell::Filter
実行すると, それらを内容とする Filter オブジェクトを返します.

@param files シェルコマンド cat に与えるファイル名を文字列で指定します。

動作例
  require 'shell'
  Shell.def_system_command("head")
  sh = Shell.new
  sh.transact {
    glob("*.txt").to_a.each { |file|
      file.chomp!
      cat(file).each { |l|
        echo(l) | tee(file + ".tee") >> "all.tee"
      }
    }
  }


--- glob(patten) -> Shell::Filter
実行すると, それらを内容とする Filter オブジェクトを返します.

@param patten シェルコマンド glob に与えるパターンを指定します。
              パターンの書式については、[[m:Dir.[] ]]を参照してください。

動作例
  require 'shell'
  Shell.def_system_command("head")
  sh = Shell.new
  sh.transact {
    glob("*.txt").to_a.each { |file|
      file.chomp!
      cat(file).each { |l|
        echo(l) | tee(file + ".tee") >> "all.tee"
      }
    }
  }

@see [[m:Dir.[] ]]

--- append(to, filter) -> Shell::AppendFile | Shell::AppendIO
#@todo

@param to 文字列か [[c:IO]] を指定します。

@param filter [[c:Shell::Filter]] のインスタンスをしています。

--- tee(file) -> Shell::Filter

実行すると, それらを内容とする Filter オブジェクトを返します.

@param file シェルコマンドtee に与えるファイル名を文字列で指定します。

動作例
  require 'shell'
  Shell.def_system_command("head")
  sh = Shell.new
  sh.transact {
    glob("*.txt").to_a.each { |file|
      file.chomp!
      cat(file).each { |l|
        echo(l) | tee(file + ".tee") >> "all.tee"
      }
    }
  }

--- concat(*jobs) -> Shell::Concat
#@todo

--- notify(*opts){ ... } -> ()
#@todo

--- find_system_command(command)
#@todo

#@since 1.8.5
--- identical?
#@todo

#@end

#@since 1.9.1

--- world_readable?
#@todo

--- world_writable?
#@todo

#@end
