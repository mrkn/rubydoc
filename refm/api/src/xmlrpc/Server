= class XMLRPC::Server < XMLRPC::WEBrickServlet

Implements a standalone XML-RPC server. The method serve) is left if a SIGHUP is sent to the
program.

    require "xmlrpc/server"

    s = XMLRPC::Server.new(8080)

    s.add_handler("michael.add") do |a,b|
      a + b
    end

    s.add_handler("michael.div") do |a,b|
      if b == 0
        raise XMLRPC::FaultException.new(1, "division by zero")
      else
        a / b
      end
    end

    s.set_default_handler do |name, *args|
      raise XMLRPC::FaultException.new(-99, "Method #{name} missing" +
                                       " or wrong number of parameters!")
    end

    s.serve

== Class Methods

--- new( port=8080, host="127.0.0.1", maxConnections=4, stdlog=$stdout, audit=true, debug=true, *a )
Creates a new XMLRPC::Server instance, which is a XML-RPC server listening on
port port and accepts requests for the host host, which is by default only the localhost.
The server is not started, to start it you have to call [[m:XMLRPC::Server#serve]].

Parameters audit and debug are obsolete!

All additionally given parameters in *a are by-passed to [[m:XMLRPC::BasicServer.new]].

== Instance Methods
--- serve
Call this after you have added all you handlers to the server.
This method starts the server to listen for XML-RPC requests and answer them.

--- shutdown
Stops and shuts the server down.
