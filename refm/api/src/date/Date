= class Date < Object

include Comparable

日付を扱うクラスです。この文書のオリジナル (の html 版) は、
[[url:http://www.funaba.org/date2/manual.html]],
[[url:http://www.funaba.org/en/date2/manual.html]]
です。

[[c:DateTime]] は日付だけでなく時間も扱える Date のサブクラスです。

=== 用語の定義

いくつか用語の定義は、ISO 8601、および JIS X 0301 に基づきます。

==== 暦日付

暦日付は、暦年、暦月、および暦月の中の序数によって
指定される特定の日の日付です。

つまり、ごく当たり前の年月日による日付です。

==== 年間通算日 (年日付)

年間通算日 (年日付) は、暦年、および暦年の中の序数によって指定される
特定の日の日付です。

==== 暦週日付

暦週日付は、暦週と暦年中の序数による日付です。

暦週は、暦年中の序数によって指定される特定の7日の期間であり、月曜から
始まります。その年の第1暦週は、最初の木曜日を含む週とします。これは、1
月4日を含む週と同じです。

==== ユリウス日

ユリウス日は紀元前4713年1月1日 (ユリウス暦) 正午 (グリニッジ平均時) を
暦元とした通日 (経過日数) です。

この文書で、天文学的なユリウス日とは、本来のユリウス日と同じものです。
また、年代学的なユリウス日とは、地方時における零時を一日の始まりとする
流儀です。

この文書で、単に「ユリウス日」といった場合、それは本来のユリウス日でな
く、「年代学的なユリウス日」を意味しています。

==== 修正ユリウス日

修正ユリウス日は西暦1858年11月17日 (グレゴリオ暦) 零時 (協定世界時) を
暦元とした通日 (経過日数) です。

この文書で、天文学的な修正ユリウス日とは、本来の修正ユリウス日と同じも
のです。また、年代学的な修正ユリウス日とは、地方時における零時を一日の
始まりとする流儀です。

この文書で、単に「修正ユリウス日」といった場合、それは本来の修正ユリウ
ス日でなく、「年代学的な修正ユリウス日」を意味しています。


== Constants

--- MONTHNAMES
月の名称(January, February ... )

MONTHNAMES[0] == nil で MONTHNAMES[1] == "January" です。

--- DAYNAMES
曜日の名称(Sunday, Monday ... )

DAYNAMES[0] == "Sunday" です。

--- ABBR_MONTHNAMES
月の省略名(Jan, Feb ... )

ABBR_MONTHNAMES[0] == nil で ABBR_MONTHNAMES[1] == "Jan" です。

--- ABBR_DAYNAMES
曜日の省略名(Sun, Mon ... )

ABBR_DAYNAMES[0] == "Sun" です。

--- ENGLAND

--- GREGORIAN

--- ITALY

--- JULIAN

== Class Methods

#@since 1.8.0
#@#? --- ajd_to_amjd(ajd)

#@#? --- ajd_to_jd(ajd[, offset=0])

#@#? --- amjd_to_ajd(amjd)
#@end

#@since 1.8.0
--- civil([year[, mon[, mday[, start]]]])
#@else
--- new3([year[, mon[, mday[, start]]]])
#@end
--- new([year[, mon[, mday[, start]]]])
暦日付に相当する日付オブジェクトを生成します。

このクラスでは、紀元前の年を天文学の流儀で勘定します。
1年の前は零年、零年の前は-1年、のようにします。
月、および月の日は負、
または正の数でなければなりません (負のときは最後からの序数)。
零であってはなりません。

最後の引数は、グレゴリオ暦をつかい始めた日をあらわすユリウス日です。
#@if (version < "1.8.5")
グレゴリオ暦の指定として真、ユリウス暦の指定として偽を与えることもできます。
#@end
省略した場合は、[[m:Date::ITALY]] (1582年10月15日) になります。

[[m:Date.jd]] も参照してください。

#@#? --- civil_to_jd(year, mon, mday[, start])

#@since 1.8.0
--- commercial([cwyear[, cweek[, cwday[, start]]]])
#@else
--- neww([cwyear[, cweek[, cwday[, start]]]])
#@end
暦週日付に相当する日付オブジェクトを生成します。

週、および週の日 (曜日) は負、
または正の数でなければなりません(負のときは最後からの序数)。
零であってはなりません。

このメソッドに改暦前の日付を与えることはできません。

[[m:Date.jd]]、および [[m:Date.new]] も参照してください。

#@#? --- commercial_to_jd(cwyear, cweek, cwday[, start])

#@since 1.8.0
#@#? --- day_fraction_to_time(fr)
#@end

#@since 1.8.5
--- gregorian? (jd, start)
#@else
--- ns? (jd, start)
#@end

--- gregorian_leap? (year)
--- leap? (year)

#@since 1.8.5
--- jd([jd[, start]])
#@else
--- new1([jd[, start]])
#@end
ユリウス日に相当する日付オブジェクトを生成します。

このクラスのいくつかの重要なメソッドで、
負のユリウス日は保証されません。

[[m:Date.new]] も参照してください。

#@since 1.8.0
#@#? --- jd_to_ajd(jd, fraction[, offset])
#@end

#@#? --- jd_to_civil(jd[, start])

#@#? --- jd_to_commercial(jd[, start])

#@#? --- jd_to_ld(jd)

#@#? --- jd_to_mjd(jd)

#@#? --- jd_to_ordinal(jd[, start])

#@#? --- jd_to_wday(jd)

#@since 1.8.5
#@#? --- jd_to_weeknum(jd[, k[, start]])
#@end

#@since 1.8.5
--- julian? (jd, start)
#@else
--- os? (jd, start)
#@end

--- julian_leap? (year)

#@#? --- ld_to_jd(ld)

#@#? --- mjd_to_jd(mjd)

#@#? --- new0([ajd[, offset[, start]]])

#@since 1.8.0
--- ordinal([year[, yday[, start]]])
#@else
--- new2([year[, yday[, start]]])
#@end
年間通算日 (年日付) に相当する日付オブジェクトを生成します。

月の日は負、
または正の数でなければなりません (負のときは最後からの序数)。
零であってはなりません。

[[m:Date.jd]]、および [[m:Date.new]] も参照してください。

#@#? --- ordinal_to_jd(year, yday[, start])

#@since 1.8.0
--- _parse(str[, complete])

--- parse(str[, complete[, start]])
与えられた日付表現を解析し、
その情報に基づいて日付オブジェクトを生成します。

省略できる最後の引数が真で、年が0から99の範囲であれば、
年の下2桁表現であるとみなしこれを補います。
なお、省略した場合は、偽とみなします。

[[m:Date._parse]] も利用できます。
このメソッドは parse と似ていますが、日付オブジェクトを生成せずに、
見いだした要素をハッシュで返します。

--- _strptime(str[, format])

--- strptime(str[, format[, start]])
与えられた雛型で日付表現を解析し、
その情報に基づいて日付オブジェクトを生成します。

[[m:Date._strptime]] も利用できます。
このメソッドは strptime と似ていますが、日付オブジェクト生成せずに、
見いだした要素をハッシュで返します。

[[man:strptime(3)]]、および [[m:Date#strftime]] も参照してください。
#@end

#@since 1.8.0
#@#? --- time_to_day_fraction(hour, minute, second)
#@end

--- today([start])
現在の日付に相当する日付オブジェクトを生成します。

#@since 1.8.0
--- valid_civil? (year, mon, mday[, start])
--- valid_date? (year, mon, mday[, start])
#@else
--- exist? (year, mon, mday[, start])
--- exist3? (year, mon, mday[, start])
#@end
正しい暦日付であれば、相当するユリウス日を返します。
そうでないなら、偽を返します。

[[m:Date.jd]]、および [[m:Date.civil]] も参照してください。

#@since 1.8.0
--- valid_commercial? (cwyear, cweek, cwday[, start])
#@else
--- existw? (cwyear, cweek, cwday[, start])
#@end
正しい暦週日付であれば、相当するユリウス日を返します。
そうでないなら、偽を返します。

[[m:Date.jd]]、および [[m:Date.commercial]] も参照してください。

#@since 1.8.0
--- valid_jd? (jd[, start])
#@else
--- exist1? (jd[, start])
#@end
ひとつ目の引数をそのまま返します。

対称性のため用意されていますが、実際的に意味はありません。

[[m:Date.jd]] も参照してください。

#@since 1.8.0
--- valid_ordinal? (year, yday[, start])
#@else
--- exist2? (year, yday[, start])
#@end
正しい年間通算日 (年日付) であれば、相当するユリウス日を返します。
そうでないなら、偽を返します。

[[m:Date.jd]]、および [[m:Date.ordinal]] も参照してください。

#@since 1.8.5
#@#? --- weeknum_to_jd(year, week, day[, k[, start]])
#@end

#@since 1.8.0
#@#? --- zone_to_diff(zone)
#@end

== Instance Methods

--- +(n)
self から n 日後の日付オブジェクトを返します。
n は数値でなければなりません。

--- -(x)
x が日付オブジェクトなら、ふたつの差を返します。
あるいは
x が数値ならば、self より x 日前の日付を返します。

--- <<(n)
self より n ヶ月前の日付オブジェクトを返します。
n は数値でなければなりません。

--- <=>(other)
ふたつを比較し、-1、零、あるいは 1 を返します。
other は日付オブジェクトか、
天文学的なユリウス日をあらわす数値でなければなりません。

--- ===(other)
同じ日なら真を返します。

--- >>(n)
self から n ヶ月後の日付オブジェクトを返します。
n は数値でなければなりません。

#@since 1.8.0
--- ajd

--- amjd
#@end

--- asctime
--- ctime
[[man:asctime(3)]] 書式の文字列を返します (ただし、末尾の "\n\0" は除く)。

--- cwday
暦週の日 (曜日) を返します (1-7、月曜は1)。

--- cweek
暦週を返します (1-53)。

--- cwyear
暦週における年を返します。

#@#? --- day_fraction

--- downto(min){|date| ...}
このメソッドは、step(min, -1){|date| ...} と等価です。

--- england
このメソッドは、new_start(Date::ENGLAND) と等価です。

#@since 1.9.0
--- friday?
#@end

--- gregorian
このメソッドは、new_start(Date::GREGORIAN) と等価です。

#@since 1.8.5
--- gregorian?
#@else
--- ns?
#@end

--- italy
このメソッドは、new_start(Date::ITALY) と等価です。

--- jd
ユリウス日を返します。
時刻を含みません。

[[m:Date#ajd]] も利用できます。
このメソッドは jd と似ていますが、天文学的なユリウス日を返します。
時刻を含みます。

--- julian
このメソッドは、new_start(Date::JULIAN) と等価です。

#@since 1.8.5
--- julian?
#@else
--- os?
#@end

--- ld

--- leap?
閏年なら真を返します。

--- mday
--- day
月の日を返します (1-31)。

--- mjd
修正ユリウス日を返します。
時刻の情報を含みません。

[[m:Date#amjd]] も利用できます。
このメソッドは mjd と似ていますが、天文学的な修正ユリウス日を返します。
時刻を含みます。

--- mon
--- month
月を返します (1-12)。

#@since 1.9.0
--- monday?
#@end

#@since 1.8.0
--- new_start([start])
#@else
--- newsg([start])
#@end
self を複製して、その改暦日を設定しなおします。
引数を省略した場合は、[[m:Date::ITALY]] (1582年10月15日) になります。

[[m:Date.new]] も参照してください。

#@since 1.9.0
--- next_day([n])

--- next_month([n])

--- next_year([n])

--- prev_day([n])

--- prev_month([n])

--- prev_year([n])
#@end

#@since 1.9.0
--- saturday?
#@end

#@since 1.8.0
--- start
#@else
--- sg
#@end
改暦日をあらわすユリウス日を返します。

[[m:Date.new]] も参照してください。

--- step(limit, step){|date| ...}
ブロックの評価を繰り返します。ブロックは日付オブジェクトをとります。
limit は日付オブジェクトでなければなりません、
また step は非零でなければなりません。

#@since 1.9.0
--- sunday?
#@end

--- strftime([format])
与えられた雛型で日付を書式づけます。
つぎの変換仕様をあつかいます:

%A, %a, %B, %b, %C, %c, %D, %d, %e, %F, %G, %g, %H, %h, %I, %j, %k, %l,
%M, %m, %n, %P, %p, %R, %r, %S, %s, %T, %t, %U, %u, %V, %v, %W, %w, %X,
%x, %Y, %y, %Z, %z, %%, %+

#@since 1.8.5
1.8.5 以降では、%L, %N, %Q もつかえます。
#@# %:{1,3}z も?
また、GNU 版にあるような幅指定などもできます。
##else
#@# %[123]?
#@end

[[man:strftime(3)]]、および [[m:Date.strptime]] も参照してください。

--- succ
--- next
翌日の日付オブジェクトを返します。

#@since 1.9.0
--- thursday?

--- to_date

--- to_datetime
#@end

--- to_s
ISO 8601 書式の文字列を返します (拡大表記はつかいません)。

#@since 1.9.0
--- to_time

--- tuesday?
#@end

--- upto(max){|date| ...}
このメソッドは、step(max, 1){|date| ...} と等価です。

--- wday
曜日を返します (0-6、日曜日は零)。

#@since 1.9.0
--- wednesday?
#@end

--- yday
年の日を返します (1-366)。

--- year
年を返します。

#@since 1.9.0
= reopen Time

== Instance Methods

--- to_date

--- to_datetime

--- to_time
#@end
