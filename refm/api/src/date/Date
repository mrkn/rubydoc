= class Date < Object

include Comparable

日付だけでなく時刻も扱える Date のサブクラス [[c:DateTime]] も利用できます。

=== 簡単なつかいかた

  require 'date'

  a = Date.new(1993, 2, 24)
  b = Date.parse('1993-02-24')
  b += 10

  b - a            #=> 10
  b.year           #=> 1993
  b.strftime('%a') #=> "Sat"

  yesterday = Date.today - 1

=== 用語の定義

いくつか用語の定義は、ISO 8601、および JIS X 0301 に基づきます。

==== 暦日付

暦日付は、暦年、暦月、および暦月の中の序数によって
指定される特定の日の日付です。

つまり、ごく当たり前の年月日による日付です。

==== 年間通算日 (年日付)

年間通算日 (年日付) は、暦年、および暦年の中の序数によって指定される
特定の日の日付です。

==== 暦週日付

暦週日付は、暦週と暦年中の序数による日付です。

暦週は、暦年中の序数によって指定される特定の7日の期間であり、月曜から
始まります。その年の第1暦週は、最初の木曜日を含む週とします。これは、
1月4日を含む週と同じです。

==== ユリウス日

ユリウス日は紀元前4713年1月1日 (ユリウス暦) 正午 (グリニッジ平均時) を
暦元とした通日 (経過日数) です。

この文書で、天文学的なユリウス日とは、本来のユリウス日と同じものです。
また、年代学的なユリウス日とは、地方時における零時を一日の始まりとする
流儀です。

この文書で、単に「ユリウス日」といった場合、それは本来のユリウス日でな
く、「年代学的なユリウス日」を意味しています。

==== 修正ユリウス日

修正ユリウス日は西暦1858年11月17日 (グレゴリオ暦) 零時 (協定世界時) を
暦元とした通日 (経過日数) です。

この文書で、天文学的な修正ユリウス日とは、本来の修正ユリウス日と同じも
のです。また、年代学的な修正ユリウス日とは、地方時における零時を一日の
始まりとする流儀です。

この文書で、単に「修正ユリウス日」といった場合、それは本来の修正ユリウ
ス日でなく、「年代学的な修正ユリウス日」を意味しています。

== Constants

--- MONTHNAMES
月の名称(January, February ... )

MONTHNAMES[0] == nil で MONTHNAMES[1] == "January" です。

--- DAYNAMES
曜日の名称(Sunday, Monday ... )

DAYNAMES[0] == "Sunday" です。

--- ABBR_MONTHNAMES
月の省略名(Jan, Feb ... )

ABBR_MONTHNAMES[0] == nil で ABBR_MONTHNAMES[1] == "Jan" です。

--- ABBR_DAYNAMES
曜日の省略名(Sun, Mon ... )

ABBR_DAYNAMES[0] == "Sun" です。

--- ENGLAND
英国がグレゴリオ暦をつかい始めた日 (1752年9月14日) をあらわすユリウス日です。
この "ENGLAND" の名前は、UNIX の [[man:cal(1)]] の記述に由来します。

ちなみに、本実装で英国の改暦日を尊重する姿勢がみられるのは前実装からの影響です。
前実装が英国の改暦日を尊重していたのは、おそらく [[man:cal(1)]] の影響です。
もっとも本実装で一番に尊重されているのは、伊国の改暦日であり、多くの場合、
改暦日の既定値は [[m:Date::ITALY]] です。

--- GREGORIAN
常にグレゴリオ暦であることを示します。
改暦日は無限の過去にあると考えられます。

--- ITALY
伊国がグレゴリオ暦をつかい始めた日 (1582年10月15日) をあらわすユリウス日です。

--- JULIAN
常にユリウス暦であることを示します。
改暦日は無限の未来にあると考えられます。

== Class Methods

#@since 1.8.0
#@#? --- ajd_to_amjd(ajd)

#@#? --- ajd_to_jd(ajd, offset=0)

#@#? --- amjd_to_ajd(amjd)
#@end

#@since 1.8.0
--- civil(year = -4712, mon = 1, mday = 1, start = Date::ITALY)
#@else
--- new3(year = -4712, mon = 1, mday = 1, start = Date::ITALY)
#@end
--- new(year = -4712, mon = 1, mday = 1, start = Date::ITALY)
暦日付に相当する日付オブジェクトを生成します。

このクラスでは、紀元前の年を天文学の流儀で勘定します。
1年の前は零年、零年の前は-1年、のようにします。
月、および月の日は負、
または正の数でなければなりません (負のときは最後からの序数)。
零であってはなりません。

最後の引数は、グレゴリオ暦をつかい始めた日をあらわすユリウス日です。
#@if (version < "1.8.6")
グレゴリオ暦の指定として真、ユリウス暦の指定として偽を与えることもできます。
#@end
省略した場合は、[[m:Date::ITALY]] (1582年10月15日) になります。

[[m:Date.jd]] も参照してください。

#@#? --- civil_to_jd(year, mon, mday, start = Date::GREGORIAN)

#@since 1.9.0
--- commercial(cwyear = -4712, cweek = 1, cwday = 1, start = Date::ITALY)
#@since 1.8.0
--- commercial(cwyear = 1582, cweek = 41, cwday = 5, start = Date::ITALY)
#@else
--- neww(cwyear = 1582, cweek = 41, cwday = 5, start = Date::ITALY)
#@end
暦週日付に相当する日付オブジェクトを生成します。

週、および週の日 (曜日) は負、
または正の数でなければなりません(負のときは最後からの序数)。
零であってはなりません。

このメソッドに改暦前の日付を与えることはできません。

[[m:Date.jd]]、および [[m:Date.new]] も参照してください。

#@#? --- commercial_to_jd(cwyear, cweek, cwday, start = Date::GREGORIAN)

#@since 1.8.0
#@#? --- day_fraction_to_time(fr)
#@end

#@since 1.8.6
--- gregorian? (jd, start)
#@else
--- ns? (jd, start)
#@end

--- gregorian_leap? (year)
--- leap? (year)
グレゴリオ暦の閏年なら真を返します。

#@since 1.8.6
--- jd(jd = 0, start = Date::ITALY)
#@else
--- new1(jd = 0, start = Date::ITALY)
#@end
ユリウス日に相当する日付オブジェクトを生成します。

このクラスのいくつかの重要なメソッドで、
負のユリウス日は保証されません。

[[m:Date.new]] も参照してください。

#@since 1.8.0
#@#? --- jd_to_ajd(jd, fraction, offset = 0)
#@end

#@#? --- jd_to_civil(jd, start = Date::GREGORIAN)

#@#? --- jd_to_commercial(jd, start = Date::GREGORIAN)

#@#? --- jd_to_ld(jd)

#@#? --- jd_to_mjd(jd)

#@#? --- jd_to_ordinal(jd, start = Date::GREGORIAN)

#@#? --- jd_to_wday(jd)

#@since 1.8.6
#@#? --- jd_to_weeknum(jd, f = 0, start = Date::GREGORIAN)
#@end

#@since 1.8.6
#@#? --- julian? (jd, start)
#@else
#@#? --- os? (jd, start)
#@end

--- julian_leap? (year)
ユリウス暦の閏年なら真を返します。

西暦4年は真になりますが、
これは歴史的には正しくありません。

#@#? --- ld_to_jd(ld)

#@#? --- mjd_to_jd(mjd)

#@since 1.8.6
#@#? --- new!(ajd = 0, offset = 0, start = Date::ITALY)
#@else
#@#? --- new0(ajd = 0, offset = 0, start = Date::ITALY)
#@end

#@since 1.8.0
--- ordinal(year = -4712, yday = 1, start = Date::ITALY)
#@else
--- new2(year = -4712, yday = 1, start = Date::ITALY)
#@end
年間通算日 (年日付) に相当する日付オブジェクトを生成します。

月の日は負、
または正の数でなければなりません (負のときは最後からの序数)。
零であってはなりません。

[[m:Date.jd]]、および [[m:Date.new]] も参照してください。

#@#? --- ordinal_to_jd(year, yday, start = Date::GREGORIAN)

#@since 1.8.0
--- _parse(str, complete = false)
このメソッドは [[m:Date.parse]] と似ていますが、日付オブジェクトを生成せずに、
見いだした要素をハッシュで返します。

[[m:Date.parse]] も参照してください。

--- parse(str = '-4712-01-01', complete = false, start = Date::ITALY)
与えられた日付表現を解析し、
その情報に基づいて日付オブジェクトを生成します。

省略できる最後の引数が真で、年が0から99の範囲であれば、
年の下2桁表現であるとみなしこれを補います。
なお、省略した場合は、偽とみなします。

[[m:Date._parse]] も参照してください。

--- _strptime(str, format = '%F')
このメソッドは [[m:Date.strptime]] と似ていますが、日付オブジェクトを生成せずに、
見いだした要素をハッシュで返します。

--- strptime(str = '-4712-01-01', format = '%F', start = Date::ITALY)
与えられた雛型で日付表現を解析し、
その情報に基づいて日付オブジェクトを生成します。

[[m:Date._strptime]] も参照してください。

また [[man:strptime(3)]]、および [[m:Date#strftime]] も参照してください。
#@end

#@since 1.8.0
#@#? --- time_to_day_fraction(hour, minute, second)
#@end

--- today(start = Date::ITALY)
現在の日付に相当する日付オブジェクトを生成します。

#@since 1.8.0
--- valid_civil? (year, mon, mday, start = Date::GREGORIAN)
--- valid_date? (year, mon, mday, start = Date::GREGORIAN)
#@else
--- exist? (year, mon, mday, start = Date::GREGORIAN)
--- exist3? (year, mon, mday, start = Date::GREGORIAN)
#@end
#@since 1.9.0
正しい暦日付であれば真、そうでないなら偽を返します。
#@else
正しい暦日付であれば、相当するユリウス日を返します。
そうでないなら、偽を返します。
#@end

[[m:Date.jd]]、および [[m:Date.civil]] も参照してください。

#@since 1.8.0
--- valid_commercial? (cwyear, cweek, cwday, start = Date::GREGORIAN)
#@else
--- existw? (cwyear, cweek, cwday, start = Date::GREGORIAN)
#@end
#@since 1.9.0
正しい暦週日付であれば真、そうでないなら偽を返します。
#@else
正しい暦週日付であれば、相当するユリウス日を返します。
そうでないなら、偽を返します。
#@end

[[m:Date.jd]]、および [[m:Date.commercial]] も参照してください。

#@since 1.8.0
--- valid_jd? (jd, start = Date::GREGORIAN)
#@else
--- exist1? (jd, start = Date::GREGORIAN)
#@end
#@since 1.9.0
真を返します。
#@else
ひとつ目の引数をそのまま返します。
#@end

対称性のため用意されていますが、実際的に意味はありません。

[[m:Date.jd]] も参照してください。

#@since 1.8.0
--- valid_ordinal? (year, yday, start = Date::GREGORIAN)
#@else
--- exist2? (year, yday, start = Date::GREGORIAN)
#@end
#@since 1.9.0
正しい年間通算日 (年日付) であれば真、そうでないなら偽を返します。
#@else
正しい年間通算日 (年日付) であれば、相当するユリウス日を返します。
そうでないなら、偽を返します。
#@end

[[m:Date.jd]]、および [[m:Date.ordinal]] も参照してください。

#@since 1.8.6
#@#? --- weeknum_to_jd(year, week, day, f = 0, start = Date::GREGORIAN)
#@end

#@since 1.8.0
#@#? --- zone_to_diff(zone)
#@end

== Instance Methods

--- + (n)
self から n 日後の日付オブジェクトを返します。
n は数値でなければなりません。

--- - (x)
x が日付オブジェクトなら、ふたつの差を返します。
あるいは
x が数値ならば、self より x 日前の日付を返します。

--- << (n)
self より n ヶ月前の日付オブジェクトを返します。
n は数値でなければなりません。

#@since 1.9.0
[[m:Date#prev_month]] も参照してください。
#@end

--- <=> (other)
ふたつを比較し、-1、零、あるいは 1 を返します。
other は日付オブジェクトか、
天文学的なユリウス日をあらわす数値でなければなりません。

--- === (other)
同じ日なら真を返します。

--- >> (n)
self から n ヶ月後の日付オブジェクトを返します。
n は数値でなければなりません。

#@since 1.9.0
[[m:Date#next_month]] も参照してください。
#@end

#@since 1.8.0
--- ajd
このメソッドは [[m:Date#jd]] と似ていますが、天文学的なユリウス日を返します。
時刻を含みます。

--- amjd
このメソッドは [[m:Date#mjd]] と似ていますが、天文学的な修正ユリウス日を返します。
時刻を含みます。
#@end

--- asctime
--- ctime
[[man:asctime(3)]] 書式の文字列を返します (ただし、末尾の "\n\0" は除く)。

--- cwday
暦週の日 (曜日) を返します (1-7、月曜は1)。

--- cweek
暦週を返します (1-53)。

--- cwyear
暦週における年を返します。

#@#? --- day_fraction

--- downto(min){|date| ...}
このメソッドは、step(min, -1){|date| ...} と等価です。

[[m:Date#step]] を参照してください。

#@since 1.9.0
1.9.0 以降では、ブロックが与えられない場合、
[[c:Enumerable::Enumerator]] オブジェクトを返します。
#@end

--- england
このメソッドは、new_start(Date::ENGLAND) と等価です。

[[m:Date#new_start]]、および [[m:Date::ENGLAND]] を参照してください。

#@since 1.9.0
--- friday?
金曜日なら真を返します。
#@end

--- gregorian
このメソッドは、new_start(Date::GREGORIAN) と等価です。

[[m:Date#new_start]]、および [[m:Date::GREGORIAN]] を参照してください。

#@since 1.8.6
--- gregorian?
#@else
--- ns?
#@end
グレゴリオ暦なら真を返します。

#@since 1.9.0
--- iso8601
--- rfc3339
ISO 8601 書式の文字列を返します (拡大表記はつかいません)。
#@end

--- italy
このメソッドは、new_start(Date::ITALY) と等価です。

[[m:Date#new_start]]、および [[m:Date::ITALY]] を参照してください。

--- jd
ユリウス日を返します。
時刻を含みません。

[[m:Date#ajd]] も参照してください。

#@since 1.9.0
--- jisx0301
JIS X 0301 書式の文字列を返します。
ただし、明治以前については ISO 8601 書式になります。
なお、明治6年以前についても太陰太陽暦を使用することはありません。
#@end

--- julian
このメソッドは、new_start(Date::JULIAN) と等価です。

[[m:Date#new_start]]、および [[m:Date::JULIAN]] を参照してください。

#@since 1.8.6
--- julian?
#@else
--- os?
#@end
ユリウス暦なら真を返します。

--- ld
リリウス日を返します。

--- leap?
閏年なら真を返します。

--- mday
--- day
月の日を返します (1-31)。

--- mjd
修正ユリウス日を返します。
時刻の情報を含みません。

[[m:Date#amjd]] も参照してください。

--- mon
--- month
月を返します (1-12)。

#@since 1.9.0
--- monday?
月曜日なら真を返します。
#@end

#@since 1.8.0
--- new_start(start = Date::ITALY)
#@else
--- newsg(start = Date::ITALY)
#@end
self を複製して、その改暦日を設定しなおします。
引数を省略した場合は、[[m:Date::ITALY]] (1582年10月15日) になります。

[[m:Date.new]] も参照してください。

#@since 1.9.0
--- next_day(n = 1)
n 日後を返します。

[[m:Date#succ]] も参照してください。

--- next_month(n = 1)
n ヶ月後を返します。

[[m:Date#>>]] も参照してください。

--- next_year(n = 1)
n 年後を返します。

--- prev_day(n = 1)
n 日前を返します。

--- prev_month(n = 1)
n ヶ月前を返します。

[[m:Date#<<]] も参照してください。

--- prev_year(n = 1)
n 年前を返します。
#@end

#@since 1.9.0
--- rfc2822
--- rfc822
RFC 2822 書式の文字列を返します。
#@end

#@since 1.9.0
--- saturday?
土曜日なら真を返します。
#@end

#@since 1.8.0
--- start
#@else
--- sg
#@end
改暦日をあらわすユリウス日を返します。

[[m:Date.new]] も参照してください。

--- step(limit, step = 1){|date| ...}
ブロックの評価を繰り返します。ブロックは日付オブジェクトをとります。
limit は日付オブジェクトでなければなりません、
また step は非零でなければなりません。

#@since 1.9.0
1.9.0 以降では、ブロックが与えられない場合、
[[c:Enumerable::Enumerator]] オブジェクトを返します。
#@end

#@since 1.9.0
--- sunday?
日曜日なら真を返します。
#@end

--- strftime(format = '%F')
与えられた雛型で日付を書式づけます。
つぎの変換仕様をあつかいます:

%A, %a, %B, %b, %C, %c, %D, %d, %e, %F, %G, %g, %H, %h, %I, %j, %k, %l,
%M, %m, %n, %P, %p, %R, %r, %S, %s, %T, %t, %U, %u, %V, %v, %W, %w, %X,
%x, %Y, %y, %Z, %z, %%, %+

#@since 1.8.6
1.8.6 以降では、%L, %N, %Q もつかえます。
#@# %:{1,3}z も?
また、GNU 版にあるような幅指定などもできます。
#@else
#@# %[123]?
#@end

[[man:strftime(3)]]、および [[m:Date.strptime]] も参照してください。

--- succ
--- next
翌日の日付オブジェクトを返します。

#@since 1.9.0
--- thursday?
木曜日なら真を返します。

--- to_date
対応するもっともふさわしいと思われる [[c:Date]] オブジェクトを返します。

--- to_datetime
対応するもっともふさわしいと思われる [[c:DateTime]] オブジェクトを返します。
#@end

--- to_s
ISO 8601 書式の文字列を返します (拡大表記はつかいません)。

#@since 1.9.0
--- to_time
対応するもっともふさわしいと思われる [[c:Time]] オブジェクトを返します。

--- tuesday?
火曜日なら真を返します。
#@end

--- upto(max){|date| ...}
このメソッドは、step(max, 1){|date| ...} と等価です。

[[m:Date#step]] を参照してください。

#@since 1.9.0
1.9.0 以降では、ブロックが与えられない場合、
[[c:Enumerable::Enumerator]] オブジェクトを返します。
#@end

--- wday
曜日を返します (0-6、日曜日は零)。

#@since 1.9.0
--- wednesday?
水曜日なら真を返します。
#@end

--- yday
年の日を返します (1-366)。

--- year
年を返します。

#@since 1.9.0
= reopen Time

== Instance Methods

--- to_date
対応するもっともふさわしいと思われる [[c:Date]] オブジェクトを返します。

--- to_datetime
対応するもっともふさわしいと思われる [[c:DateTime]] オブジェクトを返します。

--- to_time
対応するもっともふさわしいと思われる [[c:Time]] オブジェクトを返します。
#@end
#@end
