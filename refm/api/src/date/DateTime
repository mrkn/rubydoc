= class DateTime < Date

日付だけでなく時刻も扱える [[c:Date]] のサブクラスです。

=== 簡単なつかいかた

  require 'date'

  d1 = DateTime.new(1993, 2, 24, 12, 30, 45)
  d2 = DateTime.parse('1993-02-24T12:30:45')
  d2 += 10

  d2 - d1           #=> 10
  d2.year           #=> 1993
  d2.strftime('%a') #=> "Sat"

  yesterday = DateTime.now - 1

== Class Methods

--- civil([year[, mon[, mday[, hour[, min[, sec[, offset[, start]]]]]]]])
--- new([year[, mon[, mday[, hour[, min[, sec[, offset[, start]]]]]]]])
暦日付に相当する日時オブジェクトを生成します。

--- commercial([cwyear[, cweek[, cwday[, hour[, min[, sec[, offset[, start]]]]]]]])
暦週日付に相当する日時オブジェクトを生成します。

--- jd([jd[, hour[, min[, sec[, offset[, start]]]]]])
ユリウス日に相当する日時オブジェクトを生成します。

--- now([start])
現在の時刻に相当する日時オブジェクトを生成します。

--- ordinal([year[, yday[, hour[, min[, sec[, offset[, start]]]]]]])
年日付に相当する日時オブジェクトを生成します。

--- today([start])
DateTime では undef されています。

#@since 1.8.0
#@#? --- valid_time?
#@end

== Instance Methods

--- hour
時間を返します (0-23)。

--- min
分を返します (0-59)。

#@since 1.8.0
--- new_offset([offset])
#@else
--- newof([offset])
#@end
self を複製して、その時差を設定しなおします。
引数を省略した場合は、零 (協定世界時) になります。

[[m:Date.new]] も参照してください。

#@since 1.8.0
--- offset
#@else
--- of
#@end
時差を返します。

--- sec
秒を返します (0-59)。

#@#? --- sec_fraction

--- zone
タイムゾーンを返します。

実際には、時差をあらわす文字列です。
