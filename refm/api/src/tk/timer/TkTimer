= class TkTimer < Object
extend TkCore
include TkCore

== Constants

--- TkCommandNames
#@todo

--- Tk_CBID
#@todo

--- Tk_CBTBL
#@todo

#@since 1.8.2
--- DEFAULT_IGNORE_EXCEPTIONS
#@todo

#@end

== Class Methods

--- new(*args) { .... }
#@todo

#@since 1.8.2
--- start(*args) { .... }
#@todo

#@end

--- callback(obj_id)
#@todo

--- info(obj = nil)
#@todo

== Instance Methods

--- do_callback
#@todo

--- set_callback(sleep, args = nil)
#@todo

--- set_next_callback(args)
#@todo

--- after_id
#@todo

--- after_script
#@todo

--- current_proc
#@todo

--- current_args
#@todo

--- current_sleep
--- current_interval
#@todo

--- return_value
#@todo

--- loop_exec
--- loop_exec=
#@todo

--- cb_call
#@todo

--- get_procs
#@todo

--- current_status
#@todo

--- cancel_on_exception?
#@todo

--- cancel_on_exception=(mode)
#@todo

--- running?
#@todo

--- loop_rest
#@todo

--- loop_rest=(rest)
#@todo

#@since 1.8.2
--- set_interval(interval)
#@todo

#@end

--- set_procs(interval, loop_exec, *procs)
#@todo

--- add_procs(*procs)
#@todo

--- delete_procs(*procs)
#@todo

--- delete_at(n)
#@todo

--- set_start_proc(sleep = nil, init_proc = nil, *init_args) { .... }
#@todo

--- start(*init_args) { .... }
#@todo

--- reset(*reset_args)
#@todo

--- restart(*restart_args) { .... }
#@todo

--- cancel
--- stop
#@todo

--- continue(wait = nil)
#@todo

--- skip
#@todo

--- info
#@todo

#@since 1.8.1
--- eventloop_wait(check_root = false)
#@todo

--- eventloop_tkwait
#@todo

--- thread_wait(check_root = false)
#@todo

--- thread_tkwait
#@todo

--- tkwait(on_thread = true)
#@todo

--- wait(on_thread = true, check_root = false)
#@todo

#@end


= class TkAfter
alias TkTimer
