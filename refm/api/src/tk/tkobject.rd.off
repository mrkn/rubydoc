# $Id: tkobject.rd,v 1.17 2000/02/06 06:01:47 arai Exp $
# Class TkObject is defined in tk.rb
=begin
= TkObject

すべてのウィジェットと((<TkCanvas>))、((<TkText>))のアイテムクラスのスー
パークラスです。

(({TkObject}))のサブクラスには、以下の種類のメソッドがあります。

*純粋なRubyメソッド
*ウィジェットコマンド
*オプション
*Rubyでラップしたオプション

これらの違いはRuby/Tkプログラミングにおいて意識する必要はあまりありま
せんが、まれに実装上の都合により知らなければいけない場合もあります。
((<TkObject#method_missing>)), ((<TkComposite>))

以下のようにしてあるクラスのオプションの一覧を得ることができます。

  require "tk"
  puts TkLabel.new.configinfo.collect {|name,| name}

== スーパークラス:

((<TkKernel>))

== インクルードしているモジュール:

((<Tk>))

((<TkTreatFont>))

((<TkBindCore>))

== privateメソッド:

--- TkObject#tk_send(cmd、*rest)
    selfに対してコマンド((|cmd|))と引数((|rest|))を渡して実行します。
    ((<ウィジェットコマンド>))の定義の実体です。

--- TkObject#tk_trace_variable(v)
    引数((|v|))を返すだけのメソッドですが、((|v|))が、((<TkVariable>))オブ
    ジェクトでなければ例外((<ArgumentError>))を発生させます。内部で型チェッ
    クに使用しています。

== メソッド:

--- TkObject#path
    そのウィンドウの((<パス>))を返します。ウィジェットコマンドの効果はこの
    パスに適用されます。

--- TkObject#epath
    そのウィンドウの((<パス>))を返します。ウィジェットの配置
    ((<TkWindow#pack>))はこのパスに対して適用されます。

    (({path}))と(({epath}))のこの違いは、((<TkComposite>))の実装のためです。
    ((-たぶん-))

--- TkObject#to_eval
    (({self}))のTcl/Tkインタプリタでの表現を返します。このメソッドは各オブ
    ジェクトで

     *ウィジェットクラス

      ウィジェットクラス名
     *ウィジェット

      ウィジェットパス
     *TkVariable

      Tcl変数名

    などを返すように再定義されています。このメソッドは内部でTcl/Tkインタプ
    リタとのやりとりに使われます。

    (このマニュアルでは、サブクラスの(({to_eval}))についての記述は省略して
    います)

--- TkObject#[](slot)
--- TkObject#cget(slot)
    ((<オプション>))((|slot|))の値を返します。

--- TkObject#[]=(slot, value)
--- TkObject#configure(slot, value=None)
--- TkObject#configure(hash)
    ((<オプション>))((|slot|))に((|value|))を設定します。

      require "tk"
      TkLabel.new {
        configure('text', "foobar")
        configure('foreground', "red")
        pack
      }
      Tk.mainloop

    引数にハッシュが指定された場合、そのキーをオプション名、値をオプション
    の値としてそれぞれ設定します。

      require "tk"
      TkLabel.new {
        configure('text' => "foobar", 'foreground' => "red")
        pack
      }
      Tk.mainloop

--- TkObject#configure_cmd(slot, value)
    オプション((|slot|))に((|value|))を設定します。((|value|))は((<Proc>))
    オブジェクトです。((-configure_cmdの代りにconfigureを使っても問題なさ
    そう。このメソッドの存在価値はない？-))

--- TkObject#configinfo(slot = nil)
    ((<オプション>))((|slot|))に関する以下の5つの要素を配列にして返します。
      [オプション名, パラメータ名, クラス名, デフォルト値, 現在値]

    「パラメータ名」は、((<オプションデータベース>))(((<TkOption>)))で指定す
    るときの名前で、普通オプション名と同じです。「クラス名」は、ここでは値
    の種別を表す名前です。(Rubyのクラスとは異なります)((-もっと詳細に-))

      require "tk"
      p TkButton.new.configinfo("foreground")

      => ["foreground", "foreground", "Foreground", "Black", "Black"]

    引数が省略されたときはすべてのオプションについて上記配列の配列を返しま
    す。

--- TkObject#event_generate(context, keys=nil)
    ((<イベント>))((|context|))を発生させます。

    ((|context|)) に"<仮想イベント名>"という文字列か((<TkVirtualEvent>))の
    インスタンスを指定することで((<仮想イベント>))を発生させることもできま
    す。

    詳細は、((<TkCore#event_generate>))を参照してください。

--- TkObject#destroy
    トレース変数が設定されていれば、そのトレースを解除します。((-使ってる？-))

--- TkObject#method_missing(id, *args)
    定義されていないメソッドが呼び出されたときに実行されます。
    (((<Object#method_missing>))参照)

    このメソッドにより、ウィジェットのオプションをメソッドとして実装してい
    ます。引数((|id|))は、呼び出されたメソッド(オプション)のIDで、引数
    ((|args|))の数は0または1です。

    引数が1つであるときは、
      configure id.id2name, args[0]
    が実行されます。つまり、((<オプション>))を設定するメソッドです。
    このときの戻り値は空文字列(({""}))です。

    引数が0個であるときは、
      cget id.id2name
    が実行されます。つまり、((<オプション>))を参照するメソッドです。オプショ
    ンの値を返します。

    ((*注意*))

    (({method_missing}))で実装されるメソッドは、サブクラスから
    (({super}))を使って呼び出すことができません。(({TkObject}))のサブクラスを
    継承して新しいウィジェットクラスを作成する際には注意が必要です。

      require "tk"

      class TkButton2 < TkButton
        def text(val = nil)         # オプション text を再定義します。
          if val
            super "<#{val}>"        # TkButtonの text を呼び出せません
          else
            super()                 # TkButtonの text を呼び出せません
          end
        end
      end

      TkButton2.new {
        p text "a"
        p text
      }

      ((*error-->*)) -:6:in `text': super: no superclass method `text' (NameError)

    以下のように直接オプションを設定／参照してください。

      require "tk"

      class TkButton2 < TkButton
        def text(val = nil)
          if val
            configure "text", "<#{val}>"        # method_missing :text, val
          else
            cget "text"                 # method_missing :text
          end
        end
      end

      TkButton2.new {
        p text "a"
        p text
      }

      => ""
         "<a>"

== 標準オプション

以下はTcl/Tkで標準として分類されているオプションの一覧です。ただし、す
べてのウィジェットがこれらのオプションを持つ分けではありません。

説明中、引数を1つ指定した場合の動作しか書かれていませんが、すべてのオ
プションは引数を指定しないことで設定値を参照することもできます。
((<TkObject#method_missing>))

--- TkObject#activebackground
    ウィジェットが((<アクティブ>))である場合の背景の色を指定します。

      require "tk"
      TkButton.new.pack.activebackground "black"
      Tk.mainloop

--- TkObject#activeborderwidth
    ウィジェットが((<アクティブ>))である場合のボーダーの幅を指定します。

--- TkObject#activeforeground
    ウィジェットが((<アクティブ>))である場合の色を指定します。

      require "tk"
      TkButton.new { text "button" }.pack.activeforeground "red"
      Tk.mainloop

--- TkObject#anchor
    ウィジェット内のテキストやビットマップを貼り付ける位置を指定します。指
    定できるのは以下のうちの何れかです。

    *"center"

     中央
    *"e"

     右(東 east)
    *"s"

     下(南 south)
    *"w"

     左(西 west)
    *"n"

     上(北 north)
    *"ne"

     右上(北東)
    *"nw"

     左上(北西)
    *"se"

     右下(南東)
    *"sw"

     左下(南西)

      require "tk"
      TkLabel.new {
        text "label"
        bg "white"
        width 5
        height 3
        anchor "ne"
      }.pack
      Tk.mainloop

--- TkObject#background
--- TkObject#bg
    ウィジェットの通常時の背景の色を指定します。

--- TkObject#bitmap
    ビットマップを指定します。最近は((<TkObject#image>))オプションに取って代わられ
    ています。

--- TkObject#borderwidth
--- TkObject#bd
    ウィジェットのボーダーの幅を指定します。

--- TkObject#cursor
    マウスカーソルの形状を指定します。((-指定方法について書くこと-))

--- TkObject#disabledforeground
    ウィジェットが((<ディスエーブル>))であるときの色を指定します。

      require "tk"
      TkButton.new {text "normal";   state text}.pack "fill" => "x"
      TkButton.new {text "active";   state text}.pack "fill" => "x"
      TkButton.new {text "disabled"; state text}.pack "fill" => "x"
      Tk.mainloop

--- TkObject#exportselection
    他のアプリケーションとの間で((<セレクション>))をやりとりできるかどうか
    を真偽値((({true}))/(({false})))で指定します(デフォルトは(({true})))。

--- TkObject#font
    テキストのフォントを指定します。((-指定方法について書くこと-))

--- TkObject#foreground
--- TkObject#fg
    テキスト(等)の色を指定します。

--- TkObject#highlightbackground
    ((<入力フォーカス>))がない状態での枠(ウィジェットの周り)の色を指定します。

      require "tk"
      TkButton.new {highlightbackground "red"; highlightcolor "blue"}.
        pack("padx"=>10,"pady"=>10).focus
      TkButton.new {highlightbackground "red"; highlightcolor "blue"}.
        pack("padx"=>10,"pady"=>10)
      Tk.mainloop

--- TkObject#highlightcolor
    ((<入力フォーカス>))がある状態での枠(ウィジェットの周り)の色を指定します。

--- TkObject#highlightthickness
    ((<入力フォーカス>))のあるなしを表す枠(ウィジェットの周り)の幅を指定します。

      require "tk"
      TkButton.new {
        highlightbackground "red"
        highlightcolor "blue"
        highlightthickness 10
      }.pack("padx"=>10,"pady"=>10).focus
      TkButton.new {
        highlightbackground "red"
        highlightcolor "blue"
        highlightthickness 10
      }.pack("padx"=>10,"pady"=>10)
      Tk.mainloop

--- TkObject#image
    イメージ((<TkImage>))を指定します。

--- TkObject#insertbackground
    入力カーソルの色を指定します。

      require "tk"
      TkEntry.new {
        insertbackground "red"
        insertwidth 50
        insertborderwidth 10
        insert 0, "foobar"
      }.pack.focus
      Tk.mainloop

--- TkObject#insertborderwidth
    入力カーソルのボーダーの幅を指定します。ボーダーの幅は入力カーソルの幅
    (((<TkObject#insertwidth>))で指定)に含まれるので、入力カーソル自体より大きい幅
    になることはありません(指定しても入力カーソルの幅になります)。

--- TkObject#insertofftime
    ((<TkObject#insertontime>))と共に、入力カーソルの点滅速度を表します。
    入力カーソルが消えた状態を保持する時間をミリ秒単位で指定します。

--- TkObject#insertontime
    ((<TkObject#insertofftime>))と共に、入力カーソルの点滅速度を表します。
    入力カーソルを表示した状態を保持する時間をミリ秒単位で指定します。

--- TkObject#insertwidth
    入力カーソルの幅を指定します。((<TkObject#insertborderwidth>))

--- TkObject#jump
    スクロールバー((<TkScrollbar>))を動かしたときの動作を真偽値で指定しま
    す。真の場合スクロールバーを動かすつど関連コマンドを実行します。偽の場
    合スクロールバーを離したときに初めて関連コマンドを実行します。

    以下の例では(({true}))の動作をするスクロールバーと(({false}))の動作を
    するスクロールバーを1つのエントリウィジェット((<TkEntry>))と連動させて
    います。

      require "tk"

      s1 = s2 = nil

      e = TkEntry.new {
        xscrollcommand {|arg| s1.set *arg; s2.set *arg}
        insert 0, ("a".."z").to_a.join * 3
      }.pack "fill"=>"x"

      s1 = TkScrollbar.new {
        jump true
        orient "h"
        command {|arg| e.xview *arg }
      }.pack "fill"=>"x"

      s2 = TkScrollbar.new {
        jump false
        orient "h"
        command {|arg| e.xview *arg }
      }.pack "fill"=>"x"

      Tk.mainloop

--- TkObject#justify
    テキストの揃え方を指定します。
    指定できる文字列は以下のいずれかです。

      *"center"

       中央寄せ
      *"left"

       左寄せ
      *"right"

       右寄せ

--- TkObject#orient
    ウィジェットの向きを横((({"horizontal"})))にするか縦((({"vertical"})))
    にするかを指定します。指定する文字列は省略名でも構いません。

--- TkObject#padx
    ウィジェット内部の横の余白の幅を指定します。(((<TkPack.configure>))の
    キー(({"padx"}))とは別もの。キー(({"ipadx"}))とも別物なのが悩ましい)

      require "tk"
      TkButton.new { text "a"; padx 10; pady 10 }.pack
      TkButton.new { text "b" }.pack("ipadx"=>10, "ipady"=>10)
      TkButton.new { text "c" }.pack( "padx"=>10,  "pady"=>10)
      Tk.mainloop

--- TkObject#pady
    ウィジェット内部の縦の余白の幅を指定します。(((<TkPack.configure>))の
    キー(({"pady"}))とは別もの。キー(({"ipady"}))とも別物なのが悩ましい)

--- TkObject#relief
    ウィジェットの形状を以下の何れかで指定します。

    *"raised"
    *"sunken"
    *"flat"
    *"ridge"
    *"solid"
    *"groove"

    各形状の違いは以下のサンプルの結果を参考にしてください。

      require "tk"
      %w(raised sunken flat ridge solid groove).each {|shape|
        TkLabel.new { bd 5; text shape; relief shape}.pack
      }
      Tk.mainloop

--- TkObject#repeatdelay
    キーやマウスボタンを押したときのオートリピートが始まるまでの時間をミリ
    秒単位で指定します。

--- TkObject#repeatinterval
    キーやマウスボタンのオートリピートの間隔をミリ秒単位で指定します。

--- TkObject#selectbackground
    ((<選択>))した領域の背景の色を指定します。

--- TkObject#selectborderwidth
    ((<選択>))した領域のボーダーの幅を指定します。

--- TkObject#selectforeground
    ((<選択>))した領域の(文字などの)色を指定します。

--- TkObject#setgrid
    ウィジェットのリサイズをグリッド単位にするかどうかを真偽値で指定します。

--- TkObject#takefocus
    ((<入力フォーカス>))を持つかどうかを真偽値で指定します。

--- TkObject#text
    ウィジェット内部に表示するテキストを文字列で指定します。

###--- TkObject#textvariable

--- TkObject#troughcolor
    くぼみの色を指定します。

      require "tk"
      TkScale.new {
        orient "h"
        troughcolor "red"
        pack "fill"=>"x"
      }
      TkScrollbar.new {
        orient "h"
        troughcolor "red"
        pack "fill"=>"x"
      }
      Tk.mainloop

--- TkObject#underline
    下線を引くテキストの位置を指定します。ショートカットキーを指定するのに
    使用します。

      require "tk"
      TkLabel.new { text "fooBar"; underline 3 }.pack
      Tk.mainloop

--- TkObject#wraplength
    テキストを畳み込むためにテキストの1行の長さを指定します。
    0ならばテキストの畳み込みを行いません。

      require "tk"
      TkLabel.new { text "foobar"; wraplength 20; p wraplength}.pack
      Tk.mainloop

###--- TkObject#xscrollcommand

###--- TkObject#yscrollcommand

=end
