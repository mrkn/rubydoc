# $Id: tkwinfo.rd,v 1.10 2000/01/22 08:52:57 arai Exp $
# Module TkWinfo is defined in tk.rb
=begin
= TkWinfo

ウィンドウに関する情報を取得するためのメソッドを集めたモジュールです。
取得する情報は比較的低レベル(ウィンドウシステム寄り)な情報です。

((-MS Windows とかはどうなる？-))

*色
 *((<TkWinfo.cells>))
 *((<TkWinfo.colormapfull>))
 *((<TkWinfo.depth>))
 *((<TkWinfo.rgb>))
 *((<TkWinfo.visual>))
 *((<TkWinfo.visualid>))
 *((<TkWinfo.visualsavailable>))
*ウィンドウの位置／サイズ
 *((<TkWinfo.containing>))
 *((<TkWinfo.geometry>))
 *((<TkWinfo.height>))
 *((<TkWinfo.reqheight>))
 *((<TkWinfo.reqwidth>))
 *((<TkWinfo.rootx>))
 *((<TkWinfo.rooty>))
 *((<TkWinfo.vrootheight>))
 *((<TkWinfo.vrootwidth>))
 *((<TkWinfo.vrootx>))
 *((<TkWinfo.vrooty>))
 *((<TkWinfo.width>))
 *((<TkWinfo.x>))
 *((<TkWinfo.y>))
*画面
 *((<TkWinfo.screen>))
 *((<TkWinfo.screencells>))
 *((<TkWinfo.screendepth>))
 *((<TkWinfo.screenheight>))
 *((<TkWinfo.screenmmheight>))
 *((<TkWinfo.screenmmwidth>))
 *((<TkWinfo.screenvisual>))
 *((<TkWinfo.screenwidth>))
*ウィンドウの状態
 *((<TkWinfo.exist?>))
 *((<TkWinfo.mapped?>))
 *((<TkWinfo.viewable>))
*ウィンドウの親子関係
 *((<TkWinfo.children>))
 *((<TkWinfo.parent>))
 *((<TkWinfo.toplevel>))
*マウスポインタ
 *((<TkWinfo.pointerx>))
 *((<TkWinfo.pointery>))
 *((<TkWinfo.pointerxy>))
*その他
 *((<TkWinfo.atom>))
 *((<TkWinfo.atomname>))
 *((<TkWinfo.classname>))
 *((<TkWinfo.id>))
 *((<TkWinfo.interps>))
 *((<TkWinfo.manager>))
 *((<TkWinfo.appname>))
 *((<TkWinfo.widget>))
 *((<TkWinfo.server>))
 *((<TkWinfo.fpixels>))
 *((<TkWinfo.pixels>))

== インクルードしているモジュール:

((<Tk>))

== extendしているモジュール:

((<Tk>))

== モジュールメソッド:

--- TkWinfo.atom(name)
#@todo
    ((<アプリケーション名>))((|name|))の((<アトム>))を返します。

      require "tk"
      p TkWinfo.atom("tk")

      => 352

    ((-displayofは？-))

--- TkWinfo.atomname(id)
#@todo
    アトム((|id|))に対応するアプリケーション名を返します。

      require "tk"
      p TkWinfo.atomname(TkWinfo.atom("tk"))

      => "tk"

    ((-displayofは？-))

--- TkWinfo.cells(window)
#@todo
    ウィンドウ((|window|))のカラーマップのセル数を返します。

      require "tk"
      p TkWinfo.cells(Tk.root)

      => 64

--- TkWinfo.children(window)
#@todo
    ウィンドウ((|window|))の子ウィンドウを配列にして返します。

    (ウィジェット階層上の子ウィンドウなので、((<TkToplevel>)) でも子ウィン
    ドウになり得ます)

      require "tk"
      TkFrame.new {
        TkButton.new(self).pack
      }
      TkToplevel.new {
        TkLabel.new(self).pack
      }
      p TkWinfo.children(Tk.root)

      => [#<TkFrame: @path=".w0000">, #<TkToplevel: @path= ... >]

--- TkWinfo.classname(window)
#@todo
    ウィジェットの((<クラス>))名を返します。

      require "tk"
      p TkWinfo.classname Tk.root
      p TkWinfo.classname TkFrame.new
      p TkWinfo.classname TkFrame.new(nil, "classname"=>"Foo")

      => "Tk"
         "Frame"
         "Foo"

--- TkWinfo.colormapfull(window)
#@todo
    ウィンドウに割り当てられたカラーマップに空きがなければ真を返します。

      require "tk"
      p TkWinfo.colormapfull Tk.root

      => false

--- TkWinfo.containing(rootX, rootY)
#@todo
    指定した位置にあるウィンドウを返します。

      require "tk"
      TkLabel.new {
        text "Click Here!"
        bind "1", proc {|rootx, rooty|
          p TkWinfo.containing(rootx, rooty)
          exit
        }, "%X %Y"
      }.pack
      Tk.mainloop

      => #<TkLabel: @path=".w0000", @cmdtbl=["c0000"]>

    ((-displayofは？-))

--- TkWinfo.depth(window)
#@todo
    ウィンドウの深さ(1ピクセルあたりのビット数)を返します。

      require "tk"
      p TkWinfo.depth TkLabel.new

      => 16

--- TkWinfo.exist?(window)
#@todo
    ウィンドウが存在しているかどうかを返します。

      require "tk"
      l = TkLabel.new
      p TkWinfo.exist? l
      l.destroy
      p TkWinfo.exist? l

      => true
         false

--- TkWinfo.fpixels(window, number)
#@todo
    距離((|number|))が何ピクセルかを浮動小数で返します。((<TkWinfo.pixels>))

      require "tk"
      p TkWinfo.fpixels Tk.root, 1
      p TkWinfo.fpixels Tk.root, "1c"  # cm
      p TkWinfo.fpixels Tk.root, "1m"  # mm
      p TkWinfo.fpixels Tk.root, "1i"  # inch

      p TkWinfo.fpixels Tk.root, "2.54c"  # 1 inch

      => 1.0
         29.56120092
         2.956120092
         75.08545035
         75.08545035

--- TkWinfo.geometry(window)
#@todo
    ウィンドウの((<ジオメトリ>))を返します。

    ((<Tk::Wm#geometry>))はウィンドウのフレーム(タイトルバーなど)の位置を
    返すので、このメソッドとは結果が異なる場合があります。

      require "tk"
      p Tk.root.geometry 
      p TkWinfo.geometry Tk.root
      Tk.after 1000 do
        p Tk.root.geometry
        p TkWinfo.geometry Tk.root
        exit
      end
      Tk.mainloop

      =>"1x1+0+0"
        "1x1+0+0"
        "200x200+323+374"
        "200x200+328+396"

--- TkWinfo.height(window)
#@todo
    ウィンドウの高さを返します。

      require "tk"
      Tk.after 1000 do
        p TkWinfo.height Tk.root
        p TkWinfo.width Tk.root
        exit
      end
      Tk.mainloop

      => 200
         200

--- TkWinfo.id(window)
#@todo
    ウィンドウの((<リソースID>))を返します。((<TkWinfo.widget>))

      require "tk"
      p TkWinfo.id Tk.root
      p TkWinfo.widget TkWinfo.id Tk.root

      => "0x400000e"
         #<TkRoot: @path=".">

--- TkWinfo.interps(window=nil)
#@todo
    実行しているTcl/Tkインタプリタのアプリケーション名を配列にして返します。
    ウィンドウを指定すると、そのウィンドウがあるスクリーン上で実行している
    ものを返します。

      require "tk"
      ip = TclTkIp.new
      p TkWinfo.interps

      => ["tk #2", "tk"]

--- TkWinfo.mapped?(window)
#@todo
    ウィンドウが((<マップ>))されていれば真を返します。
    ((<TkWinfo.viewable>))

      require "tk"
      p TkWinfo.mapped? Tk.root
      Tk.after 1000 do
        p TkWinfo.mapped? Tk.root
        exit
      end
      Tk.mainloop

      => false
         true

--- TkWinfo.manager(window)
#@todo
    ウィンドウ配置を決めている((<ジオメトリマネージャ>))の名前を返します。
    ((<TkRoot>))や((<TkToplevel>))の場合はウィンドウマネージャを表す文字列
    (({"wm"}))を返します。

      require "tk"
      p TkWinfo.manager Tk.root
      p TkWinfo.manager TkToplevel.new
      p TkWinfo.manager TkLabel.new.pack
      p TkWinfo.manager TkLabel.new.grid
      p TkWinfo.manager TkLabel.new.place("x"=>0)

      => "wm"
         "wm"
         "pack"
         "grid"
         "place"

--- TkWinfo.appname(window)
#@todo
    ウィンドウの名前(((<パス>))名の要素)を返します。ルートウィジェットでは
    アプリケーション名を返します。((<TkCore.appname>))

      require "tk"
      p TkWinfo.appname Tk.root
      p TkWinfo.appname TkLabel.new.pack

      => "tk"
         "w0001"

--- TkWinfo.parent(window)
#@todo
    ウィンドウの親ウィンドウを返します。ルートウィジェットを指定した場合
    (({nil}))を返します。

      require "tk"
      p TkWinfo.parent TkRoot.new
      p TkWinfo.parent TkToplevel.new

      => nil
         #<TkRoot: @path=".">

--- TkWinfo.widget(id)
#@todo
    ウィンドウの((<リソースID>))からウィンドウを返します。((<TkWinfo.id>))

      require "tk"
      p TkWinfo.id Tk.root
      p TkWinfo.widget TkWinfo.id Tk.root

      => 62914574
         #<TkRoot: @path=".">

    ((-displayofは？-))

--- TkWinfo.pixels(window, number)
#@todo
    距離((|number|))が何ピクセルかを整数で返します。((<TkWinfo.fpixels>))

      require "tk"
      p TkWinfo.pixels Tk.root, 1
      p TkWinfo.pixels Tk.root, "1c"  # cm
      p TkWinfo.pixels Tk.root, "1m"  # mm
      p TkWinfo.pixels Tk.root, "1i"  # inch

      p TkWinfo.pixels Tk.root, "2.54c"  # 1 inch

      => 1
         30
         3
         75
         75

--- TkWinfo.reqheight(window)
#@todo
    ウィンドウが要求する高さを返します。

      require "tk"
      p TkWinfo.height Tk.root
      p TkWinfo.reqheight Tk.root

      => 1
         200

--- TkWinfo.reqwidth(window)
#@todo
    ウィンドウが要求する幅を返します。

      require "tk"
      p TkWinfo.width Tk.root
      p TkWinfo.reqwidth Tk.root

      => 1
         200

--- TkWinfo.rgb(window, color)
#@todo
    色((|color|))に対応するRGB値を配列で返します。

      require "tk"
      p TkWinfo.rgb Tk.root, "black"
      p TkWinfo.rgb Tk.root, "white"
      p TkWinfo.rgb Tk.root, "red"
      p TkWinfo.rgb Tk.root, "green"
      p TkWinfo.rgb Tk.root, "blue"
      p TkWinfo.rgb Tk.root, "gray"
      p TkWinfo.rgb Tk.root, "#0a0a0a"

      => [0, 0, 0]
         [65535, 65535, 65535]
         [65535, 0, 0]
         [0, 65535, 0]
         [0, 0, 65535]
         [48830, 48830, 48830]
         [2114, 2114, 2114]


--- TkWinfo.rootx(window)
#@todo
    ウィンドウの基準位置(左上角)のルートウィンドウ上でのX座標を返します。
    ((-ウィンドウの飾りは考慮しない？-))

      require "tk"
      Tk.root.geometry("+0+0")
      p TkWinfo.rootx Tk.root
      p TkWinfo.rooty Tk.root
      Tk.after 1000, proc {
        p TkWinfo.rootx Tk.root
        p TkWinfo.rooty Tk.root
        exit
      }
      Tk.mainloop

      => 0
         0
         5
         22

--- TkWinfo.rooty(window)
#@todo
    ウィンドウの基準位置(左上角)のルートウィンドウ上でのX座標を返します。

--- TkWinfo.screen(window)
#@todo
    ウィンドウが存在するスクリーン名を返します。

      require "tk"
      p TkWinfo.screen Tk.root

      => ":0.0"

--- TkWinfo.screencells(window)
#@todo
    ウィンドウが存在するスクリーンのデフォルトカラーマップのセル数を返しま
    す。

      require "tk"
      p TkWinfo.screencells Tk.root

      => 64

--- TkWinfo.screendepth(window)
#@todo
    ウィンドウが存在するスクリーンのデフォルトの深さを返します。

      require "tk"
      p TkWinfo.screendepth Tk.root

      => 16

--- TkWinfo.screenheight (window)
#@todo
    ウィンドウが存在するスクリーンの高さ(ピクセル)を返します。

      require "tk"
      p TkWinfo.screenheight Tk.root

      => 1024

--- TkWinfo.screenmmheight(window)
#@todo
    ウィンドウが存在するスクリーンの高さ(ミリメートル)を返します。

      require "tk"
      p TkWinfo.screenheight Tk.root
      p TkWinfo.screenmmheight Tk.root
      p TkWinfo.fpixels Tk.root, "#{TkWinfo.screenmmheight Tk.root}m"

      => 1024
         347
         1025.773672

    ((-どこの誤差？-))

--- TkWinfo.screenmmwidth(window)
#@todo
    ウィンドウが存在するスクリーンの幅(ミリメートル)を返します。

      require "tk"
      p TkWinfo.screenwidth Tk.root
      p TkWinfo.screenmmwidth Tk.root
      p TkWinfo.fpixels Tk.root, "#{TkWinfo.screenmmwidth Tk.root}m"

      => 1280
         433
         1280.0

--- TkWinfo.screenvisual(window)
#@todo
    ウィンドウが存在するスクリーンのデフォルトのvisualクラスを返します。
    visualクラスは以下のうちの何れかです。

    *"directcolor"
    *"grayscale"
    *"pseudocolor"
    *"staticcolor"
    *"staticgray"
    *"truecolor"

    ((-ダミー-))

      require "tk"
      p TkWinfo.screenvisual Tk.root

      => "truecolor"

--- TkWinfo.screenwidth(window)
#@todo
    ウィンドウが存在するスクリーンの幅(ピクセル)を返します。

      require "tk"
      p TkWinfo.screenwidth Tk.root

      => 1280

--- TkWinfo.server(window)
#@todo
    ウィンドウが存在するスクリーンのサーバ情報(バージョン、ベンダ、ベンダ
    バージョン)を文字列で返します。

      require "tk"
      p TkWinfo.server Tk.root

      => "X11R0 The XFree86 Project, Inc 3320"

    ((- R0 ？-))

--- TkWinfo.toplevel(window)
#@todo
    ウィンドウが((<TkToplevel>))上に配置されていればその(({TkToplevel}))ウィ
    ンドウを返します。

      require "tk"
      p TkWinfo.toplevel TkFrame.new.pack

      TkToplevel.new {
        p TkWinfo.toplevel TkFrame.new(self) {
          p TkWinfo.toplevel TkFrame.new(self).pack
        }.pack
      }

      => nil
         #<TkToplevel: @classname=nil, @path=".w0001", @screen=nil>
         #<TkToplevel: @classname=nil, @path=".w0001", @screen=nil>

--- TkWinfo.visual(window)
#@todo
    ウィンドウの visual クラスを返します。

      require "tk"
      p TkWinfo.visual TkFrame.new
      p TkWinfo.visual TkToplevel.new(nil, {"visual"=>"grayscale"})

      => "truecolor"
      error--> tk.rb:510:in `_invoke': couldn't find an appropriate visual (RuntimeError)

    ((-truecolor以外のvisualクラスを指定する方法は？-))

--- TkWinfo.visualid(window)
#@todo
    ウィンドウの visual ID を返します。

      require "tk"
      p TkWinfo.visualid TkFrame.new
      p TkWinfo.visualid TkToplevel.new(nil, {"visual"=>"grayscale"})

      => "0x22"
      error--> tk.rb:510:in `_invoke': couldn't find an appropriate visual (RuntimeError)

    ((-truecolor以外のvisualクラスを指定する方法は？-))

--- TkWinfo.visualsavailable(window, includeids=false)
#@todo
    ウィンドウのあるスクリーン上で指定可能な以下の配列

     [visualクラス , 深さ(1ピクセルあたりのビット数), visual ID]

    の配列を返します。ただし、visual IDは、引数((|includeids|))が真の場合
    にしか要素に含まれません。

    Tkの古い版では(少なくともバージョン 4.0 では)、visual ID を要素に持て
    ません。((-正確にどのバージョンから"includeids"が指定可能になったか-))

      require "tk"
      p TkWinfo.visualsavailable TkFrame.new
      p TkWinfo.visualsavailable TkFrame.new, true

      => [["truecolor", 16]]
         [["truecolor", 16, "0x22"]]

--- TkWinfo.vrootheight(window)
#@todo
    ウィンドウのあるスクリーンの高さを返します。((<仮想画面>))を考慮します。

      require "tk"
      p TkWinfo.vrootheight Tk.root

      => 1024

--- TkWinfo.vrootwidth(window)
#@todo
    ウィンドウのあるスクリーンの幅を返します。((<仮想画面>))を考慮します。

      require "tk"
      p TkWinfo.vrootwidth Tk.root

      => 1280

--- TkWinfo.vrootx(window)
#@todo
    ウィンドウのあるスクリーンのX座標を返します。((<仮想画面>))を考慮します。

      require "tk"
      p TkWinfo.vrootx Tk.root

      => 0

--- TkWinfo.vrooty(window)
#@todo
    ウィンドウのあるスクリーンのY座標を返します。((<仮想画面>))を考慮します。

      require "tk"
      p TkWinfo.vrooty Tk.root

      => 0

--- TkWinfo.width(window)
#@todo
    ウィンドウの幅を返します。

      require "tk"
      Tk.after 1000 do
        p TkWinfo.height Tk.root
        p TkWinfo.width Tk.root
        exit
      end
      Tk.mainloop

      => 200
         200

--- TkWinfo.x(window)
#@todo
    ウィンドウの基準位置(左上角)の親ウィンドウ上でのX座標を返します。
    ((<TkRoot>))や((<TkToplevel>))のウィンドウでは((<TkWinfo.rootx>))と同じです。

      require "tk"
      top = TkToplevel.new
      label = TkLabel.new {text "label"}.place("x"=>100, "y"=>100)
      Tk.after 1000 do
        print TkWinfo.x(Tk.root), '+', TkWinfo.x(label), '=', TkWinfo.rootx(label), "\n"
        print TkWinfo.y(Tk.root), '+', TkWinfo.y(label), '=', TkWinfo.rooty(label), "\n"
        exit
      end
      Tk.mainloop

      => 226+100=326
         464+100=564

--- TkWinfo.y(window)
#@todo
    ウィンドウの基準位置(左上角)の親ウィンドウ上でのY座標を返します。
    ((<TkRoot>))や((<TkToplevel>))のウィンドウでは((<TkWinfo.rooty>))と同じです。

--- TkWinfo.viewable(window)
#@todo
    指定したウィンドウとその先祖ウィンドウ(すべての親)が((<マップ>))されて
    いれば真を返します。((<TkWinfo.mapped?>))

      require "tk"
      root  = TkRoot.new
      top   = TkToplevel.new

      label1 = TkLabel.new(root) { text "label1" }.pack
      label2 = TkLabel.new(top)  { text "label2" }.pack

      root.withdraw
      Tk.after 1000, proc {
        p TkWinfo.viewable root
        p TkWinfo.viewable label1
        p TkWinfo.viewable top
        p TkWinfo.viewable label2
        exit
      }
      Tk.mainloop

      => false
         false
         true
         true

--- TkWinfo.pointerx(window)
#@todo
    ウィンドウがあるスクリーン上のマウスポインタのX座標を返します。
    マウスポインタがスクリーン上にない場合-1を返します((-どういう場合？-))。

      require "tk"
      p TkWinfo.pointerx Tk.root
      p TkWinfo.pointery Tk.root
      p TkWinfo.pointerxy Tk.root

      => 493
         556
         [493, 556]

--- TkWinfo.pointery(window)
#@todo
    ウィンドウがあるスクリーン上のマウスポインタのY座標を返します。
    マウスポインタがスクリーン上にない場合-1を返します((-どういう場合？-))。

--- TkWinfo.pointerxy(window)
#@todo
    (('[TkWinfo.pointerx, TkWinfo.pointery]'))である配列を返します。

== メソッド:

このモジュールのインスタンスメソッドはすべて、同名のモジュールメソッド
と同じです。ただし、名前に"winfo_"が付く点と引数(({window}))を持つモ
ジュールメソッドは代りに(({self}))を使う点が異なります。

--- TkWinfo#winfo_atom(name)
#@todo
    ((<TkWinfo.atom>))

--- TkWinfo#winfo_atomname(id)
#@todo
    ((<TkWinfo.atomname>))

--- TkWinfo#winfo_cells
#@todo
    ((<TkWinfo.cells>))

--- TkWinfo#winfo_children
#@todo
    ((<TkWinfo.children>))

--- TkWinfo#winfo_classname
#@todo
    ((<TkWinfo.classname>))

--- TkWinfo#winfo_colormapfull
#@todo
    ((<TkWinfo.colormapfull>))

--- TkWinfo#winfo_containing(x, y)
#@todo
    ((<TkWinfo.containing>))

--- TkWinfo#winfo_depth
#@todo
    ((<TkWinfo.depth>))

--- TkWinfo#winfo_exist?
#@todo
    ((<TkWinfo.exist?>))

--- TkWinfo#winfo_fpixels(number)
#@todo
    ((<TkWinfo.fpixels>))

--- TkWinfo#winfo_geometry
#@todo
    ((<TkWinfo.geometry>))

--- TkWinfo#winfo_height
#@todo
    ((<TkWinfo.height>))

--- TkWinfo#winfo_id
#@todo
    ((<TkWinfo.id>))

--- TkWinfo#winfo_interps
#@todo
    ((<TkWinfo.interps>))

--- TkWinfo#winfo_mapped?
#@todo
    ((<TkWinfo.mapped?>))

--- TkWinfo#winfo_manager
#@todo
    ((<TkWinfo.manager>))

--- TkWinfo#winfo_appname
#@todo
    ((<TkWinfo.appname>))

--- TkWinfo#winfo_parent
#@todo
    ((<TkWinfo.parent>))

--- TkWinfo#winfo_widget(id)
#@todo
    ((<TkWinfo.widget>))

--- TkWinfo#winfo_pixels(number)
#@todo
    ((<TkWinfo.pixels>))

--- TkWinfo#winfo_reqheight
#@todo
    ((<TkWinfo.reqheight>))

--- TkWinfo#winfo_reqwidth
#@todo
    ((<TkWinfo.reqwidth>))

--- TkWinfo#winfo_rgb(color)
#@todo
    ((<TkWinfo.rgb>))

--- TkWinfo#winfo_rootx
#@todo
    ((<TkWinfo.rootx>))

--- TkWinfo#winfo_rooty
#@todo
    ((<TkWinfo.rooty>))

--- TkWinfo#winfo_screen
#@todo
    ((<TkWinfo.screen>))

--- TkWinfo#winfo_screencells
#@todo
    ((<TkWinfo.screencells>))

--- TkWinfo#winfo_screendepth
#@todo
    ((<TkWinfo.screendepth>))

--- TkWinfo#winfo_screenheight
#@todo
    ((<TkWinfo.screenheight>))

--- TkWinfo#winfo_screenmmheight
#@todo
    ((<TkWinfo.screenmmheight>))

--- TkWinfo#winfo_screenmmwidth
#@todo
    ((<TkWinfo.screenmmwidth>))

--- TkWinfo#winfo_screenvisual
#@todo
    ((<TkWinfo.screenvisual>))

--- TkWinfo#winfo_screenwidth
#@todo
    ((<TkWinfo.screenwidth>))

--- TkWinfo#winfo_server
#@todo
    ((<TkWinfo.server>))

--- TkWinfo#winfo_toplevel
#@todo
    ((<TkWinfo.toplevel>))

--- TkWinfo#winfo_visual
#@todo
    ((<TkWinfo.visual>))

--- TkWinfo#winfo_visualid
#@todo
    ((<TkWinfo.visualid>))

--- TkWinfo#winfo_visualsavailable(includeids=false)
#@todo
    ((<TkWinfo.visualsavailable>))

--- TkWinfo#winfo_vrootheight
#@todo
    ((<TkWinfo.vrootheight>))

--- TkWinfo#winfo_vrootwidth
#@todo
    ((<TkWinfo.vrootwidth>))

--- TkWinfo#winfo_vrootx
#@todo
    ((<TkWinfo.vrootx>))

--- TkWinfo#winfo_vrooty
#@todo
    ((<TkWinfo.vrooty>))

--- TkWinfo#winfo_width
#@todo
    ((<TkWinfo.width>))

--- TkWinfo#winfo_x
#@todo
    ((<TkWinfo.x>))

--- TkWinfo#winfo_y
#@todo
    ((<TkWinfo.y>))

--- TkWinfo#winfo_viewable
#@todo
    ((<TkWinfo.viewable>))

--- TkWinfo#winfo_pointerx
#@todo
    ((<TkWinfo.pointerx>))

--- TkWinfo#winfo_pointery
#@todo
    ((<TkWinfo.pointery>))

--- TkWinfo#winfo_pointerxy
#@todo
    ((<TkWinfo.pointerxy>))

=end
