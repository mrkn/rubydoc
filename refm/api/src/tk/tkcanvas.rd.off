# $Id: tkcanvas.rd,v 1.14 2001/03/18 12:37:09 arai Exp $
# Class TkCanvas is defined in tkcanvas.rb
=begin
= TkCanvas

キャンバスウィジェットのクラスです。キャンバスウィジェットにはアイテム
ウィジェット(((<TkcItem>))のサブクラスのウィジェット)を張り付けること
が出来ます。

  require "tk"

  TkCanvas.new {
    xscrollincrement 50
    yscrollincrement 50
    scrollregion [10, 10, 500, 500]
    xscrollbar(TkScrollbar.new).grid 'column'=>0, 'row'=>1, 'sticky'=>'ew'
    yscrollbar(TkScrollbar.new).grid 'column'=>1, 'row'=>0, 'sticky'=>'ns'

    TkcOval.new(self, 40, 40, 240, 340)
    grid 'column'=>0, 'row'=>0, 'sticky'=>'nsew'
  }
  TkGrid.columnconfigure Tk.root, 0, 'weight'=>100
  TkGrid.rowconfigure    Tk.root, 0, 'weight'=>100

  Tk.mainloop
=end
以下は、((<Scrollable#xscrollbar>))がなかった頃の例

  require "tk"

  xscrol = yscrol = canvas = nil

  TkFrame.new {
    canvas = TkCanvas.new(self) {
      xscrollcommand {|arg| xscrol.set *arg}
      yscrollcommand {|arg| yscrol.set *arg}
      xscrollincrement 50
      yscrollincrement 50
      scrollregion [10, 10, 500, 500]
      TkcOval.new(self, 40, 40, 240, 340)
      pack 'side'=>'left', 'fill'=>'both', 'expand'=>true
    }

    yscrol = TkScrollbar.new(self) {
      orient "vertical"
      command {|arg| canvas.yview *arg}
      pack 'side'=>'left', 'fill'=>'both'
    }
    pack 'fill'=>'both', 'expand'=>true
  }

  xscrol = TkScrollbar.new {
    orient "horizontal"
    command {|arg| canvas.xview *arg}
    pack 'fill'=>'both'
  }

  Tk.mainloop
=begin

メソッドの説明の中で((*位置*))は、以下のいずれかを指します。

*数字

 数字で指定した文字位置(入力欄の左端は0から始まる)
*"@x,y"

 数字で指定したピクセル位置(入力欄の左端は0から始まる)
*"end"

 入力されている文字の最後の位置
*"insert"

 カーソル位置
*"sel.first"

 selectionで指定された文字列の最初の文字の位置
*"sel.last"

 selectionで指定された文字列の最後の文字の位置

== スーパークラス:

((<TkWindow>))

== インクルードしているモジュール:

((<TkTreatCItemFont>))

((<Tk::Scrollable>))

== privateメソッド:

--- TkCanvas#tagid(tag)

== メソッド:

--- TkCanvas#addtag(tag, mode, *args)

--- TkCanvas#addtag_above(tagOrId, target)

--- TkCanvas#addtag_all(tagOrId)

--- TkCanvas#addtag_below(tagOrId, target)

--- TkCanvas#addtag_closest(tagOrId, x, y, halo=None, start=None)

--- TkCanvas#addtag_enclosed(tagOrId, x1, y1, x2, y2)

--- TkCanvas#addtag_overlapping(tagOrId, x1, y1, x2, y2)

--- TkCanvas#addtag_withtag(tagOrId, tag)

--- TkCanvas#bbox(tagOrId, *tags)

--- TkCanvas#itembind(tag, context, cmd=Proc.new, args=nil)

--- TkCanvas#itembind_append(tag, context, cmd=Proc.new, args=nil)

--- TkCanvas#itembindinfo(tag, context=nil)

--- TkCanvas#canvasx(x, *args)

--- TkCanvas#canvasy(y, *args)

--- TkCanvas#coords(tag, *args)

--- TkCanvas#dchars(tag, first, last=None)

--- TkCanvas#delete(*args)
--- TkCanvas#remove(*args)

--- TkCanvas#dtag(tag, tag_to_del=None)

--- TkCanvas#find(mode, *args)
    指定したアイテムを配列にして返します。

    ((|mode|))には、
    *"above"
    *"all"
    *"below"
    *"closest"
    *"enclosed"
    *"overlapping"
    *"withtag"

--- TkCanvas#find_above(target)
    ((|target|))で指定したアイテムよりも上にあるアイテムを要素に持つ配
    列を返します。

--- TkCanvas#find_all
    すべてのアイテムを配列にして返します。

      require "tk"

      x1 = 10
      y1 = 10
      x2 = 250
      y2 = 200
      x3 = (x2-x1)/2 + x1
      y3 = (y2-y1)/2 + y1
      TkCanvas.new {
        TkcArc.new       self, x1, y1, x2, y2, 'width'=>2.0
        TkcBitmap.new    self, x3, y3, 'bitmap'=>'error'
        TkcImage.new     self, x3, y3, 'image'=> TkPhotoImage.new
        TkcLine.new      self, x1, y1, x2, y2, 'arrow'=>'both'
        TkcOval.new      self, x1, y1, x2, y2
        TkcPolygon.new   self, x3, y1, x2, y3, x3, y2, x1, y3,
               'fill'=>'', 'outline'=>'black'
        TkcRectangle.new self, x1, y1, x2, y2
        TkcText.new      self, x2+20, y2-20, 'text'=>"foo\nbar"
        TkcWindow.new    self, x2, y2, 'window'=>TkButton.new

        puts find_all
        pack
      }

      Tk.mainloop

      => #<TkcArc:0x4045c9c0>
         #<TkcBitmap:0x4045c678>
         #<TkcImage:0x4045c27c>
         #<TkcLine:0x4045be30>
         #<TkcOval:0x4045be08>
         #<TkcPolygon:0x4045b7a0>
         #<TkcRectangle:0x4045b78c>
         #<TkcText:0x4045b228>
         #<TkcWindow:0x4045aea4>

--- TkCanvas#find_below(target)
    ((|target|))で指定したアイテムよりも下にあるアイテムを要素に持つ配
    列を返します。

--- TkCanvas#find_closest(x, y, halo=None, start=None)

--- TkCanvas#find_enclosed(x1, y1, x2, y2)
    引数で指定した矩形の中にあるアイテムを要素に持つ配列を返します。

--- TkCanvas#find_overlapping(x1, y1, x2, y2)
    引数で指定した矩形と重なるアイテムを要素に持つ配列を返します。
    (({find_enclosed}))で見つかるアイテムは、(({find_overlapping}))でも
    見つかります。

--- TkCanvas#find_withtag(tag)

--- TkCanvas#itemfocus(tagOrId=nil)

--- TkCanvas#gettags(tagOrId)

--- TkCanvas#icursor(tagOrId, index)

--- TkCanvas#index(tagOrId, index)

--- TkCanvas#insert(tagOrId, index, string)

--- TkCanvas#itemcget(tagOrId, option)

--- TkCanvas#itemconfigure(tagOrId, key, value=None)

--- TkCanvas#itemconfiginfo(tagOrId, key=nil)

--- TkCanvas#lower(tag, below=None)

--- TkCanvas#move(tag, x, y)

--- TkCanvas#postscript(keys)

--- TkCanvas#raise(tag, above=None)

--- TkCanvas#scale(tag, x, y, xs, ys)

--- TkCanvas#scan_mark(x, y)

--- TkCanvas#scan_dragto(x, y)

--- TkCanvas#select(mode, *args)

--- TkCanvas#select_adjust(tagOrId, index)

--- TkCanvas#select_clear

--- TkCanvas#select_from(tagOrId, index)

--- TkCanvas#select_item

--- TkCanvas#select_to(tagOrId, index)

--- TkCanvas#itemtype(tag)

== 標準オプション:

((<TkObject#background>))

((<TkObject#borderwidth>))

((<TkObject#cursor>))

((<TkObject#highlightbackground>))

((<TkObject#highlightcolor>))

((<TkObject#highlightthickness>))

((<TkObject#insertbackground>))

((<TkObject#insertborderwidth>))

((<TkObject#insertofftime>))

((<TkObject#insertontime>))

((<TkObject#insertwidth>))

((<TkObject#relief>))

((<TkObject#selectbackground>))

((<TkObject#selectborderwidth>))

((<TkObject#selectforeground>))

((<TkObject#takefocus>))

### ((<TkObject#xscrollcommand>))

### ((<TkObject#yscrollcommand>))

== オプション:

--- TkCanvas#closeenough

--- TkCanvas#confine

--- TkCanvas#height

--- TkCanvas#scrollregion

--- TkCanvas#width

--- TkCanvas#xscrollincrement

--- TkCanvas#yscrollincrement

=end
