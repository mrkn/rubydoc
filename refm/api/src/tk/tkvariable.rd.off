# $Id: tkvariable.rd,v 1.11 2000/03/08 15:58:39 arai Exp $
# Class TkVariable is defined in tk.rb
=begin
= TkVariable

Tclの変数をアクセスするためのクラスです。
((-Tclの配列としての振る舞いは仕様が不安定のようです-))

  require "tk"
  p TkVariable.new(0).value                     # => "0"
  p TkVariable.new(1.2).value                   # => "1.2"
  p TkVariable.new(["a", "b"]).value            # => {"0"=>"a", "1"=>"b"}
  p TkVariable.new(1=>"a", 2=>"b").value        # => {"1"=>"a", "2"=>"b"}

== スーパークラス:

((<Object>))

== インクルードしているモジュール:

((<Tk>))

== extendしているモジュール:

((<TkCore>))

== クラスメソッド:

--- TkVariable.callback(args)
    ((<TkVariable#trace>))により登録されたProcオブジェクトを実行します。
    ((|args|)) は、
      [TkVariableのインスタンス, "キー", "操作"]
    である配列です。

--- TkVariable.new(val="")
    値が((|val|))であるTkVariableオブジェクトを生成します。((|val|))が
    ((<Array>)) または((<Hash>))のオブジェクトである場合、生成されたインス
    タンスは((<Tclの配列>))として振る舞います。

== メソッド:

--- TkVariable#wait
    値が変化するまで待ちます。

--- TkVariable#value
    値を返します。(({self}))が((<Tclの配列>))ならば(Tclの配列は連想配列な
    ので) ((<Hash>))として返します。それ以外では常に文字列を返します。

--- TkVariable#value=(val)
    値を((|val|))に設定します。

--- TkVariable#[](index)
    ((|index|))番目の値を返します。
    (({self}))は((<Tclの配列>))でなければなりません。

--- TkVariable#[]=(index, val)
    ((|index|))番目の要素を((|val|))にします。
    (({self}))は((<Tclの配列>))でなければなりません。

--- TkVariable#to_i
    値を数値(((<Fixnum>)))として返します。(現状の(({TkVariable}))は、
    (({Bignum}))を値にすることはできません)

--- TkVariable#to_f
    値を数値(((<Float>)))として返します。

--- TkVariable#to_s
    値を文字列(((<String>)))として返します。

--- TkVariable#to_a
    値を配列(((<Array>)))として返します。

--- TkVariable#==(other)
    値が((|other|))と同じである場合に真です。((|other|))は、
    (({TkVariable})), (({String})), (({Integer})), (({Float})),
    (({Array}))のいずれかです。

--- TkVariable#unset(elem=nil)
--- TkVariable#remove(elem=nil)
    値がTcl配列であるとき、((|elem|))の値を削除します。

--- TkVariable#trace_callback(elem, op)
    ((<TkVariable#trace>))により登録されたProcオブジェクトを引数に(({self})),
    ((|elem|)), ((|op|))を指定して実行します。

      require "tk"

      var = TkVariable.new(0)

      var.trace "rwu", proc {|arg| puts "callback called with #{arg.inspect}"}
      var.trace_callback([], "r")

--- TkVariable#trace(opts, cmd)
    optsは、"r", "w", "u" のいずれか、またはこれらの組み合わせで、それぞれ
    変数が参照、設定、削除 されたときに((<Proc>))オブジェクト ((|cmd|)) を
    呼び出します。2回目以降の呼び出しでは、((|opts|)) が以前の設定と異なれ
    ば((|cmd|))を再設定します。

    ((|cmd|))は、引数に、(({self}))、空配列、"操作" を渡されて呼ばれ
    ます。"配列のキー" は、変数が配列の場合以外は空文字列です。"操作"は、
    "r","w","u" のいずれかです。

      require "tk"

      var = TkVariable.new(0)

      var.trace "rwu", proc {|arg| puts "callback called with #{arg.inspect}"}

      p var.value
      p var.value = 1
      p var.unset

      =>callback called with [<TkVariable: v00000>, [], "r"]
        "0"
        callback called with [<TkVariable: v00000>, [], "w"]
        "1"
        callback called with [<TkVariable: v00000>, [], "u"]
        ""

--- TkVariable#trace_element(elem, opts, cmd)

--- TkVariable#trace_vinfo

--- TkVariable#trace_vinfo_for_element(elem)

--- TkVariable#trace_vdelete(opts, cmd)
    ((<TkVariable#trace>)) で設定した((|cmd|))を削除します。((|opts|))が((<TkVariable#trace>))で
    設定したときと一致しなければ何もしません。

--- TkVariable#trace_vdelete_for_element(elem, opts, cmd)
== 定数:

--- TkVariable::TkVar_CB_TBL
    コールバック関数を記録するハッシュです。内部で利用しています。

--- TkVariable::Tk_VARIABLE_ID
    Tclレベルの変数名をインスタンスに割り当てるために内部で利用されていま
    す。

    Tk_VARIABLE_IDは、配列ですが0番目の要素しか使われていません。
    Rubyにおける定数が値を変更できないためです。

=end
