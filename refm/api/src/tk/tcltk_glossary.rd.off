# $Id: tcltk_glossary.rd,v 1.12 2000/03/12 20:21:02 arai Exp $
=begin
= Tcl/Tk用語集

このマニュアルに出てくるTcl/Tk特有の用語をここで補足する。
特にジョークを書くつもりはない:-)

: Tclのリスト
  Tclではリストは文字列である(というかすべてが文字列なのだが)。空白で区
  切られた各文字列が(リストとして評価されるときに)リストの各要素として扱
  われる。またリストの中で、"{", "}" で囲まれた文字列はリストのリストで
  ある。このあたりを理解するのは難しすぎるような気がする。

  "a" は文字列 "a" であると同時に1つの要素"a"を持つリストでもある。

  "a {b c}" は文字列でもあり、同時に要素"a", "b c" を持つリストでもある
  そして更に、"b c" は、"b", "c"を要素に持つリストでもある。

  ((<TkComm#tk_split_list>))と((<TkComm#list>))は最初の例を文字列とみな
  すかリストとみなすかで違いがある。

    require "tk"
    Tk.module_eval {
      p tk_split_list("a")       # => "a"
      p tk_split_list("a {b c}") # => ["a", ["b", "c"]]

      p list("a")                # => ["a"]
      p list("a {b c}")          # => ["a", ["b", "c"]]
    }

  Tcl で "", {} は単なるクォートで、a, "a", {a} はどれも同じなのだが、こ
  の辺でやめておこう。このマニュアルで着目したいのはTkの方なのだから・・・

: Tclの配列
  Tclでは連想配列で配列を実装している。
  keyは、任意の文字列でその書式は以下

    set array(key) value ;# 設定
    set array(key)       ;# 参照
    puts $array(key)     ;# 参照

  Tclコマンド(({array}))により操作される。

: X Window System
  UNIX におけるウィンドウシステムのデファクトスタンダード。ちょいと難し
  い。単にXと呼ぶこともある。

: アクティブ
  ((<ウィジェットの状態>))

: アトム
  ((<X Window System>))では、名前(文字列)を数値に変換しC言語での管理を楽にす
  る機構がある(らしい)。この数値をアトムという。
  (man page: XInternAtom(3)参照)

: アプリケーション名
  ((<TkCore#appname>))参照

: アンカー
  アンカーには2種類ある。1つは(({-anchor}))オプションでモノの位置を指
  定するものである。もう1つは((<セレクション>))に関するものだが・・・
  なんと説明すれば良いのかわからない(目印？マーク？)((<TkListbox>))参
  照。

: イベント
  ((<仮想イベント>))

: イベントコールバック関数
  ((<イベント>))に対して割り当てられた((<コールバック関数>))。

: イベントシーケンス
  イベントの一連の流れのTcl/Tkでの表現のこと。
  ((%Escape%))を押して、((%a%))を押すことをイベントシーケンスで表すと

   <Escape><a>

  となる。Tcl/Tkではこのイベントシーケンスに対しても、イベントコールバッ
  ク関数を登録する事が出来る。

    #!/usr/local/bin/wish
    bind . <Escape><a> { puts "%X %Y" }

  Ruby/Tkでは、これをイベント識別子の配列で表す(((<TkBindCore#bind>))参照)
  (実装は、((<TkComm#tk_event_sequence>))が行っている)

: ウィジェット
  ボタンやラベルなどの部品のこと。Tcl/Tkにおいてはウィンドウのことでもあ
  る。このマニュアルでは、ウィジェットのことをウィンドウと呼んだり、その
  逆だったりする。書き分けているようでいてあまり意味はない。

: ウィジェットクラス名
  Tclでも各ウィジェットにはクラスが存在し、それぞれ名前がある

    button .b
    puts [winfo class .b]

    => Button

  ((<イベントコールバック関数>))や、((<オプション>))をウィジェット全体に
  指定するためにこのクラス名が使われる。

  Ruby/Tkでこの名前を得るにはTcl/Tkの例と同様に((<TkWinfo.classname>))メ
  ソッドを使用する(方法は他にもある(({to_eval}))、
  (({TkWindow::WidgetClassName})))。

: ウィジェットコマンド
  ウィジェットの動作を変更するコマンドの総称。
  (({configure}))などがこれにあたる。

  Tclスクリプトでは、
    ウィジェットパス ウィジェットコマンド 引数
  の形式で使用する。

  以下のTcl/Tkスクリプトでは、(({flash}))がウィジェットコマンド。

    button .b1 -text "button1"
    .b1 flash

  Ruby/Tkでは、ウィジェットコマンドはそのウィジェットのメソッドである。

    b1 = Button.new("text"=>"button")
    b1.flash

: ウィジェットの状態
  ウィジェットは(({state}))オプションによってその状態を変更することがで
  きる。ウィジェットの状態は以下の3つ

  *normal
  *active
  *disabled

  ((<TkButton#state>))など

: ウィジェットパス
  個々のウィジェットの識別名。Tcl/TKでは、ウィジェットのインスタンスを

    .top.frame.button

  のように階層構造で表す。このマニュアルではこれをウィジェットパスと呼ん
  でいる(単に「パス」と呼ぶこともある)。

  ((<TkObject#path>)) は、このパスを返すメソッド。

    require "tk"

    TkToplevel.new {
      TkFrame.new(self) {
        b1 = TkButton.new(self, "text"=>"button").pack
        p b1.path
      }.pack
    }
    Tk.mainloop

    => ".w0000.w0001.w0002"

  Ruby/Tkプログラミングでこのパスが表に出てくることはほとんどない(ハズ)。

: ウィジェット階層
  ウィジェットの親子関係のこと。階層構造になっていることを強調した言葉。
  ((-なのか？-))

=end
### (自信がないのでコメント)
### ウィジェットにはウィジェットの親子関係の他に配置に関する主従関係がある
### ほとんどの場合同じ意味だと思うが混乱しないように。(間違われやすいと思
### うがtoplevelは普通ルートウィジェットの子である)。
### 著者は混乱しているかも知れない。信じないこと。
=begin

: オプション
  ウィジェットの色や形などの「属性」のこと。Tcl/Tkではこのような属性を
  ((<クラスコマンド>))や((<ウィジェットコマンド>))(({configure}))の引数
  で設定する。オプション名は他のオプション名と一意である限り省略名を使用
  できる("activeforeground" -> "activef")。

  Ruby/Tkでは、オプションはメソッドとして実装されている。また(({new}))
  の第2引数のハッシュでも指定可能。

: オプションデータベース
  ((<X Window System>))における((<リソース>))のようなもの((-？-))
  (({option}))コマンドで操作される(Ruby/Tkにおいては、((<TkOption>))モ
  ジュール)。

: キーシンボル
  ((<X Window System>))では、キーにはそのシンボル名がついている。ファ
  イル(({/usr/include/X11/keysymdefs.h}))や、コマンド(({xev}))、
  (({xmodmap -pke}))などでしらべることができる。(普通、(({"XK_"}))を取
  り除いたものをキーシンボルと呼んでいる)

: キーボードフォーカス
  文字の入力などキーボードによりイベントを発生させることが可能な状態のこ
  と。フォーカスを設定するには(({focus})) コマンドを使用する。これは
  Ruby/Tkでは((<Tk.focus>))メソッド、((<TkWindow#focus>))メソッドなどに
  あたる。

  またデフォルトのキーバインドでは((%TAB%))キーでフォーカスを切り替える
  ことができる。

: クラス
  Tcl/Tkは、オブジェクト指向アプローチを意識した言語なのでクラスが存在
  する(Tcl自体はそうではない)、((<オプション>))の指定とも密接に係わる。
  ((<ウィジェットクラス名>))

: クラスコマンド
  ウィジェットを生成するためのTclコマンド。
    クラスコマンド ウィジェットパス [オプション 値] [オプション 値] ...
  といった形式で使用する。

  (({button}))などがこれにあたる。

    button .b1 -text "button1"

  クラスコマンドは、Ruby/Tkではウィジェットクラス.new にあたる。

    TkButton.new(nil, "text"=>"button1")

: クリップボード
  ((<セレクション>))のエライやつ。主な(有名な)用途としてはテキストのカッ
  ト＆ペーストである。セレクションとの違いが何なのかはよくわからない。

: コールバック
: コールバック関数
  Rubyで((<Proc>))オブジェクトのこと。

  厳密な言葉の定義はよくわからないが、関数をデータとして保持し、後から
  そのデータを使って呼び出される関数の事をこのように呼ぶようである。
  ((<イベントコールバック関数>))

: ジオメトリ
  ウィンドウのサイズや表示位置の情報、またはそれらを表す文字列(書式は
  (('"XxY+width+height"')))。

: ジオメトリマネージャ
  ウィジェットの配置を管理するもの。Tcl/Tkでは
  (({pack})),(({place})),(({grid}))コマンドによってウィジェットの配置を
  管理する。

: セレクション
  ウィジェット間／アプリケーション間でデータの受渡しを行うためのXの機構。
  主な(有名な)用途としてはテキストのカット＆ペーストである。

  ((<クリップボード>))

: 選択
  ((<セレクション>))を設定すること。

: タイトル
  タイトルバーに表示される文字列。

: タグリスト
  すべてのウィジェットはタグリストを持っており、((<イベント>))が発生した
  ときに実行する((<コールバック関数>))をこのリストから探す。

  例えば、デフォルトではボタンウィジェットは

    button .b1
    puts [bindtags .b1]

    => .b1 Button . all

  のようなタグリストを持つ((({bindtags}))はタグリストを参照／設定するコ
  マンド)。イベントコールバック関数は上記の各タグに対して定義されている
  が、このようなタグリストがあるのはイベントに対して

  *ウィジェット固有の動作
  *ウィジェットクラスで共通の動作
  *ウィンドウ内で共通の動作
  *すべてに共通の動作

  を定義するためである。タグは任意の文字列なので独自にタグを定義してタ
  グリストに加えることも出来る。このことは、

  *(自分で勝手に決めた)あるグループに共通の動作

  を定義することになる。

: ディスエーブル
  ((<ウィジェットの状態>))

: トランジェントウィンドウ
  トランジェントウィンドウの振る舞いはウィンドウマネージャの実装に依存す
  るが、普通

  *サイズや位置に関してウィンドウマネージャが制御しない。
  *タイトルバーがつかない。
  *マスターがアイコン化されると、一緒にアイコン化(またはアンマップ)される。

  などの特性を持つ。

  transient(一時的な)が示すようにポップアップメニューなどで使用される。

: パス
  ((<ウィジェットパス>))

: フォーカス
  ((<キーボードフォーカス>))

: プロシージャ
  手続き。C言語で言うところの関数。Tclのプロシージャ定義は、

   proc name {arg,...} {
     ...
   }

  と書く。

: マップ
  ((<X Window System>))の用語。単に表示することだと思えばよい。

  あるウィジェットをマップしていても、先祖のウィジェットすべてがマップさ
  れていなければ表示されない。

: リソース
  ((<X Window System>))においてリソースには2つの意味がある。1つは、ファ
  イル(({.Xdefaults}))、(({.Xresources}))などで設定されるウィンドウの
  属性のことであり、1つは、X が管理する資源(ウィンドウやフォントなどが
  これに該当する)のこと。

: リソースID
  ((<X Window System>)) では、ウィンドウなどの((<リソース>))はリソースID
  と呼ばれる識別子で管理されている(実際にはポインタだと思うが詳しいこと
  は知らない)。

  Ruby/Tkでこれを意識しなければならない状況になることはまずないと思う。

: ルートウィジェット
  Tcl/Tkにおける((<ウィジェット階層>))の最上位にあるウィジェット。
  ((<ウィジェットパス>))で"."のこと。本家Tcl/Tkの用語では、メインウィ
  ンドウと呼ぶが((<TkRoot>))クラスとの名前の連想からこのマニュアルでは
  この呼び名で統一している。

: 仮想イベント
  ((<イベント>))

: 仮想画面

: 距離
: 距離の単位
  ((-dummy-))
  *指定なし

   ピクセル
  *"c"

   センチメートル
  *"m"

   ミリメートル
  *"i"

   インチ
  *"p"

   ポイント(1/72インチ)

  ((<TkWinfo.pixels>))

: 入力フォーカス
  ((<キーボードフォーカス>))

=end
