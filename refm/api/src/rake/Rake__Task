= class Rake::Task

タスクは Rakefile における基本単位です。

タスクは一つ以上の関連するアクションと事前タスクを持ちます。
タスクを実行すると、まず始めに全ての事前タスクを一度だけ実行してから
自身のアクションを実行します。

タスクは通常 [[m:Kernel#task]], [[m:Kernel#file]] という便利なメソッドを使用して定義します。

== Public Instance Methods

--- actions -> Array
#@todo

自身に関連するアクションのリストを返します。

--- add_description(description)
#@todo

自身に詳細説明を追加します。

--- application -> Rake::Application
#@todo

自身を所有している [[c:Rake::Application]] のインスタンスを返します。

--- application=(app)
#@todo

自身を所有している [[c:Rake::Application]] のインスタンスをセットします。

@param app 自身を所有しているアプリケーションを指定します。

--- arg_description
#@todo

--- arg_names -> Array
#@todo

自身のパラメータ名のリストを返します。

--- clear -> self
#@todo

自身に登録されているアクションと事前タスクをクリアします。

--- clear_actions -> self
#@todo

自身に登録されているアクションをクリアします。

--- clear_prerequisites -> self
#@todo

自身に登録されている事前タスクをクリアします。

--- comment -> String
#@todo

自身の短いコメントを返します。

--- comment=(comment)
#@todo

自身のコメントをセットします。

与えられた文字列が 50 文字を越える場合や複数行である場合は文字列を切り詰めます。

@param comment コメントをあらわす文字列を指定します。

--- enhance(deps = nil){ ... }  -> self
#@todo

自身に事前タスクとアクションを追加します。

--- execute(args = nil)
#@todo

自身に関連付けられているアクションを実行します。

--- full_comment -> String
#@todo

自身のコメントを全て返します。

--- inspect -> String
#@todo

自身の情報を人間に読める形式で返します。

--- investigation -> String
#@todo

自身の詳しい内部状態を文字列化して返します。

このメソッドはデバッグに便利です。

--- invoke(*args)
#@todo

必要であれば自身を実行します。最初に事前タスクを実行します。

--- name -> String
#@todo

ネームスペースを含むタスクの名前を返します。

--- needed? -> true
#@todo

このタスクが必要ならば真を返します。

--- prerequisites -> Array
#@todo

事前タスクのリストを返します。

--- reenable -> false
#@todo

自身をもう一度実行出来るようにします。

--- scope
#@todo

--- set_arg_names(args)
#@todo

自身のパラメータの名前のリストをセットします。

@param args シンボルのリストを指定します。

--- source -> String
#@todo

[[m:Rake::Task#sources]] の最初の要素を返します。

--- sources -> Array
#@todo

自身が依存するファイルのリストを返します。

--- sources=(sources)
#@todo

自身が依存するファイルのリストをセットします。

@param sources 自身が依存するファイルのリストを指定します。

--- timestamp -> Time
#@todo

自身のタイムスタンプを返します。

基本的なタスクは現在時刻を返しますが、高度なタスクはタイムスタンプを
計算して返します。

--- to_s -> String
#@todo

自身の名前を返します。

== Singleton Methods

--- new(task_name, app)

与えられたタスク名とアプリケーションで自身を初期化します。

このメソッドで作成したタスクは、アクションや事前タスクを持っていません。
それらを追加する場合は [[m:Rake::Task#enhance]] を使用してください。

@see [[m:Rake::Task#enhance]]

--- [](task_name) -> Rake::Task
#@todo

与えられた名前のタスクを返します。

与えられた名前のタスクが存在しない場合は、ルールからタスク名を合成しようとします。
ルールからタスク名を合成出来なかったが、与えられたタスク名にマッチするファイルが存在する
場合は、ファイルタスクがアクションや事前タスク無しで存在していると仮定します。

@param task_name タスクの名前を指定します。

--- clear
#@todo

タスクリストをクリアします。

このメソッドはユニットテスト用です。

--- create_rule(*args){ ... } -> Rake::Task
#@todo

タスクを合成するためのルールを作成します。

--- define_task(*args){ ... } -> Rake::Task
#@todo

与えられたパラメータと省略可能なブロックを用いてタスクを定義します。

同名のタスクが存在する場合は、事前タスクとアクションを既に存在するタスクに追加します。

@param args パラメータを指定します。

--- scope_name(scope, task_name) -> String
#@todo

与えられたスコープとタスク名をコロンで連結して返します。

--- task_defined?(task_name) -> bool
#@todo

与えられたタスク名が既に定義されている場合は真を返します。
そうでない場合は偽を返します。

@param task_name タスク名を指定します。

--- tasks -> Array
#@todo

定義されているタスクのリストを返します。
