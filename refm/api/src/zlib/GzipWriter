= class Zlib::GzipWriter < Zlib::GzipFile

[[lib:zlib]]

gzip 形式の圧縮ファイルを書き出すラッパークラス。
IO クラスのインスタンス (又は IO クラスのインスタンスと同じメソッドを
持つオブジェクト) と関連付けて使用します。

  Zlib::GzipWriter.open('hoge.gz') {|gz|
    gz.write 'jugemu jugemu gokou no surikire...'
  }
  
  f = File.open('hoge.gz', 'w')
  gz = Zlib::GzipWriter.new(f)
  gz.write 'jugemu jugemu gokou no surikire...'
  gz.close

なお、Ruby の finalizer の制約のため、GzipWriter オブジェクトは必ず
[[m:Zlib::GzipWriter#close]] 等を用いてクローズしてください。
そうしなければフッターを書き出すことができず、壊れた gzip ファイルを
生成してしまう可能性があります。

== Class Methods

--- new(io[, level[, strategy]])
#@todo

io と関連付けられた GzipWriter オブジェクトを作成します。
level, strategy は [[m:Zlib::Deflate.new]] と同じです。
GzipWriter オブジェクトは io に gzip 形式のデータを
逐次ライトします。io には少なくとも、IO#write と
同じ動作をする write メソッドが定義されている必要があります。

--- wrap(io[, level[, strategy]]) {|gz| ... }
#@todo

io と関連付けられた GzipWriter オブジェクトを作成し、
それを引数としてブロックを実行します。
ブロックの実行が終了すると、GzipWriter オブジェクトは自動的に
クローズされます。関連付けられている IO オブジェクトまで
クローズしたくない時は、ブロック中で [[m:Zlib::GzipFile#finish]]
メソッドを呼び出して下さい。

--- open(filename[, level[, strategy]])
--- open(filename[, level[, strategy]]) {|gz| ... }
#@todo

filename で指定されるファイルを gzip 圧縮データの
書き出し用にオープンします。GzipWriter オブジェクトを返します。
その他詳細は [[m:GzipWriter.new]] や [[m:GzipWriter.wrap]] と
同じです。


== Instance Methods

--- close
--- finish
#@todo

フッターを書き出し、GzipWriter オブジェクトをクローズします。close と
finish の違いは [[m:Zlib::GzipFile#close]], [[m:Zlib::GzipFile#finish]] を
参照して下さい。

注意: Ruby の finalizer の制約のため、GzipWriter オブジェクトは
必ずクローズしてください。そうしなければフッターを書き出すことが
できず、壊れた gzip ファイルを生成してしまう可能性があります。

--- pos
--- tell
#@todo

現在までに圧縮したデータの長さの合計を返します。
ファイルポインタの位置ではないことに注意して下さい。

--- << str
--- putc(ch)
--- puts(obj...)
--- print(arg...)
--- printf(format, arg...)
--- write(str)
#@todo

IO クラスの同名メソッドと同じ。

--- flush([flush])
#@todo

まだ書き出されていないデータをフラッシュします。
flush は [[m:Zlib::Deflate#deflate]] と同じです。
省略時は Zlib::SYNC_FLUSH が使用されます。
flush に Zlib::NO_FLUSH を指定することは無意味です。

--- mtime=(time)
#@todo

gzip ファイルのヘッダーに記録する最終更新時間を指定します。
[[m:Zlib::GzipWriter#write]] 等の書き込み系メソッドを
呼んだ後で指定しようとすると [[c:Zlib::GzipFile::Error]] 例外が
発生します。

--- orig_name=(filename)
#@todo

gzip ファイルのヘッダーに記録する元ファイル名を指定します。
[[m:Zlib::GzipWriter#write]] 等の書き込み系メソッドを
呼んだ後で指定しようとすると [[c:Zlib::GzipFile::Error]] 例外が
発生します。

--- comment=(string)
#@todo

gzip ファイルのヘッダーに記録するコメントを指定します。
[[m:Zlib::GzipWriter#write]] 等の書き込み系メソッドを
呼んだ後で指定しようとすると [[c:Zlib::GzipFile::Error]] 例外が
発生します。
