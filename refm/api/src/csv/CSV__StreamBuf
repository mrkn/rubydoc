#@since 1.8.0

= class CSV::StreamBuf
ストリームバッファを扱うクラス。

== Constants

--- BufSize
ストリームバッファの1回の読み込みデータサイズ
1024 * 8 = 8192

== Class Methods

--- new -> self
[[c:CSV::StreamBuf]]オブジェクトを生成します。

注意:
 * このメソッドを用いて[[c:CSV::StreamBuf]]クラスのオブジェクトを生成しないで下さい。
   必ず、[[c:CSV::StreamBuf]]クラスを継承したクラスからインスタンス生成してください。
 * 本メソッドからreadメソッドを呼び出すため、派生クラスではインスタンスメソッドreadを定義してください。

== Instance Methods

--- [](idx[, n = nil]) -> String
ストリームバッファから部分文字列を取り出します。

@param idx 取り出す部分文字列のスタート位置
@param n 部分文字列のサイズ

--- drop(n) -> Fixnum
ストリームからデータを削除します。

引数で与えられたサイズのデータをストリームの先頭から削除します。
実際に削除されたデータサイズを戻り値として返します。

@param n 削除するデータのサイズ

注:
 返り値として返す値は実際に削除したデータサイズと異なることがあることに注意すこと。

--- is_eos? -> bool
ストリームの終端かどうかをTrue/Falseで返します。

== Protected Instance Methods

--- terminate -> nil
ストリームの解放処理を行います。
本メソッドはその他のメソッドの内部から呼ばれます。

--- read(size) -> []
NotImplementedError例外を発生させます。

[[c:CSV::StreamBuf]]クラスを継承した場合は必ず、readメソッドをオーバーライドして下さい。
その際の注意点として読み込み時にEnfOfStreamを検出した場合にはnilを返却してください。

== Private Instance Methods

--- buf_size(idx) -> Fixnum
idxで指定したバッファのデータサイズを取得します。

@param idx サイズを取得するデータのインデックス

--- add_buf -> bool
ストリームバッファからデータを読み込み、True/Falseを返します。

@return データの読み込みに成功した場合にはTrueを、読み込み失敗した場合にはFalseを返します。

--- rel_buf -> bool
現在処理中のストリームバッファを解放する。

@return 次のバッファが存在する場合にはTrueを、読み込み済みのバッファが存在しない場合にはFalseを返します。

--- idx_is_eos?(idx)
引数idxで指定した位置がストリームの終端かどうかを判定します。

@param idx 判定を行う位置インデックス

#@end
