#@if (version >= "1.8.0")
= class OpenSSL::SSL::SSLSocket < Object
include Enumerable
include SocketForwarder 
#@todo
#@# IO と同じメソッドはこのモジュールで定義されているので、下のいくつかのエントリーはこちらにまわす

SSLSocket クラス

=== 例

SSL/TLS サーバに接続して write します。

  require 'socket'
  require 'openssl'
  include OpenSSL
  
  soc = TCPSocket.new('www.example.com', 443)
  ssl = SSL::SSLSocket.new(soc)
  ssl.connect
  ssl.write('hoge')
  print ssl.peer_cert.to_text
  ssl.close
  soc.close

== Class Methods

--- new(socket)
--- new(socket, context)

SSLSocket オブジェクトを生成します。socket には [[c:TCPSocket]] オブジェクトを与えます。context には [[c:OpenSSL::SSL::SSLContext]] オブジェクトを与えます。

== Instance Methods

--- io
--- to_io

SSLSocket オブジェクトを生成する時に渡されたソケットを返します。

--- context

SSLSocket オブジェクトを生成する時に渡されたコンテクストを返します。
[[C:openSSL::SSL::SSLContext]] オブジェクトです。

--- sync_close
--- sync_close=(bool)

SSLSocket を close するときに TCPSocket も close するかどうかを設定します。

--- peer_cert

接続相手の X509 証明書 [[c:OpenSSL::X509::Certificate]] オブジェクトを返します。
検証結果は別途知る必要があります。

#@since 1.8.1
--- peer_cert_chain

接続相手の証明書チェーンすなわち [[c:OpenSSL::X509::Certificate]] オブジェクトの配列を返します。接続相手の証明書からルート CA の証明書までのリストで、順序は以下の通りです。

  [接続相手の証明書, 下位CAの証明書,... 中間CAの証明書]
#@end

--- state

現在の状態を 6 文字の文字列で返します。

--- cipher

現在実際に使われている暗号の情報を配列で返します。 TLS/SSL ハンドシェイクが行われる前の接続されていない状態では nil を返します。
返される配列の形式は以下の例のように [暗号名, TLS/SSLのバージョン, 鍵長, アルゴリズムで使われる bit 数] となります。

  ["DES-CBC3-SHA", "TLSv1/SSLv3", 168, 168]

#@since 1.8.2
--- pending

読み取り可能なバイト数を返します。
#@end

--- <<

[[m:IO#<<]] と同様です。

--- accept

TLS/SSL クライアントから接続を受け付け、 TLS/SSL ハンドシェイクを実行し、自分自身を返します。

#@if (version < "1.8.1")
--- addr

[[m:IPSocket#addr]] と同様です。
#@end

--- close

接続を閉じます。flush を呼んでから閉じます。

#@if (version < "1.8.1")
--- closed?

close していたら true を返します。
#@end

--- connect

接続相手との TLS/SSL ハンドシェイクを実行します。

--- do_not_reverse_lookup=(bool)

[[m:BasicSocket#do_not_reverse_lookup]] と同様です。

--- each

[[m:IO#each]] と同様です。

--- each_byte

[[m:IO#each_byte]] と同様です。

--- eof?

[[m:IO#eof?]] と同様です。

--- fcntl(cmd[, arg])

[[m:IO#fcntl]] と同様です。

--- flush

[[m:IO#flush]] と同様です。

--- getc

[[m:IO#getc]] と同様です。

--- gets([rs])

[[m:IO#gets]] と同様です。

--- getsockopt(level, optname)

[[m:BasicSocket#getsockopt]] と同様です。

#@if (version < "1.8.1")
--- peeraddr

[[m:IPSocket#peeraddr]] と同様です。
#@end

#@since 1.8.3
--- post_connection_check
#@end

--- print([arg[, ...]])

[[m:IO#print]] と同様です。

--- printf(format[, arg[, ...]])

[[m:IO#printf]] と同様です。

--- puts([obj[, ...]])

[[m:IO#puts]] と同様です。

--- read([length[, buf]])

[[m:IO#read]] と同様です。

--- readchar

[[m:IO#readchar]] と同様です。

--- readlines([rs])

[[m:IO#readlines]] と同様です。

--- setsockopt(level, optname, optval)

[[m:BasicSocket#setsockopt]] と同様です。

#@since 1.8.1
--- sync_close
--- sync_close=
#@end

--- sysclose

接続を閉じます。相手に'close notify'を送ります。

--- sysread(length[, buf])

[[m:IO#sysread]] と同様です。

--- syswrite(string)

[[m:IO#syswrite]] と同様です。

--- ungetc(char)

[[m:IO#ungetc]] と同様です。

--- write(str)

[[m:IO#write]] と同様です。

== Constants

--- BLOCK_SIZE

#@end
