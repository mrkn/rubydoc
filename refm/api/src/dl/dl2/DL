= module DL


UNIX の [[man:dlopen(3)]] や Windows の LoadLibrary() 
などのダイナミックリンカへの低レベルなインターフェースを提供するモジュールです。

=== 使い方

通常は dl/import ライブラリを require して [[c:DL::Importer]] モジュールを使用します。
[[c:DL]] モジュール自体はプリミティブな機能しか提供していません。
[[c:DL::Importer]] モジュールは以下のようにユーザが定義したモジュールを拡張する形で使います。

  require "dl/import"
  module M
    extend DL::Importer
  end

以後、このモジュールで dlload や extern などのメソッドが使用できるようになります。
以下のように dlload を使ってライブラリをロードし、
使用したいライブラリ関数に対して extern メソッドを呼んで
ラッパーメソッドを定義します。

  require "dl/import"
  module M
    extend DL::Importer
    dlload "libc.so.6","libm.so.6"
    extern "int strlen(char*)"
  end
  # Note that we should not include the module M from some reason.
  
  p M.strlen('abc') #=> 3

M.strlen を使用することで、ライブラリ関数 strlen() を使用できます。
与えられた関数名の最初の文字が大文字なら、
定義されるメソッド名の最初の文字は小文字になります。

==== 構造体を扱う

構造体も扱うことができます。たとえば [[man:gettimeofday(2)]]
を使って現在時刻を得たい場合は以下のとおりです。

 require 'dl/import'
 module M
   extend DL::Importer
   dlload "libc.so.6"
   extern('int gettimeofday(void *, void *)')
   Timeval = struct( ["long tv_sec",
                      "long tv_usec",])
 end
 
 timeval = M::Timeval.malloc
 e = M.gettimeofday(timeval, nil)

 if e == 0
  p timeval.tv_sec #=> 1173519547
 end

上の例で、メモリの割り当てに M::Timeval.new ではなく
M::Timeval.malloc を使用していることに注意してください。

==== コールバック

以下のようにモジュール関数 bind を使用したコールバックを定義できます。

  require 'dl/import'
  module M 
    extend DL::Importer
    dlload "libc.so.6"
    QsortCallbackWithoutBlock = bind("void *qsort_callback(void*, void*)", :temp)
    QsortCallback             = bind("void *qsort_callback2(void*,void*)"){|ptr1,ptr2| ptr1[0] <=> ptr2[0]}
    extern 'void qsort(void *, int, int, void *)'
  end

  buff = "3465721"
  M.qsort(buff, buff.size, 1, M::QsortCallback)
  p buff #=>   "1234567"

  M.qsort(buff, buff.size, 1, M::QsortCallbackWithoutBlock){|ptr1,ptr2| ptr2[0] <=> ptr1[0]}
  p buff #=>   "7654321"

ここで M::QsortCallback はブロックを呼ぶ [[c:DL::Function]] オブジェクトです。

== Module Functions

--- dlopen(lib)                    -> DL::Handle
--- dlopen(lib) {|handle| ... }    -> DL::Handle

ダイナミックライブラリ lib をロードし、
[[c:DL::Handle]] として返します。

ブロックが与えられている場合は、[[c:DL::Handle]] 引数として
与えられたブロックを実行します。[[c:DL::Handle]] を返します。

[[m:DL::Handle.new]](lib) と等価です。

@param lib ロードしたいライブラリを文字列で与えます。

@raise RuntimeError [[man:dlopen(3)]] に失敗した時に発生します。

--- malloc(size)    -> Integer

size バイトのメモリ領域を確保し、その領域を指す整数を返します。

@param size 必要なメモリ領域のサイズを整数で指定します。

--- realloc(addr, size)   -> Integer
#@todo

--- free(addr)      -> nil

指定された addr が指すメモリ領域を開放します。

必ず [[m:DL.malloc]] が返した整数を addr に与えなければいけません。
そうでない場合、ruby インタプリタが異常終了します。

@param addr [[m:DL.malloc]] で確保されたメモリ領域を指す整数を指定します。

例:
  require 'dl'
  addr = DL.malloc(10)
  p addr               #=> 136942800
  DL.free(addr)

--- dlwrap(addr)    -> Integer
#@todo

@param addr 

--- dlunwrap(addr)  -> Integer
#@todo

== Constants

--- CdeclCallbackProcs

--- CdeclCallbackAddrs

--- StdcallCallbackProcs

--- StdcallCallbackAddrs

--- ALIGN_CHAR
--- ALIGN_DOUBLE
--- ALIGN_FLOAT
--- ALIGN_INT
--- ALIGN_LONG
--- ALIGN_LONG_LONG
--- ALIGN_SHORT
--- ALIGN_VOIDP
--- BUILD_RUBY_PLATFORM
--- BUILD_RUBY_VERSION
--- DLSTACK_SIZE
--- MAX_CALLBACK
--- NULL
--- RTLD_GLOBAL
--- RTLD_LAZY
--- RTLD_NOW
--- RUBY_FREE
--- SIZEOF_CHAR
--- SIZEOF_DOUBLE
--- SIZEOF_FLOAT
--- SIZEOF_INT
--- SIZEOF_LONG
--- SIZEOF_LONG_LONG
--- SIZEOF_SHORT
--- SIZEOF_VOIDP
--- TYPE_CHAR
--- TYPE_DOUBLE
--- TYPE_FLOAT
--- TYPE_INT
--- TYPE_LONG
--- TYPE_LONG_LONG
--- TYPE_SHORT
--- TYPE_VOID
--- TYPE_VOIDP


= class DL::DLError < StandardError

= class DL::DLTypeError < StandardError
