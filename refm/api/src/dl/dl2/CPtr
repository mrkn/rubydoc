= class DL::CPtr < Object

メモリ領域を表すクラスです。C 言語のポインタに相当します。 

== Singleton Methods

--- new(addr)                     -> DL::CPtr
--- new(addr, size, free = nil)   -> DL::CPtr

与えられた addr が指すメモリ領域を表す CPtr オブジェクトを生成して返します。

size を指定した場合、アドレス addr に確保されているメモリ領域のサイズは
size であると仮定されます。GC は free 関数を使用してメモリを解放します。

@param addr 生成する CPtr オブジェクトが指すアドレスを整数で指定します。

@param size 生成する CPtr オブジェクトが指すメモリ領域のサイズを整数で指定します。

@param free 生成する CPtr オブジェクトの free 関数を [[c:DL::CFunc]] オブジェクトで指定します。

--- malloc(size, free = nil)   -> DL::CPtr

与えられた長さ size のメモリ領域を確保し、それを表す CPtr オブジェクトを生成して返します。

@param size 確保したいメモリ領域のサイズを整数で指定します。

@param free 返り値にセットされる free 関数を [[c:DL::CFunc]] オブジェクトで指定します。

--- [](val)       -> DL::CPtr
--- to_ptr(val)   -> DL::CPtr
#@todo 

与えられた val を表す CPtr オブジェクトを生成して返します。
val が文字列の場合は文字列が格納されているメモリ領域を CPtr オブジェクトを返します。
それ以外の場合は val.to_ptr を呼んで返します。

== Instance Methods

--- +(n)   -> DL::CPtr
#@todo 

自身のアドレスに n バイトを足した新しい CPtr オブジェクトを返します。

この返り値には、free 関数がセットされていません。

@param n アドレスの増分を整数で指定します。


--- ptr   -> DL::CPtr
--- +@    -> DL::CPtr
#@todo 

自身の指す値を CPtr にして返します。
自身の指す値はポインタであると仮定します。
C 言語におけるポインタのポインタに対する間接参照 *p と同じです。 

この返り値には、free 関数がセットされていません。

--- -(n)   -> DL::CPtr
#@todo

自身のアドレスから n バイトを引いた新しい CPtr オブジェクトを返します。

この返り値には、free 関数がセットされていません。

@param n アドレスの差分を整数で指定します。

--- ref   -> DL::CPtr
--- -@    -> DL::CPtr
#@todo 

自身を指す CPtr オブジェクトを返します。
C 言語におけるポインタへのアドレス演算子の適用 &p と同じです。

この返り値には、free 関数がセットされていません。

--- <=>(other)    -> Integer
#@todo 

ポインタの指すアドレスの大小を比較します。

--- eql?(other)     -> bool
--- ==(other)       -> bool
#@todo 

ポインタの指すアドレスが同一かどうかを判定します。

--- [](offset, len = 0)     -> String

自身の指すアドレスに offset バイトを足したメモリ領域の先頭 len バイトを複製し、
文字列として返します。(self + offset).to_s(len) と同等です。
offset + len が自身のサイズより小さいかを検証しません。

@param offset 値を得たい領域の先頭のアドレスまでのオフセットを整数で与えます。

@param len 値を得たい領域のサイズを指定します。


--- []=(offset, n)
--- []=(offset, len, v) 
#@todo

自身の指すアドレスに offset バイトを足したメモリ領域の先頭 len バイトに
文字列 str をコピーします。str のサイズが len より小さい場合は、残りの領域を 0 で埋めます。
コピー先の領域が len より大きいか検証しません。

@param offset 書き換えたいメモリ領域のオフセットを整数で与えます。

@param len 書き換えたいメモリ領域のサイズを整数で指定します。

@param v メモリ領域にセットしたいバイト列を文字列で指定します。

--- free     -> DL::CFunc

GC がメモリを解放するのに使用する [[c:DL::CFunc]] オブジェクトを返します。

これは普通 [[m:CPtr#free=]] や [[m:CPtr.new]] によって設定されます。

--- free=(cfunc)
#@todo 

GC が自身を解放するのに使う関数を [[c:DL::CFunc]] で指定します。

@param cfunc 自身を解放するのに使われる関数を [[c:DL::CFunc]] で指定します。

--- inspect
#@todo 

--- null?    -> bool
#@todo 

自身が NULL なら true を返します。そうでないなら false を返します。

--- size        -> Integer
--- size=(s)
#@todo 

自身の指す領域のサイズを返します。
s を指定した場合は、自身の指す領域のサイズは s であると設定します。
ただし、自身が指すメモリのサイズが s になるように再割り当てはしません。

@param s 自身が指すメモリのサイズを整数で指定します。

--- to_i    -> Integer
#@todo 

自身が指すアドレスを整数で返します。

--- to_s         -> String
--- to_s(len)    -> String
#@todo 
自身が指す領域から長さ len の文字列を複製して返します。

len を省略した場合は、文字列の終りは '\0' であると仮定して、
[[man:strlen(3)]] を使って長さを算出します。

@param len 文字列の長さを整数で指定します。

--- to_str
#@todo 

--- to_value    -> Object
#@todo 

自身はヒープに確保された Ruby のオブジェクトを指すポインタであると仮定して、
自身が指すオブジェクトを返します。

例:

 require 'dl/import'
 
 s = 'abc'
 i = DL.dlwrap(s)
 cptr = DL::CPtr.new(i)
 p cptr.to_value   #=> "abc"

