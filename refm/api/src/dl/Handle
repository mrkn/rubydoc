= class DL::Handle < Object

オープンされたダイナミックライブラリを表すクラスです。
[[man:dlopen(3)]] が返すハンドラーのラッパーです。

== Class Methods

--- new(lib)                    -> DL::Handle
--- new(lib) {|handle| ... }    -> DL::Handle
#@todo

ライブラリ lib をオープンし、Handle オブジェクトとして返します。

ブロックを指定すれば、生成した Handle を引数としてブロックを実行します。
Handle はブロックの終りで自動的にクローズされます。

== Instance Methods

--- close    -> Integer

自身をクローズします。成功した場合は 0 を返します。そうでない場合は、
0 以外の整数を返します。

--- enable_close     -> nil
--- disable_close    -> nil

GC によるオブジェクトの回収時に、自身をクローズするかどうかを指定します。

--- sym(func) -> DL::PtrData
--- [](func)  -> DL::PtrData
#@todo

関数やグローバル変数 func へのポインタを取得し、
[[c:DL::PtrData]] オブジェクトとして返します。

@param func 得たいシンボルの名前を文字列で与えます。

@raise RuntimeError シンボルが見つからなかった時に発生します。

--- sym(func, type)    -> DL::Symbol
--- [](func, type)     -> DL::Symbol
#@todo

関数 func へのポインタを取得し、
[[c:DL::Symbol]] オブジェクトとして返します。
type は型修飾子からなる文字列で関数のプロトタイプを示します。

@param func 得たい関数の名前を文字列で与えます。

@param type 関数のプロトタイプを文字列で指定します。

@raise RuntimeError シンボルが見つからなかった時に発生します。

[[c:DL]] の「Type Specifiers」の項も参照して下さい。

--- to_i    -> Integer

自身が表すハンドル([[man:dlopen(3)]] が返したもの)のアドレスを返します。

--- to_ptr    -> DL::PtrData

自身が表すハンドル([[man:dlopen(3)]] が返したもの)へのポインタ [[c:DL::PtrData]]
を返します。この返り値には、free 関数がセットされていません。
