= class DL::Symbol < Object

ダイナミックライブラリの関数を表すクラスです。

== Class Methods

--- new(addr, type = nil, name = nil)    -> DL::Symbol 
#@todo

#@#type が nil でないなら 型 type の Symbol オブジェクト sym を作成します。
#@#関数が割り当てられているなら addr はそのアドレス。type が nil なら
#@#[[c:DL::PtrData]] オブジェクトを返します。

--- char2type(char)    -> String
#@todo

型に相当する文字 char を取り、C 言語の型修飾を返します。

== Instance Methods

--- proto    -> String

関数のプロトタイプを [[c:DL]] モジュールの型指定文字列で返します。

 require 'dl'
 h = DL.dlopen('./libtest.so')
 s = h.sym('slen', 'IS')
 
 p s.proto #=> "IS"

--- name    -> String

関数名を文字列で返します。

 require 'dl'
 h = DL.dlopen('./libtest.so')
 s = h.sym('slen', 'IS')
 
 p s.name #=> "slen"

--- cproto    -> String
--- to_s      -> String

C 言語形式のプロトタイプを文字列で返します。

 require 'dl'
 h = DL.dlopen('./libtest.so')
 s = h.sym('slen', 'IS')
 
 p s.cproto #=> "int slen(const char *);"

--- inspect    -> String

人間が読みやすい形式の文字列を返します。

--- call(*args)    -> object
--- [](*args)      -> object
#@todo

自身が保持しているライブラリ関数を呼び出します。関数の
戻り値 result と、 call に渡された引数の配列 args = [arg1, arg2, ... argN] 
からなる配列 [result, args] を返します。

 require 'dl'
 h = DL.dlopen('./libtest.so')
 s = h.sym('slen', 'IS')
 result, args = s.call('abc') 
 p result #=> 3
 p args   #=> ["abc"]

//emlist{
 /* libtest.so */
 int slen(const char* s){
   return strlen(s);
 }
//}

--- to_i    -> Integer

ダイナミックライブラリの関数のアドレスを返します。

--- to_ptr    -> DL::PtrData

ダイナミックライブラリの関数へのポインタ [[c:DL::PtrData]] を返します。
