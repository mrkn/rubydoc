= class DL::Symbol < Object

ダイナミックライブラリの関数のラッパークラスです。

== Class Methods

--- new(addr, type = nil, name = nil)
#@todo

type が nil でないなら 型 type の Symbol オブジェクト sym を作成します。
関数が割り当てられているなら addr はそのアドレス。type が nil なら
[[c:DL::PtrData]] オブジェクトを返します。

--- char2type(char)
#@todo

型に相当する文字 char を取り、C 言語の型修飾を返します。

== Instance Methods

--- proto
#@todo

関数のプロトタイプを DL モジュールの型指定文字列で返します。

 require 'dl'
 h = DL.dlopen('./libtest.so')
 s = h.sym('slen', 'IS')
 
 p s.proto #=> "IS"

--- name
#@todo

関数名を文字列で返します。

 require 'dl'
 h = DL.dlopen('./libtest.so')
 s = h.sym('slen', 'IS')
 
 p s.name #=> "slen"

--- cproto
--- to_s
#@todo

C 言語形式のプロトタイプを文字列で返します。

 require 'dl'
 h = DL.dlopen('./libtest.so')
 s = h.sym('slen', 'IS')
 
 p s.cproto #=> "int slen(const char *);"

--- inspect()
#@todo

人間が読みやすい形式の文字列を返します。

--- call(*args)
--- [](*args)
#@todo

パラメータ arg1, arg2, ... argN で関数を呼び出します。関数の戻り値 result
と、 call に渡された引数の配列 args = [arg1, arg2, ... argN] からなる配列 [result, args] を
返します。

 require 'dl'
 h = DL.dlopen('./libtest.so')
 s = h.sym('slen', 'IS')
 result, args = s.call('abc') 
 p result #=> 3
 p args   #=> ["abc"]

//emlist{
 /* libtest.so */
 int slen(const char* s){
   return strlen(s);
 }
//}

--- to_i
#@todo

自身のアドレスを返します。

--- to_ptr
#@todo

対応する [[c:DL::PtrData]] オブジェクト ptr を返します。

