= class DL::PtrData < Object

C のポインタのようなメモリブロックを表すクラスです。

== Class Methods

--- new(addr, size = 0, free = nil)    -> DL::PtrData
#@todo

アドレス addr を指すポインタに相当する PtrData オブジェクトを返します。
GC は free 関数を使用してメモリを解放します。

@param addr

@param size

@param free

--- malloc(size, free = nil)    -> DL::PtrData
#@todo

@param size

@param free

== Instance Methods

--- free=(sym)    -> nil
#@todo

シンボルオブジェクト sym を指定した場合、GC は sym に相当する関数
を使ってメモリを解放します。

--- free    -> DL::Symbol
#@todo

GC がメモリを解放するのに使用するシンボルオブジェクト sym を返します。
sym は普通 PtrData#free= や PtrData.new によって設定されます。

--- size           -> Integer
--- size=(size)    -> Integer
#@todo

サイズ size を割り当てたメモリを取得および設定します。

--- null?    -> bool
#@todo

--- to_a(type, [size])    -> [object]
#@todo

type で指定された型の配列を返します。type は 'S','P','I','L','D' そし
て 'F' のいずれかです。

--- to_i    -> Integer
#@todo

--- to_s([len])    -> String
#@todo

長さ len の文字列を返します。len を省略した場合は、文字列の終りは '\0'。

--- to_str
#@todo

--- ptr   -> DL::PtrData
--- +@    -> DL::PtrData
#@todo

自身が指す値をポインタであるとして、PtrData にして返します。
C言語におけるポインタのポインタに対する間接参照(*p)と同じです。

 a = ['abc', 'def'].to_ptr
 p a.ptr.to_s #=> "abc"

--- ==     -> bool
--- eql?   -> bool
#@todo

ポインタの指すアドレスが同一かどうかを判定します。

--- <=>    -> Integer
#@todo

ポインタの指すアドレスの大小を比較します。

--- ref   -> DL::PtrData
--- -@    -> DL::PtrData
#@todo

自身を指す PtrData オブジェクトを返します。
C 言語におけるポインタへのアドレス演算子の適用(&p)と同じです。

  s = "abc".to_ptr
  p s == s.ref.ptr #=> true

--- +(n)   -> DL::PtrData
#@todo

n バイトを足した新しいPtrData オブジェクトを返します。

--- -(n)   -> DL::PtrData
#@todo

n バイトを引いた新しいPtrData オブジェクトを返します。

--- struct!(type, *members)    -> nil
#@todo

構造体のメンバに [[PtrData#[] ]] でアクセスできるようにします。
C 言語における構造体のポインタへのキャストと同じです。

 ptr = DL.malloc(DL.sizeof('LL'))
 ptr.struct!('LL', :tv_sec, :tv_usec)
 ptr[:tv_sec] = 10
 p ptr[:tv_sec] #=> 10

@param type 構造体のメンバの型を文字列で指定します。型指定子は [[c:DL]] を参照して下さい。

--- union!(type, *members)    -> nil
#@todo

共用体のメンバに [[PtrData#[] ]] でアクセスできるようにします。
C 言語における共用体のポインタへのキャストと同じです。

--- [](key)              -> object
--- [](key, num = 0)     -> object
#@todo

key が文字列やシンボルなら、このメソッドは構造体/共用体メンバの値
を返します。それは PtrData#{struct!,union!} によって定義された型を持ちます。
key が整数でこのオブジェクトがポインタ ptr に相当するなら、
(ptr + key).to_s(num) の値を返します。

--- []=(key, num, val)    -> object
--- []=(key, val)         -> object
#@todo

key が文字列やシンボルなら、このメソッドは構造体/共用体メンバの値
を val にします。key が整数で val が文字列なら [[man:memcpy(3)] を使ってメ
モリ領域 ptr への値の num バイトをコピーします。

--- data_type    -> [object]
#@todo

使ってはいけません。

--- define_data_type    -> nil
#@todo

使ってはいけません。

= module DL::MemorySpace

== Constants

--- MemoryTable
#@todo

== Module Functions

--- each
#@todo

