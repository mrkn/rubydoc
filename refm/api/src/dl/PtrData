= class DL::PtrData < Object

メモリ領域を表すクラスです。C 言語のポインタに相当します。

== Class Methods

--- new(addr, size = 0, free = nil)    -> DL::PtrData
#@todo

アドレス addr を指すポインタに相当する PtrData オブジェクトを返します。

size を指定した場合、アドレス addr に確保されているメモリ領域のサイズは
size であるとします。
GC は free 関数を使用してメモリを解放します。

@param addr 生成する PtrData オブジェクトが指すアドレスを整数で指定します。

@param size 生成する PtrData オブジェクトが指すメモリ領域のサイズを整数で指定します。

@param free 生成する PtrData オブジェクトの free 関数を [[c:DL::Symbol]] で指定します。

--- malloc(size, free = nil)    -> DL::PtrData
#@todo

サイズが size であるメモリ領域を確保し、それを指す DL::PtrData を返します。

@param size 確保したいメモリ領域のサイズを指定します。

@param free 返り値にセットされる free 関数を [[c:DL::Symbol]] で指定します。

== Instance Methods

--- free=(sym)    
#@todo

シンボルオブジェクト sym を指定した場合、GC は sym に相当する関数
を使ってメモリを解放します。

--- free    -> DL::Symbol
#@todo

GC がメモリを解放するのに使用するシンボルオブジェクト sym を返します。
sym は普通 PtrData#free= や PtrData.new によって設定されます。

--- size        -> Integer
--- size=(s)    
#@todo

自身の指す領域のサイズを返します。
s を指定した場合は、自身の指す領域のサイズは s であると設定します。
ただし、自身が指すメモリのサイズが s になるように再割り当てはしません。

@param s 自身が指すメモリのサイズを指定します。

--- null?    -> bool

自身が NULL なら true を返します。そうでないなら false を返します。

--- to_a(type)            -> [object]
--- to_a(type, size)      -> [object]
#@todo

自身が指す領域から type で指定された型の配列を複製して返します。
type は 'S','P','I','L','D' そして 'F' のいずれかです。
size を指定した場合は、自身が指す領域からサイズが size である配列を
複製します。

size が自身のサイズより小さいかを検査しません。

type が定めされた型指定子でない場合、空の配列を返します。

@param type 自身の要素の型を、長さが 1 の文字列で指定します。

@param size 得たい配列のサイズを整数で指定します。

--- to_i    -> Integer

自身が指すアドレスを整数で返します。

--- to_s         -> String
--- to_s(len)    -> String

自身が指す領域から長さ len の文字列を複製して返します。

len を省略した場合は、文字列の終りは '\0' であると仮定して、
[[man:strlen(3)]] を使って長さを算出します。

@param len 文字列の長さを整数で指定します。

--- to_str
#@todo

--- ptr   -> DL::PtrData
--- +@    -> DL::PtrData

自身の指す値を PtrData にして返します。
自身の指す値はポインタであると仮定します。
C 言語におけるポインタのポインタに対する間接参照 *p と同じです。 

この返り値には、free 関数がセットされていません。

 a = ['abc', 'def'].to_ptr
 p a.ptr.to_s #=> "abc"

--- ==(other)     -> bool
--- eql?(other)   -> bool

ポインタの指すアドレスが同一かどうかを判定します。

--- <=>(other)    -> Integer

ポインタの指すアドレスの大小を比較します。

--- ref   -> DL::PtrData
--- -@    -> DL::PtrData

自身を指す PtrData オブジェクトを返します。
C 言語におけるポインタへのアドレス演算子の適用 &p と同じです。

この返り値には、free 関数がセットされていません。

  s = "abc".to_ptr
  p s == s.ref.ptr #=> true

--- +(n)   -> DL::PtrData

自身のアドレスに n バイトを足した新しい PtrData オブジェクトを返します。

この返り値には、free 関数がセットされていません。

@param n アドレスの増分を整数で指定します。

--- -(n)   -> DL::PtrData

自身のアドレスから n バイトを引いた新しい PtrData オブジェクトを返します。

この返り値には、free 関数がセットされていません。

@param n アドレスの差分を整数で指定します。

--- struct!(type, *members)    -> nil
#@todo

構造体のメンバにメソッド [[m:PtrData#[] ]] でアクセスできるようにします。
C 言語における構造体のポインタへのキャストと同じです。

 ptr = DL.malloc(DL.sizeof('LL'))
 ptr.struct!('LL', :tv_sec, :tv_usec)
 ptr[:tv_sec] = 10
 p ptr[:tv_sec] #=> 10

@param type 構造体のメンバの型を文字列で指定します。型指定子は [[c:DL]] を参照して下さい。

@param members メンバの名前を文字列かシンボルで指定します。

--- union!(type, *members)    -> nil
#@todo

共用体のメンバにメソッド [[m:PtrData#[] ]] でアクセスできるようにします。
C 言語における共用体のポインタへのキャストと同じです。

@param type 共用体の型を文字列で指定します。型指定子は [[c:DL]] を参照して下さい。

@param members メンバの名前を文字列かシンボルで指定します。

--- [](key)             -> object
#@todo

構造体または共用体メンバ key の値を返します。返り値は [[m:PtrData#struct!]] 
または [[m:DL::PtrData#union!]] によって定義された型により、Ruby のオブジェクトへ
変換されたものです。

@param key 取得したい構造体か共用体のメンバの名前を、シンボルか文字列を指定します。

--- [](beg, len = 0)     -> String

自身の指すアドレスに beg バイトを足したメモリ領域の先頭 len バイトを複製し、
文字列として返します。(self + beg).to_s(len) と同等です。
beg + len が自身のサイズより小さいかを検証しません。

@param beg 自身から値を得たい領域の先頭のアドレスまでの距離を整数で与えます。

@param len 値を得たい領域のサイズを指定します。

--- []=(key, val)   
#@todo

構造体または共用体メンバ key の値を val にします。

@param key 構造体か共用体のメンバの名前を文字列かシンボルで指定します。

@param val 自身のメンバにセットしたい値を指定します。

--- []=(beg, str) 
#@todo
自身の指すアドレスに beg バイトを足したメモリ領域に
文字列 str をコピーします。コピー先の領域が str のサイズより大きいか検証しません。

@param beg 書き換えたいメモリ領域の自身からの距離を整数で与えます。

@param str メモリ領域にセットしたいバイト列を文字列で指定します。

--- []=(beg, len, str) 
#@todo

自身の指すアドレスに beg バイトを足したメモリ領域の先頭 len バイトに
文字列 str をコピーします。str のサイズが len より小さい場合は、残りの領域を 0 で埋めます。
コピー先の領域が len より大きいか検証しません。

@param beg 書き換えたいメモリ領域の自身からの距離を整数で与えます。

@param len 書き換えたいメモリ領域のサイズを整数で指定します。

@param str メモリ領域にセットしたいバイト列を文字列で指定します。

--- data_type    -> [object]
#@todo

使ってはいけません。

--- define_data_type    -> nil
#@todo

使ってはいけません。

= module DL::MemorySpace

== Constants

--- MemoryTable
#@todo

== Module Functions

--- each
#@todo

