= module DL::Importable

== Instance Methods

--- dlload(lib,...)

    ((<DL.dlopen|DL/DL.dlopen>)) を用いてライブラリをロードし、extend した
    モジュール内でそのライブラリで定義されている参照可能なシンボルを取得できるよ
    うにする。

--- extern(prototype)

    Cの関数プロトタイプを与えることによって、その関数を呼び出すメソッドを動的に
    定義することができる。頭文字が大文字の場合は小文字に自動的に変換される。

--- callback(proto)

    Cの関数プロトタイプを与えることによって、既に定義されたRubyのメソッドをCの
    コールバック関数として扱うことができるようにする。
    ((<DL::Symbol>))オブジェクトを返す。

--- typealias(newtype, oldtype)

    ((|newtype|))型を((|oldtype|))型のエイリアスとして定義する。
    ((|newtype|))で与えた型は(({extern}))や(({callback}))メソッド
    のプロトタイプを与えるときに利用する。

--- symbol(sym[, typespec])

    シンボル名が((|sym|))のシンボルを取り出す。
    ((|typespec|))には型情報を与え、((<DL::Symbol>))オブジェクトを返す。
    ((|typespec|))が省略された場合、シンボルへの参照を((<DL::PtrData>))オブジェクト
    として返す。

== 補足

実際には、上記のメソッドは、
(({DL::Importable::Internal}))において定義されている。
(({Importable}))モジュールは
(({Internal}))モジュールをインクルードしているために、
(({Internal}))で定義されたメソッドは
(({Importable})) モジュールによって提供される。
