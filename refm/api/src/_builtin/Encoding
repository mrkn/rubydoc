#@since 1.9.1
=class Encoding
文字エンコーディング(文字符号化方式)のクラスです。Rubyの多言語対応(M17N)機能において利用されます。

例えば文字列オブジェクトは、文字列のバイト表現の他にそのバイト表現がどのエンコーディングによるものであるかも併せて保持しています。この情報は [[m:String#encoding]] により取得できます。 Encoding オブジェクトを返すメソッドにはこの他に [[m:IO#internal_encoding]], [[m:IO#external_encoding]] などがあります。

@see [[d:spec/m17n]]

== Class Methods

--- aliases    -> Hash
エンコーディングの別名に対して元の名前を対応づけるハッシュを返します。

例:
  p Encoding.aliases
  #=> {"BINARY"=>"ASCII-8BIT", "ASCII"=>"US-ASCII", "ANSI_X3.4-1986"=>"US-ASCII",
      "SJIS"=>"Shift_JIS", "eucJP"=>"EUC-JP", "CP932"=>"Windows-31J"}


--- compatible?(str1, str2) -> Encoding | nil
--- compatible?(enc1, enc2) -> Encoding | nil
2つの文字列に互換性があるかどうかをチェックします。互換性がある文字列は
結合させることができます。互換性があるときは、結合後の文字列が取るであ
ろう Encoding オブジェクトを返します。互換性がない場合は nil を返します。

@param str1   チェックする対象の文字列を指定します。
@param str2   チェックする対象の文字列を指定します。
@return       結合した場合の文字列の Encoding または nil

--- find(name) -> Encoding
指定された name という名前を持つ Encoding オブジェクトを返します。

@param name エンコーディング名を表す [[c:String]] か [[c:Symbol]] を指定します。
@return 発見された Encoding オブジェクトを返します。
@raise ArgumentError 指定した名前のエンコーディングが発見できないと発生します。

#@since 1.9.2
特殊なエンコーディング名として、ロケールエンコーディングを表す locale、default_external を表す external、default_internal を表す internal、ファイルシステムエンコーディングを表す filesystem があります。
#@else
特殊なエンコーディング名として、ロケールエンコーディングを表す locale、default_external を表す external、default_internal を表す internal があります。
#@end

例:
 p Encoding.find(:Shift_JIS)    #=> #<Encoding:Shift_JIS>
 p Encoding.find("utf-8")       #=> #<Encoding:UTF-8>


--- list -> [Encoding]
現在ロードされているエンコーディングのリストを返します。

例:
    Encoding.list
    => [#<Encoding:ASCII-8BIT>, #<Encoding:EUC-JP>,
        #<Encoding:Shift_JIS>, #<Encoding:UTF-8>,
        #<Encoding:ISO-2022-JP (dummy)>]
    
    Encoding.find("US-ASCII")
    => #<Encoding:US-ASCII>
    
    Encoding.list
    => [#<Encoding:ASCII-8BIT>, #<Encoding:EUC-JP>,
        #<Encoding:Shift_JIS>, #<Encoding:UTF-8>,
        #<Encoding:US-ASCII>, #<Encoding:ISO-2022-JP (dummy)>]

--- name_list    -> [String]
利用可能なエンコーディングの名前を文字列の配列で返します。

このリストにはダミーエンコーディングは含みません。

例:
  p Encoding.name_list
  #=> ["US-ASCII", "ASCII-8BIT", "UTF-8",
       "ISO-8859-1", "Shift_JIS", "EUC-JP",
       "Windows-31J",
       "BINARY", "CP932", "eucJP"]

--- default_external -> Encoding
規定の外部エンコーディングを返します。

入出力において、外部エンコーディングが指定されていない場合の規定値として利用されます。Rubyはロケールまたは -E オプションに従って default_external を決定します。ロケールの確認・設定方法については各システムのマニュアルを参照してください。

default_external は必ず設定されます。[[m:Encoding.locale_charmap]] が nil を返す場合には US-ASCII が、
ロケールにRubyが扱えないエンコーディングが指定されている場合には ASCII-8BIT が、default_external に設定されます。

@see [[man:locale(1)]], [[m:Encoding.locale_charmap]]

--- default_external=(encoding) -> Encoding
規定の外部エンコーディングを設定します。

--- default_internal -> Encoding | nil
規定の内部エンコーディングを返します。

--- default_internal=(encoding) -> Encoding
規定の内部エンコーディングを設定します。

--- locale_charmap -> String | nil
ロケールエンコーディングを決定するために用いる、locale charmap 名を返します。nl_langinfo 等がない環境では nil を、miniruby では ASCII_8BIT を返します。

  Debian GNU/Linux
    LANG=C
      Encoding.locale_charmap  => "ANSI_X3.4-1968" 
  LANG=ja_JP.EUC-JP
      Encoding.locale_charmap  => "EUC-JP"

  SunOS 5
    LANG=C
      Encoding.locale_charmap  => "646"
    LANG=ja
      Encoding.locale_charmap  => "eucJP"

@see [[man:charmap(5)]]

== Instance Methods

--- inspect -> String
プログラマにわかりやすい表現の文字列を返します。

例:
    Encoding::UTF_8.inspect       #=> "#<Encoding:UTF-8>"
    Encoding::ISO_2022_JP.inspect #=> "#<Encoding:ISO-2022-JP (dummy)>"

--- name -> String
--- to_s -> String
エンコーディングの名前を返します。

    Encoding::UTF_8.name       => "UTF-8"

--- names -> String
エンコーディングの名前とエイリアス名の配列を返します。

    Encoding::UTF_8.names      => ["UTF-8", "CP65001"]

--- dummy? -> bool
自身がダミーエンコーディングである場合に true を返します。
そうでない場合に false を返します。

ダミーエンコーディングとは Ruby が名前を知っているものの実質的には対応していないエンコーディングのことです。例えば、ダミーエンコーディングで符号化された文字列の場合、 [[m:String#length]] はマルチバイト文字を考慮せずにバイト列の長さを返します。

ダミーエンコーディングも [[c:IO]] の外部エンコーディングに指定できます。また 
Ruby はサポートしていないが拡張ライブラリがサポートしているエンコーディングを扱う場合にも
用います。

例:
  Encoding::ISO_2022_JP.dummy?       #=> true
  Encoding::UTF_8.dummy?             #=> false

#@since 1.9.2
--- ascii_compatible? -> bool
#@todo
Returns whether ASCII-compatible or not.

例:
  Encoding::UTF_8.ascii_compatible?     #=> true
  Encoding::UTF_16BE.ascii_compatible?  #=> false
#@end
== Constants

--- ASCII_8BIT
--- BINARY
ASCII-8BIT、ASCII互換オクテット列用のエンコーディングです。

もっぱら文字エンコーディングを持たないデータ、文字を符号化したのではない単なるバイトの列を表現するために用いますが、このエンコーディングは ASCII 互換であることがポイントです。

--- EUC_JP
--- EucJP
--- EUCJP
IANA Character Sets にある EUC-JP のことです。

日本語 EUC 亜種で、G0 が US-ASCII、G1 が JIS X 0201 片仮名図形文字集合、G2 が JIS X 0208、G3 が JIS X 0212 となっています。
EUC-JP を指定する場合は、それが実際には CP51932 のことである可能性を考えなければなりません。

--- ISO_2022_JP
--- ISO2022_JP
ISO-2022-JP エンコーディングです。
[[url:http://tools.ietf.org/html/rfc1468]]

--- Shift_JIS
--- SHIFT_JIS
--- SJIS
IANA Character Sets にある Shift_JIS のことです。

基本的にはJIS X 0208:1997の付属書1にある「シフト符号化表現」のことですが、
Ruby M17N では 7bit 部分が US-ASCII になっています。

--- US_ASCII
--- ASCII
--- ANSI_X3_4_1968
US-ASCII、いわゆる ASCII のことで、ISO 646 IRV と一致します。

7bit の範囲のみを含み、8bit 目の立っている文字 (たとえば \x80 など) が含まれる場合は正しいエンコーディングであるとみなしません。

--- UTF_16BE
UTF-16BE (ビッグエンディアン) です。

BOM を含みません。

--- UTF_16LE
UTF-16LE (リトルエンディアン) です。

BOM を含みません。

--- UTF_32BE
UTF-32BE (ビッグエンディアン) です。

BOM を含みません。

--- UTF_32LE
UTF-32LE (リトルエンディアン) です。

BOM を含みません。

--- UTF_8
UTF-8、Unicode や ISO 10646 を ASCII 互換な形で符号化するための方式です。

[[url:http://tools.ietf.org/html/rfc3629]]

BOM を含みません。

--- UTF8_MAC
UTF8-MAC、アップルによって修正された Normalization Form D（分解済み）という形式のUTF-8です。

[[url:http://developer.apple.com/jp/technotes/tn1150.html]]
[[url:http://developer.apple.com/jp/technotes/tn2078.html]]

--- Big5
--- BIG5
--- CP950

--- CP51932
Windows で用いられる、日本語 EUC 亜種です。

G0 が US-ASCII、G1 が JIS X 0201 片仮名図形文字集合、G2 が JIS X 0208 + Windows の機種依存文字となっており、G3 は未割り当てになっています。
[[url:http://legacy-encoding.sourceforge.jp/wiki/index.php?cp51932]]

#@since 1.9.2
--- CP50221
Windows で用いられる、ISO-2022-JP 亜種です。

ISO-2022-JP に加え、ESC ( I でいわゆる半角カナを許し、Windows の機種依存文字を扱うことができます。
[[url:http://legacy-encoding.sourceforge.jp/wiki/index.php?cp50221]]
#@end

--- CP850
--- IBM850

--- CP852

--- CP855

--- CP936

--- CP949

--- EUCCN
--- EucCN

--- EUC_KR
--- EUCKR
--- EucKR

--- EUC_TW
--- EUCTW
--- EucTW

--- GB18030

--- GB1988

--- GBK
--- WINDOWS_936
--- Windows_936

--- IBM437
--- CP437

--- IBM737
--- CP737

--- IBM775
--- CP775

--- IBM852

--- IBM855

--- IBM857
--- CP857

--- IBM860
--- CP860

--- IBM861
--- CP861

--- IBM862
--- CP862

--- IBM863
--- CP863

--- IBM864
--- CP864

--- IBM865
--- CP865

--- IBM866
--- CP866

--- IBM869
--- CP869

--- ISO_2022_JP_2
--- ISO2022_JP2

--- ISO_8859_1
--- ISO8859_1

ISO-8859-1 エンコーディングです。

--- ISO_8859_10
--- ISO8859_10

--- ISO_8859_11
--- ISO8859_11

--- ISO_8859_13
--- ISO8859_13

--- ISO_8859_14
--- ISO8859_14

--- ISO_8859_15
--- ISO8859_15

--- ISO_8859_16
--- ISO8859_16

--- ISO_8859_2
--- ISO8859_2

--- ISO_8859_3
--- ISO8859_3

--- ISO_8859_4
--- ISO8859_4

--- ISO_8859_5
--- ISO8859_5

--- ISO_8859_6
--- ISO8859_6

--- ISO_8859_7
--- ISO8859_7

--- ISO_8859_8
--- ISO8859_8

--- ISO_8859_9
--- ISO8859_9

--- KOI8_R

--- KOI8_U

--- MacJapanese
--- MACJAPAN
--- MACJAPANESE
--- MacJapan

--- TIS_620

--- Windows_1250
--- CP1250
--- WINDOWS_1250

--- Windows_1251
--- CP1251
--- WINDOWS_1251

--- Windows_1252
--- CP1252
--- WINDOWS_1252

--- Windows_1253
--- CP1253
--- WINDOWS_1253

--- Windows_1254
--- CP1254
--- WINDOWS_1254

--- Windows_1255
--- CP1255
--- WINDOWS_1255

--- Windows_1256
--- CP1256
--- WINDOWS_1256

--- Windows_1257
--- CP1257
--- WINDOWS_1257

--- Windows_1258
--- CP1258
--- WINDOWS_1258

--- Windows_31J
--- CP932
--- CSWINDOWS31J
--- CsWindows31J
--- WINDOWS_31J
Windows-31J、Windows で用いられる、シフトJIS亜種で、CP932とも言います。

7bit 部分が論理的には US-ASCIIであり、また Windows の機種依存文字を扱うことができます。
[[url:http://www2d.biglobe.ne.jp/~msyk/charcode/cp932/index.html]]
[[url:http://legacy-encoding.sourceforge.jp/wiki/index.php?cp932]]

--- Windows_874
--- CP874
--- WINDOWS_874

--- EUCJP_MS
--- EucJP_ms
--- EUC_JP_MS
eucJP-ms、Unix 系で用いられる、日本語 EUC 亜種です。

EUC-JPに加え、Windowsの機種依存文字とユーザ定義文字を扱うことができます。
[[url:http://www2d.biglobe.ne.jp/~msyk/charcode/cp932/eucJP-ms.html]]
[[url:http://legacy-encoding.sourceforge.jp/wiki/index.php?eucJP-ms]]
[[url:http://blog.livedoor.jp/numa2666/archives/50980727.html]]

--- MacCentEuro
--- MACCENTEURO

--- MacCroatian
--- MACCROATIAN

--- MacCyrillic
--- MACCYRILLIC

--- MacGreek
--- MACGREEK

--- MacIceland
--- MACICELAND

--- MacRoman
--- MACROMAN

--- MacRomania
--- MACROMANIA

--- MacThai
--- MACTHAI

--- MacTurkish
--- MACTURKISH

--- MacUkraine
--- MACUKRAINE


#@end
