= module FileTest

ファイルの検査関数を集めたモジュールです。

=== 注意

FileTest で定義された各メソッドは、システムコールに失敗しても例外を発生させません。
真を返した時のみ、返り値は意味をもちます。
例えば、
 File.exist?('/root/.bashrc')
が false を返しても、それはファイルが存在しないことを保証しません。


== Module Functions

--- blockdev?(filename)    -> bool

ファイルがブロックスペシャルファイルである時に真を返します。
そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- chardev?(filename)    -> bool

ファイルがキャラクタスペシャルファイルの時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- executable?(filename)    -> bool

ファイルがカレントプロセスにより実行できる時に真を返しま
す。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列を指定します。

--- executable_real?(filename)    -> bool

ファイルがカレントプロセスの実ユーザか実グループで実行できる時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列を指定します。

--- exist?(filename)    -> bool

ファイルが存在する時に真を返します。そうでない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- exists?(filename)    -> bool

このメソッドはobsoleteです。

ファイルが存在する時に真を返します。
[[m:FileTest.#exist?]]を使って下さい。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- grpowned?(filename)    -> bool

ファイルのグループ ID がカレントプロセスの実効グループ ID と等しい時に真を返
します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- directory?(filename)    -> bool

ファイルがディレクトリの時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- file?(filename)    -> bool

ファイルが通常ファイルである時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

#@since 1.8.4
--- identical?(filename1, filename2)    -> bool

filename1 と filename2 が同じファイルを指している時に真を返します。
そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

ruby 1.8.3 以前では[[m:Kernel.#test]](?-, filename1, filename2)を使ってください。

  open("a", "w") {}
  p File.identical?("a", "a")      #=> true
  p File.identical?("a", "./a")    #=> true
  File.link("a", "b")
  p File.identical?("a", "b")      #=> true
  File.symlink("a", "c")
  p File.identical?("a", "c")      #=> true
  open("d", "w") {}
  p File.identical?("a", "d")      #=> false

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

#@end
--- pipe?(filename)    -> bool

ファイルが名前つきパイプ(FIFO)である時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- socket?(filename)    -> bool

ファイルがソケットである時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- owned?(filename)    -> bool

ファイルのユーザがカレントプロセスの実効ユーザと等しい時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- readable?(filename)    -> bool

ファイルがカレントプロセスにより読み込み可能な時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- readable_real?(filename)    -> bool

ファイルがカレントプロセスの実ユーザか実グループによって読み込み可能な時に真を
返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- setuid?(filename)    -> bool

ファイルが [[man:setuid(2)]] されている時に真を返
します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- setgid?(filename)    -> bool

ファイルが [[man:setgid(2)]] されている時に真を返
します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

--- size(filename)    -> Integer

ファイルのサイズを返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@raise Errno::EXXX filename が存在しない場合、あるいはシステムコールに失敗した場合に発生します。

@see [[m:FileTest.#size?]], [[m:FileTest.#zero?]]

--- size?(filename)    -> Integer | nil

ファイルのサイズを返します。ファイルが存在しない時や
ファイルのサイズが0の時には nil を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#size]], [[m:FileTest.#zero?]] 

--- sticky?(filename)    -> bool

ファイルの sticky ビット([[man:chmod(2)]] 参照)が
立っている時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列を指定します。

--- symlink?(filename)    -> bool

ファイルがシンボリックリンクである時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列を指定します。

--- writable?(filename)    -> bool

ファイルがカレントプロセスにより書き込み可能である時に真を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列を指定します。

--- writable_real?(filename)    -> bool

ファイルがカレントプロセスの実ユーザか実グループによって書き込み可能である時に真
を返します。そうでない場合、ファイルが存在しない場合、あるいはシステムコールに失敗した場合などには false を返します。

@param filename ファイル名を表す文字列を指定します。

--- zero?(filename)    -> bool

ファイルが存在して、そのサイズが 0 である時に真を返します。
そうでない場合、あるいはシステムコールに失敗した場合には false を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@see [[m:FileTest.#size]], [[m:FileTest.#size?]]

#@since 1.9.0
--- world_readable?(path)    -> Integer | nil

path が全てのユーザから読めるならばそのファイルのパーミッションを表す
整数を返します。そうでない場合は nil を返します。

整数の意味はプラットフォームに依存します。

@param path パスを表す文字列か IO オブジェクトを指定します。

   m = FileTest.world_readable?("/etc/passwd")
   "%o" % m                               # => "644"

--- world_writable?(path)    -> bool

path が全てのユーザから書き込めるならば、そのファイルのパーミッションを表す
整数を返します。そうでない場合は nil を返します。

整数の意味はプラットフォームに依存します。

@param path パスを表す文字列か IO オブジェクトを指定します。

   m = FileTest.world_writable?("/tmp")
   "%o" % m                               #=> "777"
#@end
