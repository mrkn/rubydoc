= class Rational < Numeric

有理数を扱うクラスです。

== Public Instance Methods

--- %(other)
#@todo

Returns the remainder when this value is divided by other.

Examples:

  r = Rational(7,4)    # -> Rational(7,4)
  r % Rational(1,2)    # -> Rational(1,4)
  r % 1                # -> Rational(3,4)
  r % Rational(1,7)    # -> Rational(1,28)
  r % 0.26             # -> 0.19

--- *(a)
#@todo

Returns the product of this value and a.

Examples:

  r = Rational(3,4)    # -> Rational(3,4)
  r * 2                # -> Rational(3,2)
  r * 4                # -> Rational(3,1)
  r * 0.5              # -> 0.375
  r * Rational(1,2)    # -> Rational(3,8)

--- **(other)
#@todo

Returns this value raised to the given power.

Examples:

  r = Rational(3,4)    # -> Rational(3,4)
  r ** 2               # -> Rational(9,16)
  r ** 2.0             # -> 0.5625
  r ** Rational(1,2)   # -> 0.866025403784439

--- +(a)
#@todo

Returns the addition of this value and a.

Examples:

  r = Rational(3,4)      # -> Rational(3,4)
  r + 1                  # -> Rational(7,4)
  r + 0.5                # -> 1.25

--- -(a)
#@todo

Returns the difference of this value and a. subtracted.

Examples:

  r = Rational(3,4)    # -> Rational(3,4)
  r - 1                # -> Rational(-1,4)
  r - 0.5              # -> 0.25

--- /(a)
#@todo

Returns the quotient of this value and a.

  r = Rational(3,4)    # -> Rational(3,4)
  r / 2                # -> Rational(3,8)
  r / 2.0              # -> 0.375
  r / Rational(1,2)    # -> Rational(3,2)

--- <=>(other)
#@todo

Standard comparison operator.

--- ==(other)
#@todo

Returns true iff this value is numerically equal to other.

But beware:

  Rational(1,2) == Rational(4,8)          # -> true
  Rational(1,2) == Rational.new!(4,8)     # -> false

Don't use Rational.new!

--- abs
#@todo

Returns the absolute value.

--- ceil
#@todo



--- coerce(other)
#@todo



--- denominator
#@todo

--- div(other)
#@todo



--- divmod(other)
#@todo

Returns the quotient and remainder.

Examples:

  r = Rational(7,4)        # -> Rational(7,4)
  r.divmod Rational(1,2)   # -> [3, Rational(1,4)]

--- fdiv
#@todo

--- floor
#@todo

Converts the rational to an Integer. Not the nearest integer,
the truncated integer. Study the following example carefully:

  Rational(+7,4).to_i             # -> 1
  Rational(-7,4).to_i             # -> -1
  (-1.75).to_i                    # -> -1

In other words:

  Rational(-7,4) == -1.75                 # -> true
  Rational(-7,4).to_i == (-1.75).to_i     # -> true

--- hash
#@todo

Returns a hash code for the object.

--- inspect
#@todo

Returns a reconstructable string representation:

  Rational(5,8).inspect     # -> "Rational(5, 8)"

--- marshal_dump
#@todo

--- marshal_load
#@todo

--- modulo
#@todo

--- numerator
#@todo

--- quo
#@todo

--- remainder
#@todo

--- round
#@todo



--- to_f
#@todo

Converts the rational to a Float.

--- to_i
--- truncate
#@todo

Alias for #truncate

--- to_r
#@todo

Returns self.

--- to_s
#@todo

Returns a string representation of the rational number.

Example:

  Rational(3,4).to_s          #  "3/4"
  Rational(8).to_s            #  "8"


