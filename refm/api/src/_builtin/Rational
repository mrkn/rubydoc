= class Rational < Numeric

有理数を扱うクラスです。

「1/3」などのような数を扱う事ができます。[[c:Integer]] や [[c:Float]]
と同様に Rational.new ではなく、 [[m:Kernel.#Rational]]を使用して
[[c:Rational]] オブジェクトを作成します。

例:

  Rational(1, 3)       # => (1/3)
  Rational('1/3')      # => (1/3)
  Rational('0.33')     # => (33/100)
  Rational.new(1, 3)   # => NoMethodError

== Public Instance Methods

#@until 1.9.2
--- %(other)      -> Rational | Float
--- modulo(other) -> Rational | Float

剰余を計算します。

other に [[c:Float]] を指定した場合は、計算結果を [[c:Float]] で返しま
す。

例:

  r = Rational(7, 4)
  r % Rational(1, 2)   # => (1/4)
  r % 1                # => (3/4)
  r % Rational(1, 7)   # => (1/28)
  r % 0.26             # => 0.19

@raise ZeroDivisionError other が 0 の時に発生します。
#@end

--- *(other) -> Rational | Float

積を計算します。

other に [[c:Float]] を指定した場合は、計算結果を [[c:Float]] で返しま
す。

例:

  r = Rational(3, 4)
  r * 2                # => (3/2)
  r * 4                # => (3/1)
  r * 0.5              # => 0.375
  r * Rational(1, 2)   # => (3/8)

--- **(other) -> Rational | Float

冪(べき)乗を計算します。

other に [[c:Float]] を指定した場合は、計算結果を [[c:Float]] で返しま
す。other が有理数であっても、計算結果が無理数だった場合は [[c:Float]]
を返します。

例:

  r = Rational(3, 4)
  r ** 2               # => (9/16)
  r ** 2.0             # => 0.5625
  r ** Rational(1, 2)  # => 0.866025403784439

--- +(other) -> Rational | Float

和を計算します。

other に [[c:Float]] を指定した場合は、計算結果を [[c:Float]] で返しま
す。

例:

  r = Rational(3, 4)
  r + Rational(1, 2)     # => (5/4)
  r + 1                  # => (7/4)
  r + 0.5                # => 1.25

--- -(other) -> Rational | Float

差を計算します。

other に [[c:Float]] を指定した場合は、計算結果を [[c:Float]] で返しま
す。

例:

  r = Rational(3, 4)
  r - 1                # => (-1/4)
  r - 0.5              # => 0.25

--- /(other)   -> Rational | Float
--- quo(other) -> Rational | Float

商を計算します。

other に [[c:Float]] を指定した場合は、計算結果を [[c:Float]] で返しま
す。

例:

  r = Rational(3, 4)
  r / 2                # => (3/8)
  r / 2.0              # => 0.375
  r / Rational(1, 2)   # => (3/2)
  r / 0                # => ZeroDivisionError

@raise ZeroDivisionError other が 0 の時に発生します。

#@since 1.9.2
--- <=>(other) -> -1 | 0 | 1 | nil
#@else
--- <=>(other) -> -1 | 0 | 1
#@end

self と other を比較して、self が大きい時に 1、等しい時に 0、小さい時に
-1 を返します。
#@since 1.9.2
比較できない場合はnilを返します。
#@end

@param other 比較対象の数値

#@since 1.9.2
@return      -1 か 0 か 1 か nil を返します。
#@else
@return      -1 か 0 か 1 を返します。
#@end

例:

  Rational(2, 3)  <=> Rational(2, 3)  # => 0
  Rational(5)     <=> 5               # => 0
  Rational(2, 3)  <=> Rational(1,3)   # => 1
  Rational(1, 3)  <=> 1               # => -1
  Rational(1, 3)  <=> 0.3             # => 1
#@since 1.9.2
  Rational(1, 3)  <=> nil             # => nil
#@else
  Rational(1, 3)  <=> nil             # => TypeError

@raise TypeError other に比較できないものを指定すると発生します。
#@end

--- ==(other) -> bool

数値として等しいか判定します。

@param other 比較対象の数値

@return      self と other が等しい場合 true を返します。
             そうでなければ false を返します。

例:

  Rational(2, 3)  == Rational(2, 3)   # => true
  Rational(5)     == 5                # => true
  Rational(0)     == 0.0              # => true
  Rational('1/3') == 0.33             # => false
  Rational('1/2') == '1/2'            # => false

#@until 1.9.2
--- abs -> Rational

自身の絶対値を返します。

例:

  Rational(1, 2).abs     # => (1/2)
  Rational(-1, 2).abs    # => (1/2)

#@end


#@since 1.9.2
--- ceil(precision = 0) -> Fixnum | Rational
#@else
--- ceil                -> Fixnum
#@end

自身と等しいかより大きな整数のうち最小のものを返します。

#@since 1.9.2
@param precision 計算結果の精度

@raise TypeError precision に整数以外のものを指定すると発生します。
#@end

例:

  Rational(3).ceil      # => 3
  Rational(2, 3).ceil   # => 1
  Rational(-3, 2).ceil  # => -1

#@since 1.9.2
precision を指定した場合は指定した桁数の数値と、上述の性質に最も近い整
数か [[c:Rational]] を返します。

例:

  Rational('-123.456').ceil(+1)       # => (-617/5)
  Rational('-123.456').ceil(+1).to_f  # => -123.4
  Rational('-123.456').ceil(0)        # => -123
  Rational('-123.456').ceil(-1)       # => -120
#@end

@see [[m:Rational#floor]], [[m:Rational#round]], [[m:Rational#truncate]]

--- coerce(other) -> Array

自身と other が同じクラスになるよう、自身か other を変換し [other, self] という
配列にして返します。

例:

  Rational(1).coerce(2)   # => [(2/1), (1/1)]
  Rational(1).coerce(2.2) # => [2.2, 1.0]

--- denominator -> Fixnum

分母を [[c:Fixnum]] として返します。常に正の整数を返します。

@return 分母を返します。

例:

  Rational(7).denominator       # => 1
  Rational(7, 1).denominator    # => 1
  Rational(9, -4).denominator   # => 4
  Rational(-2, -10).denominator # => 5

@see [[m:Rational#numerator]]

#@until 1.9.2
--- div(other) -> Fixnum

self を other で割った整数の商を返します。

@param other 自身を割る数

例:

  Rational(1, 2).div(Rational(2, 3)) # => 0

--- divmod(other) -> [Fixnum, Float | Rational]

self を other で割った、商と余りの配列を返します。

other に [[c:Float]] を指定した場合は、余りを [[c:Float]] で返します。

@param other 自身を割る数

例:

  Rational(7, 4).divmod(Rational(1, 2)) # => [3, (1/4)]
  Rational(1, 2).divmod(2.0)            # => [0, 0.5]
#@end

--- fdiv(other) -> Float

自身を other で割った実数の商を返します。

@param other 自身を割る数

例:

  Rational(2, 3).fdiv(1)   # => 0.6666666666666666
  Rational(2, 3).fdiv(0.5) # => 1.3333333333333333
  Rational(2).fdiv(3)      # => 0.6666666666666666

#@since 1.9.2
--- floor(precision = 0) -> Fixnum | Rational
#@else
--- floor -> Fixnum
#@end

自身と等しいかより小さな整数のうち最大のものを返します。

#@since 1.9.2
@param precision 計算結果の精度

@raise TypeError precision に整数以外のものを指定すると発生します。
#@end

例:

  Rational(3).floor     # => 3
  Rational(2, 3).floor  # => 0
  Rational(-3, 2).floor # => -1

自身にもっとも近い整数を返す [[m:Rational#to_i]] とは違う結果を返す事に
注意してください。

例:

  Rational(+7, 4).to_i  # => 1
  Rational(+7, 4).floor # => 1
  Rational(-7, 4).to_i  # => -1
  Rational(-7, 4).floor # => -2

#@since 1.9.2
precision を指定した場合は指定した桁数の数値と、上述の性質に最も近い整
数か [[c:Rational]] を返します。

例:

  Rational('-123.456').floor(+1)       # => (-247/2)
  Rational('-123.456').floor(+1).to_f  # => -123.5
  Rational('-123.456').floor(0)        # => -124
  Rational('-123.456').floor(-1)       # => -130
#@end

@see [[m:Rational#ceil]], [[m:Rational#round]], [[m:Rational#truncate]]

--- hash -> Fixnum

自身のハッシュ値を返します。

@return ハッシュ値を返します。

--- inspect

自身を人間が読みやすい形の文字列表現にして返します。

"(3/5)", "(-17/7)" のように10進数の既約分数表記を返します。

@return 有理数の表記にした文字列を返します。

例:

  Rational(5, 8).inspect  # => "(5/8)"
  Rational(2).inspect     # => "(2/1)"
  Rational(-8, 6).inspect # => "(-4/3)"
  Rational(0.5).inspect   # => "(1/2)"

@see [[m:Rational#to_s]]

--- marshal_dump -> Array

[[m:Rational#marshal_load]] で復元可能な配列を返します。

@see [[m:Rational#marshal_load]]

--- marshal_load -> Rational

[[m:Rational#marshal_dump]] で得られた配列を基に、[[c:Rational]] オブジェ
クトを復元します。

@see [[m:Rational#marshal_dump]]

--- numerator -> Fixnum

分子を [[c:Fixnum]] として返します。

@return 分子を返します。

例:

  Rational(7).numerator       # => 7
  Rational(7, 1).numerator    # => 7
  Rational(9, -4).numerator   # => -9
  Rational(-2, -10).numerator # => 1

@see [[m:Rational#denominator]]

#@since 1.9.2
--- rationalize(eps = 0) -> Rational

自身から eps で指定した許容誤差の範囲に収まるような [[c:Rational]] を返
します。

eps を省略した場合は self を返します。

@param eps 許容する誤差

例:

  r = Rational(5033165, 16777216)
  r.rationalize                   # => (5033165/16777216)
  r.rationalize(Rational(0.01))   # => (3/10)
  r.rationalize(Rational(0.1))    # => (1/3)
#@end

#@until 1.9.2
--- remainder(other) -> Rational

自身を other で割った余りを返します。割り切れるような場合にも
[[c:Rational]] を返します。

@param other 自身を割る数

例:

  Rational(1, 2).remainder(Rational(2, 3)) # => (1/2)
  Rational(4, 3).remainder(Rational(2, 3)) # => (0/1)

@see [[m:Numeric#remainder]]
#@end

#@since 1.9.2
--- round(precision = 0) -> Fixnum | Rational
#@else
--- round -> Fixnum
#@end

自身ともっとも近い整数を返します。

中央値 0.5, -0.5 はそれぞれ 1,-1 に切り上げされます。

#@since 1.9.2
@param precision 計算結果の精度

@raise TypeError precision に整数以外のものを指定すると発生します。
#@end

例:

  Rational(3).round     # => 3
  Rational(2, 3).round  # => 1
  Rational(-3, 2).round # => -2

#@since 1.9.2
precision を指定した場合は指定した桁数の数値と、上述の性質に最も近い整
数か [[c:Rational]] を返します。

例:

  Rational('-123.456').round(+1)      # => (-247/2)
  Rational('-123.456').round(+1).to_f # => -123.5
  Rational('-123.456').round(0)       # => -123
  Rational('-123.456').round(-1)      # => -120
  Rational('-123.456').round(-2)      # => -100
#@end

@see [[m:Rational#ceil]], [[m:Rational#floor]], [[m:Rational#truncate]]

--- to_f -> Float

自身を [[c:Float]] に変換します。

@return 実数を返します。

例:

  Rational(2).to_f      # => 2.0
  Rational(9, 4).to_f   # => 2.25
  Rational(-3, 4).to_f  # => -0.75
  Rational(20, 3).to_f  # => 6.666666666666667

--- to_i -> Fixnum
#@since 1.9.2
--- truncate(precision = 0) -> Rational | Fixnum
#@else
--- truncate                -> Fixnum
#@end

自身と 0 との間にある整数で、自身にもっとも近い整数を返します。

#@since 1.9.2
@param precision 計算結果の精度

@raise TypeError precision に整数以外のものを指定すると発生します。
#@end

例:

  Rational(2, 3).to_i   # => 0
  Rational(3).to_i      # => 3
  Rational(300.6).to_i  # => 300
  Rational(98, 71).to_i # => 1
  Rational(-30, 2).to_i # => -15

#@since 1.9.2
precision を指定した場合は指定した桁数の数値と、上述の性質に最も近い整
数か [[c:Rational]] を返します。

例:

  Rational('-123.456').truncate(+1)       # => (-617/5)
  Rational('-123.456').truncate(+1).to_f  # => -123.4
  Rational('-123.456').truncate(0)        # => -123
  Rational('-123.456').truncate(-1)       # => -120
#@end

@see [[m:Rational#ceil]], [[m:Rational#floor]], [[m:Rational#truncate]]

--- to_r -> Rational

自身を返します。

@return 自身を返します。

--- to_s -> String

自身を人間が読みやすい形の文字列表現にして返します。

"3/5", "-17/7" のように10進数の既約分数表記を返します。

@return 有理数の表記にした文字列を返します。

例:

  Rational(3, 4).to_s  # => "3/4"
  Rational(8).to_s     # => "8"
  Rational(-8, 6).to_s # => "-4/3"
  Rational(0.5).to_s   # => "1/2"

@see [[m:Rational#inspect]]
