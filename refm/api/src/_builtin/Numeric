= class Numeric < Object
include Comparable

Numeric は数値の抽象クラスです。Ruby では [[m:Numeric#coerce]]
メソッドを使うことによって異なる数値クラス間で演算を行うことができます。

演算や比較を行うメソッド(+, -, *, /, <=>)などはサブクラスで定義されま
す。また、効率のため Numeric のメソッドと同じメソッドがサブクラ
スで再定義されている場合があります。

=== 数値関連のメソッドを実際に定義しているクラス一覧

ほとんどの数値関連のメソッドはサブクラスで再定義されています。これは、
効率のためであったり上位抽象クラスで実装を定義することができなかったり
するためです。実際にどのメソッドがどのクラスに定義されているかは以下の
表を参照してください。

#@#  cary = [Numeric, Integer, Fixnum, Bignum, Float]
#@#  mary = cary.collect {|c| c.instance_methods(false)}
#@#  methods = mary.flatten.uniq.sort
#@#  
#@#  methods.each_with_index {|op, i|
#@#  if i % 10 == 0
#@#    heading = sprintf("%23s   %10s %10s %10s %10s %10s",
#@#                "", *cary.collect {|klass| klass.name.center(10)})
#@#    puts heading
#@#    puts "-" * heading.size
#@#  end
#@#
#@#  printf("%23s | %10s %10s %10s %10s %10s\n",
#@#        op, *mary.collect {|ms| (ms.member?(op) ? "o" : "-").center(10)})
#@#  }

#@if(version < '1.8.0')
                       Numeric    Integer     Fixnum     Bignum     Float
       ---------------------------------------------------------------------
                  % |     -          -          o          o          o
                  & |     -          -          o          o          -
                  * |     -          -          o          o          o
                 ** |     -          -          o          o          o
                  + |     -          -          o          o          o
                 +@ |     o          -          -          -          -
                  - |     -          -          o          o          o
                 -@ |     o          -          o          o          o
                  / |     -          -          o          o          o
                  < |     -          -          o          -          o
                       Numeric    Integer     Fixnum     Bignum     Float
       ---------------------------------------------------------------------
                 << |     -          -          o          o          -
                 <= |     -          -          o          -          o
                <=> |     o          -          o          o          o
                 == |     -          -          o          o          o
                === |     o          -          -          o          -
                  > |     -          -          o          -          o
                 >= |     -          -          o          -          o
                 >> |     -          -          o          o          -
                 [] |     -          -          o          o          -
                  ^ |     -          -          o          o          -
                       Numeric    Integer     Fixnum     Bignum     Float
       ---------------------------------------------------------------------
                abs |     o          -          o          o          o
               ceil |     o          o          -          -          o
                chr |     -          o          -          -          -
              clone |     o          -          -          -          -
             coerce |     o          -          -          o          o
                div |     -          -          -          o          -
             divmod |     o          -          o          o          o
             downto |     -          o          o          -          -
               eql? |     o          -          -          o          o
            finite? |     -          -          -          -          o
                       Numeric    Integer     Fixnum     Bignum     Float
       ---------------------------------------------------------------------
              floor |     o          o          -          -          o
               hash |     -          -          -          o          o
            id2name |     -          -          o          -          -
          infinite? |     -          -          -          -          o
           integer? |     o          o          -          -          -
             modulo |     o          -          o          o          o
               nan? |     -          -          -          -          o
               next |     -          o          o          -          -
           nonzero? |     o          -          -          -          -
          remainder |     o          -          -          o          -
                       Numeric    Integer     Fixnum     Bignum     Float
       ---------------------------------------------------------------------
              round |     o          o          -          -          o
               size |     -          -          o          o          -
               step |     -          o          o          -          -
               succ |     -          o          o          -          -
              times |     -          o          o          -          -
               to_f |     -          -          o          o          o
               to_i |     -          o          -          -          o
             to_int |     -          o          -          -          -
               to_s |     -          -          o          o          o
           truncate |     o          o          -          -          o
                       Numeric    Integer     Fixnum     Bignum     Float
       ---------------------------------------------------------------------
               type |     -          -          o          -          -
               upto |     -          o          o          -          -
              zero? |     o          -          o          o          o
                  | |     -          -          o          o          -
                  ~ |     -          -          o          o          -
#@else
 => ruby 1.8.6 (2007-06-18 patchlevel 5000) [i686-linux]
                           Numeric    Integer     Fixnum     Bignum     Float
           ---------------------------------------------------------------------
                      % |     -          -          o          o          o
                      & |     -          -          o          o          -
                      * |     -          -          o          o          o
                     ** |     -          -          o          o          o
                      + |     -          -          o          o          o
                     +@ |     o          -          -          -          -
                      - |     -          -          o          o          o
                     -@ |     o          -          o          o          o
                      / |     -          -          o          o          o
                      < |     -          -          o          -          o
                           Numeric    Integer     Fixnum     Bignum     Float
           ---------------------------------------------------------------------
                     << |     -          -          o          o          -
                     <= |     -          -          o          -          o
                    <=> |     o          -          o          o          o
                     == |     -          -          o          o          o
                      > |     -          -          o          -          o
                     >= |     -          -          o          -          o
                     >> |     -          -          o          o          -
                     [] |     -          -          o          o          -
                      ^ |     -          -          o          o          -
                    abs |     o          -          o          o          o
                           Numeric    Integer     Fixnum     Bignum     Float
           ---------------------------------------------------------------------
                   ceil |     o          o          -          -          o
                    chr |     -          o          -          -          -
                 coerce |     o          -          -          o          o
                    div |     o          -          o          o          -
                 divmod |     o          -          o          o          o
                 downto |     -          o          -          -          -
                   eql? |     o          -          -          o          o
                   fdiv |     o          -          o          o          -
                finite? |     -          -          -          -          o
                  floor |     o          o          -          -          o
                           Numeric    Integer     Fixnum     Bignum     Float
           ---------------------------------------------------------------------
                   hash |     -          -          -          o          o
                id2name |     -          -          o          -          -
              infinite? |     -          -          -          -          o
               integer? |     o          o          -          -          -
                 modulo |     o          -          o          o          o
                   nan? |     -          -          -          -          o
                   next |     -          o          -          -          -
               nonzero? |     o          -          -          -          -
                    quo |     o          -          o          o          -
              remainder |     o          -          -          o          -
                           Numeric    Integer     Fixnum     Bignum     Float
           ---------------------------------------------------------------------
                  round |     o          o          -          -          o
 singleton_method_added |     o          -          -          -          -
                   size |     -          -          o          o          -
                   step |     o          -          -          -          -
                   succ |     -          o          -          -          -
                  times |     -          o          -          -          -
                   to_f |     -          -          o          o          o
                   to_i |     -          o          -          -          o
                 to_int |     o          o          -          -          o
                   to_s |     -          -          o          o          o
                           Numeric    Integer     Fixnum     Bignum     Float
           ---------------------------------------------------------------------
                 to_sym |     -          -          o          -          -
               truncate |     o          o          -          -          o
                   upto |     -          o          -          -          -
                  zero? |     o          -          o          -          o
                      | |     -          -          o          o          -
                      ~ |     -          -          o          o          -       
#@end

=== 丸めメソッドのまとめ

#@#         numbers=[1.9, 1.1, -1.1, -1.9]
#@#         methods=%w(ceil floor round truncate)
#@#
#@#         fmt = "%5s |" + " %10s" * methods.size + "\n"
#@#
#@#         heading = sprintf(fmt, "", *methods)
#@#         puts heading
#@#         puts "-" * heading.size
#@#
#@#         numbers.each {|n|
#@#           printf(fmt, n,
#@#                  *methods.collect {|m| sprintf("%s", n.send(m))})
#@#         }
        
              |       ceil      floor      round   truncate
        ----------------------------------------------------
          1.9 |          2          1          2          1
          1.1 |          2          1          1          1
         -1.1 |         -1         -2         -1         -1
         -1.9 |         -1         -2         -2         -1

切上げはceil, floor を使用して以下のように定義できます。

  if n > 0 then
    n.ceil
  else
    n.floor
  end

また、任意桁の切上げ、切捨て、四捨五入を行うメソッドは以下のように
定義できます。

  class Numeric
    def roundup(d=0)
      x = 10**d
      if self > 0
        (self * x).ceil.quo(x)
      else
        (self * x).floor.quo(x)
      end
    end

    def rounddown(d=0)
      x = 10**d
      if self < 0
        (self * x).ceil.quo(x)
      else
        (self * x).floor.quo(x)
      end
    end

    def roundoff(d=0)
      x = 10**d
      if self < 0
        (self * x - 0.5).ceil.quo(x)
      else
        (self * x + 0.5).floor.quo(x)
      end
    end
  end

#@#        numbers=[0.19, 0.15, 0.11, -0.11, -0.15, -0.19]
#@#        methods=%w(roundup rounddown roundoff)
#@#        arg=1
#@#
#@#        fmt = "%5s |" + " %10s" * methods.size + "\n"
#@#
#@#        heading = sprintf(fmt, "", *methods)
#@#        puts heading
#@#        puts "-" * heading.size
#@#
#@#        numbers.each {|n|
#@#          printf(fmt, n,
#@#                 *methods.collect {|m| sprintf("%s", n.send(m, arg))})
#@#        }
#@#              |    roundup  rounddown   roundoff
#@#        -----------------------------------------
#@#         0.19 |        0.2        0.1        0.2
#@#         0.15 |        0.2        0.1        0.2
#@#         0.11 |        0.2        0.1        0.1
#@#        -0.11 |       -0.2       -0.1       -0.1
#@#        -0.15 |       -0.2       -0.1       -0.2
#@#        -0.19 |       -0.2       -0.1       -0.2

== Instance Methods

--- +@    -> self
#@todo

self を返します。

--- -@    -> Numeric
#@todo

self の符号を反転させたものを返します。

このメソッドは、二項演算子 - で 0 - self によって定義されています。

#@#--- ==(other)    -> boolean
#@##@todo
#@#
#@#self と other の値が等しいときに true、等しくないときに false を返します。
#@#other が Numeric で比較できないオブジェクトの場合、
#@#結合法則が成り立つことを仮定して other == self の結果を返します。

--- abs    -> Numeric
#@todo

自身が 0 以上ならば self を、そうでない場合は -self を返します。

--- ceil   -> Integer
#@todo

自身と等しいかより大きな整数のうち最小のものを返します。

自身を [[c:Float]] に変換し [[m:Float#ceil]] を呼ぶことにより実装されています。

     1.ceil        #=> 1
     1.2.ceil      #=> 2
     (-1.2).ceil   #=> -1
     (-1.5).ceil   #=> -1

--- floor   -> Integer
#@todo

自身と等しいかより小さな整数のうち最大のものを返します。

自身を [[c:Float]] に変換し [[m:Float#floor]] を呼ぶことにより実装されています。

     1.floor        #=> 1
     1.2.floor      #=> 1
     (-1.2).floor   #=> -2
     (-1.5).floor   #=> -2

--- round   -> Integer
#@todo

自身ともっとも近い整数を返します。

中央値 0.5, -0.5 はそれぞれ 1,-1 に切り上げされます。いわゆる四捨五入ですが、偶数丸めではありません。
自身を [[c:Float]] に変換し [[m:Float#round]] を呼ぶことにより実装されています。

     1.round        #=> 1
     1.2.round      #=> 1
     (-1.2).round   #=> -1
     (-1.5).round   #=> -2

--- truncate   -> Integer
#@todo

自身と 0 との間にある整数で、自身にもっとも近い整数を返します。

     1.truncate        #=> 1
     1.2.truncate      #=> 1
     (-1.2).truncate   #=> -1
     (-1.5).truncate   #=> -1

--- clone
--- dup
#@todo

#@since 1.8.0
このメソッドを呼び出すことはできません。呼び出すと例外が発生します。

数値などの immutable なオブジェクトは clone や dup が禁止されています。
  1.dup   # => in `clone': can't clone Fixnum (TypeError)
#@else
self を返します。
#@end

--- coerce(number)    -> Numeric
#@todo

number の型を自分と直接演算できる型に変換して
[number, self] という配列に格納して返します。数値クラ
スの算術演算子は通常自分と演算できないクラスをオペランドとして受け
取ると coerce を使って自分とオペランドを変換した上で演算を行
います。

--- div(other)    -> Integer
#@todo
self を other で割った整数の商 q を返します。

ここで、商 q と余り r は、それぞれ

  * self == other * q + r  
と
  * other > 0 のとき:  0     <= r < other
  * other < 0 のとき:  other <  r <= 0
  * q は整数
をみたす数です。

商に対応する余りは [[m:Numeric#modulo]] で求められます。

  p 3.div(2) # => 1
  p (-3).div(2) # => -2
  p (-3.0).div(2) # => -2

--- quo(other)    -> Float | Rational
#@todo

self を other で割った実数の商を返します。

  p 1.quo(3)      # => 0.3333333333333333
  
  require 'rational'
  p 1.quo(3)      # => Rational(1, 3)

--- divmod(other)    -> [Numeric]
#@todo

self を other で割った商 q と余り r を、
[q, r] という 2 要素の配列にして返します。
商 q は常に整数ですが、余り r は整数であるとは限りません。

ここで、商 q と余り r は、それぞれ

  * self == other * q + r  
と
  * other > 0 のとき:  0     <= r < other
  * other < 0 のとき:  other <  r <= 0
  * q は整数
をみたす数です。

divmod が返す商は [[m:Numeric#div]] と同じです。
また余りは、[[m:Numeric#modulo]] (つまり、%)と同じです。

このメソッドは、メソッド / と % によって定義されています。

--- integer?    -> boolean
#@todo

self が整数の時、真を返します。そうでない場合に false を返します。

--- modulo(other)    -> Numeric
self を other で割った余り r を返します。

ここで、商 q と余り r は、それぞれ

  * self == other * q + r  
と
  * other > 0 のとき  0 <= r < other
  * other < 0 のとき other < r <= 0
  * q は整数

をみたす数です。
余り r は、other と同じ符合になります。
商  q は、[[m:Numeric#div]] (あるいは Integer#/)で求められます。
modulo はメソッド % の呼び出しとして定義されています。

  p 13.modulo(4)      #=>  1
  p 13.modulo(-4)     #=> -3
  p (-13).modulo(4)   #=>  3
  p (-13).modulo(-4)  #=> -1

@see [[m:Numeric#divmod]]

--- remainder(other)    -> Numeric
#@todo

self を other で割った余り r を返します。

ここで、商 q と余り r は、それぞれ

  * self == other * q + r  
と

  * self > 0 のとき  0 <= r < |other|
  * self < 0 のとき -|other| < r <= 0
  * q は整数

をみたす数です。r の符号は self と同じになります。
商 q を直接返すメソッドはありません。self.quo(other).truncate がそれに相当します。

  p 13.remainder(4)      #=>  1
  p 13.remainder(-4)     #=>  1
  p (-13).remainder(4)   #=> -1
  p (-13).remainder(-4)  #=> -1

--- nonzero?    -> nil | self
#@todo

自身がゼロの時 nil を返し、非ゼロの時 self を返します。

--- to_int    -> Integer
#@todo

self.to_i と同じです。

--- zero?    -> boolean
#@todo

自身がゼロの時、真を返します。そうでない場合は false を返します。

--- step(limit) {|n| ... }
--- step(limit, step) {|n| ... }
#@todo

self からはじめ step を足しながら limit を越える
前までブロックを繰り返します。step は負の数も指定できます(省
略時は 1)。また、limit や step には [[c:Float]] なども
指定できます。

step に 0 を指定した場合は例外 [[c:ArgumentError]] が発生します。

self を返します。

#@since 1.8.0
このメソッドは、[[c:Fixnum]], [[c:Integer]] から移動しまし
た。これにより [[c:Float]] も step できるようになりました。

    1.1.step(1.5, 0.1) {|n| p n}
    => 1.1
       1.2
       1.3
       1.4
       1.5

注：浮動小数点数の 0.1 は 2進数では正確な表現ができない(2進数で
0.1は 0.00011001100....となる)ので、以下のようなループでは誤差が
生じて意図した回数ループしないことがある。step はこの誤差を考慮し
て実装されている。

    i = 1.1
    while i <= 1.5
      p i
      i += 0.1
    end
    => 1.1
       1.2
       1.3
       1.4   <- 1.5 が表示されない
#@end

#@since 1.8.0
--- <=> other
#@todo
#@# -> 0 or nil

Returns zero if num equals other, nil otherwise.

--- eql?
#@todo

#@end

#@since 1.9.0

--- scalar?
#@todo

#@end
