= class Fixnum < Integer

[[c:Bignum]] 同様、整数のクラスです。
演算の結果が Fixnum の範囲を越えた時には
自動的に [[c:Bignum]] に拡張されます。

マシンのポインタのサイズに収まる長さの固定長整数で、
ほとんどのマシンでは 31 ビット幅です。


=== 破壊的な変更

Ruby の Fixnum クラスは immutable です。
つまり、オブジェクト自体を破壊的に変更することはできません。
[[c:Bignum]] も同様です。

== Instance Methods

--- id2name -> String | nil

オブジェクトの整数値 self を、ある [[c:Symbol]] オブジェクトに対応する整数値とみなした上で、
そのシンボルを示す文字列を返します。
整数に対応するシンボルは必ずしも存在せず、その場合は nil を返します。

[[m:Symbol#to_i]] の逆変換のようですが、
返すのはシンボルではなく文字列です。

@return オブジェクト名を示す文字列か nil

例:

  :foo.to_i      #=> 14585
  14585.id2name  #=> "foo"
  1.id2name      #=> nil

[[m:Fixnum#to_sym]] で得たシンボルに対して
[[m:Symbol#to_s]] で文字列にしたものとおおかた一致しますが、
nil のときの挙動が異なります。

例:

  1.id2name     #=> nil
  1.to_sym.to_s #=> ""


#@since 1.8.0
--- to_sym -> Symbol | nil

オブジェクトの整数値 self に対応する [[c:Symbol]] オブジェク
トを返します。整数に対応するシンボルが存在しない時には nil
を返します。

[[m:Symbol#to_i]] の逆変換ととらえることができます。

@return シンボルか nil

例:

  :foo.to_i     #=> 14585
  14585.to_sym  #=> :foo
  1.to_sym      #=> nil

#@end

