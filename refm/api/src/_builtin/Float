= class Float < Numeric
include Precision

浮動小数点数のクラス。Float の実装は C 言語の double で、その精度は環
境に依存します。

一般にはせいぜい15桁です。詳しくは多くのシステムで採用されている
浮動小数点標準規格、IEEE (Institute of Electrical and
Electronics Engineers: 米国電気電子技術者協会) 754 を参照してください。

  # あるシステムでの 1/3(=0.333...) の結果
  printf("%.50f\n", 1.0/3)
  => 0.33333333333333331482961625624739099293947219848633

[[m:Math::PI]] など、浮動小数点演算に関する定数については [[c:Math]] を
参照のこと。

== Class Methods

--- induced_from(num) -> Float
num を Float に変換した結果を返します。

@param num 変換前の数値

@raise TypeError [[c:Fixnum]], [[c:Bignum]], [[c:Float]]以外を入力した場合に発生します


  p Float.induced_from(30) #=> 30.0
  p Float.induced_from(Math::PI) #=> 3.14159265358979
  begin
    Float.induced_from("1.732")
  rescue TypeError
    p $! #=> #<TypeError: failed to convert String into Float>
  end

== Instance Methods

--- +(other) -> Float
算術演算子。和を計算します。

@param other 二項演算の右側の引数(対象)

  # 和
  p 3.0 + 4.5 #=> 7.5

--- -(other) -> Float
算術演算子。差を計算します。

@param other 二項演算の右側の引数(対象)

  # 差
  p 4.5 - 1.3 #=> 3.2

--- *(other) -> Float
算術演算子。積を計算します。

@param other 二項演算の右側の引数(対象)

  # 積
  p 2.4 * 3   #=> 7.2


--- /(other) -> Float
算術演算子。商を計算します。

@param other 二項演算の右側の引数(対象)

  # 商 
  p 1.3 / 2.4 #=> 0.541666666666667
  p 1.0 / 0   #=> Infinity

--- %(other) -> Float
--- modulo(other) -> Float
算術演算子。剰余を計算します。

@param other 二項演算の右側の引数(対象)

  # 剰余
  p 3 % 1.2   #=> 0.6
  p 3.0 % 0   #=> NaN

--- **(other) -> Float
算術演算子。冪を計算します。

@param other 二項演算の右側の引数(対象)

  # 冪
  p 1.2 ** 3.0  #=> 1.728
  p 3.0 + 4.5 - 1.3 / 2.4 * 3 % 1.2 ** 3.0 #=> 5.875

--- <=>(other) -> nil | 1 | 0 | -1
self と other を比較して、self が大きい時に正、
等しい時に 0、小さい時に負の整数を返します。
比較できない場合はnilを返します

  p 3.05 <=> 3.14 #=> -1
  p 1.732 <=> 1.414  #=> 1
  p 3.3 - 3.3 <=> 0.0 #=> 0
  p 3.14 <=> "hoge" #=> nil
  p 3.14 <=> 0.0/0.0 #=> nil

--- ==(other) -> bool

比較演算子。数値として等しいか判定します。

ただし、NaN 同士の比較では常に false を返します。

@param other 比較対象の数値

@return      self と other が等しい場合 true を返します。
             そうでなければ false を返します。

  p 3.14 == 3.14000 #=> true
  p 3.14 == 3.1415  #=> false

  # NaN 同士では常に false 
  nan = 0.0/0
  p nan == nan          # => false

--- <(other)  -> bool
比較演算子。数値として小さいか判定します。

@param other 比較対象の数値
@return      self よりも other が大きい場合 true を返します。
             そうでなければ false を返します。

  p 3.14 <  3.1415  #=> true
  p 3.14 <= 3.1415  #=> true

--- <=(other) -> bool
比較演算子。数値として等しいまたは小さいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が大きい場合か、
             両者が等しい場合 true を返します。
             そうでなければ false を返します。

  p 3.14 <  3.1415  #=> true
  p 3.14 <= 3.1415  #=> true

--- >(other)  -> bool
比較演算子。数値として大きいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が小さい場合 true を返します。
             そうでなければ false を返します。

  p 3.14 >  3.1415  #=> false
  p 3.14 >= 3.1415  #=> false

--- >=(other) -> bool
比較演算子。数値として等しいまたは大きいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が小さい場合か、
             両者が等しい場合 true を返します。
             そうでなければ false を返します。

  p 3.14 >  3.1415  #=> false
  p 3.14 >= 3.1415  #=> false

--- finite? -> bool

数値が ∞, -∞, あるいは NaN でない場合に true を返します。
そうでない場合に false を返します。

  p 3.14.finite? #=> true
  inf = 1.0/0
  p inf.finite? #=> false

--- infinite? -> 1 | -1 | nil

数値が +∞ のとき 1、-∞のとき -1 を返します。それ以外は nil を返
します。

  inf = 1.0/0
  p inf
  p inf.infinite?
  
  => Infinity
     1
  
  inf = -1.0/0
  p inf
  p inf.infinite?
  
  => -Infinity
     -1

--- nan? -> bool

数値が NaN(Not a number)のとき真を返します。

  nan = 0.0/0.0
  p nan
  p nan.nan?
  
  => NaN
     true

--- to_f -> self
self を返します。

  p 3.14.to_f   #=> 3.14

--- to_i -> Integer
--- truncate -> Integer

小数点以下を切り捨てて値を整数に変換します。

   p 3.14.to_i   #=> 3

@see [[m:Numeric#round]], [[m:Numeric#ceil]], [[m:Numeric#floor]]

--- hash -> Fixnum
ハッシュ値を返します。

  pi1 = 3.14
  pi2 = 3.14
  pi3 = 3.1415

  p pi1.hash #=> 335364239
  p pi2.hash #=> 335364239
  p pi3.hash #=> 420540030

--- abs    -> Float

self の絶対値を返します。

自身が 0 以上ならば self を、そうでない場合は -self を返します。

--- ceil   -> Integer

自身と等しいかより大きな整数のうち最小のものを返します。

     1.0.ceil      #=> 1
     1.2.ceil      #=> 2
     (-1.2).ceil   #=> -1
     (-1.5).ceil   #=> -1

@see [[m:Float#floor]], [[m:Float#round]], [[m:Float#truncate]]

--- divmod(other) -> [Numeric]

self を other で割った商 q と余り r を、
[q, r] という 2 要素の配列にして返します。
#@since 1.8.5
商 q は常に整数ですが、余り r は整数であるとは限りません。
#@else
商 q 、余り r ともに Float になります。
#@end

ここで、商 q と余り r は、

  * self == other * q + r  
と
  * other > 0 のとき:  0     <= r < other
  * other < 0 のとき:  other <  r <= 0
  * q は整数
をみたす数です。
このメソッドは、メソッド / と % によって定義されています。

@param other 自身を割る数を指定します。

#@since 1.8.5
   11.divmod(3)         #=> [3, 2]
   (11.5).divmod(3.5)   #=> [3, 1.0]
   11.divmod(-3)        #=> [-4, -1]
   11.divmod(3.5)       #=> [3, 0.5]
   (-11).divmod(3.5)    #=> [-4, 3.0]
#@else
   11.divmod(3)         #=> [3, 2]
   (11.5).divmod(3.5)   #=> [3.0, 1.0]
   11.divmod(-3)        #=> [-4, -1]
   11.divmod(3.5)       #=> [3.0, 0.5]
   (-11).divmod(3.5)    #=> [-4.0, 3.0]
#@end

@see [[m:Numeric#div]], [[m:Numeric#modulo]]

--- floor  -> Integer

自身と等しいかより小さな整数のうち最大のものを返します。

     1.0.floor      #=> 1
     1.2.floor      #=> 1
     (-1.2).floor   #=> -2
     (-1.5).floor   #=> -2

@see [[m:Numeric#ceil]], [[m:Numeric#round]], [[m:Float#truncate]]

--- eql?(other)   -> bool

自身と other のクラスが等しくかつ == メソッドで比較して等しい場合に true を返します。
そうでない場合に false を返します。

@param other 自身と比較したい数値を指定します。

  1.0.eql?(1)   #=> false
  1.0.eql?(1.0) #=> true

--- round  -> Fixnum

自身ともっとも近い整数を返します。

中央値 0.5, -0.5 はそれぞれ 1,-1 に切り上げされます。
いわゆる四捨五入ですが、偶数丸めではありません。

     1.0.round      #=> 1
     1.2.round      #=> 1
     (-1.2).round   #=> -1
     (-1.5).round   #=> -2

@see [[m:Float#ceil]], [[m:Float#floor]], [[m:Float#truncate]]

--- zero?  -> bool

自身がゼロの時、真を返します。そうでない場合は false を返します。

  p 10.0.zero?            #=> false
  p 0.zero?               #=> true
  p 0.0.zero?             #=> true


#@if (version >= "1.8.0")

== Constants

--- DIG

Float が表現できる最大の 10 進桁数

--- EPSILON

1.0 + Float::EPSILON != 1.0 となる最小の値

--- MANT_DIG

仮数部の Float::RADIX 進法での桁数

--- MAX
Float が取り得る最大値

--- MIN

Float が取り得る最小値

--- MAX_10_EXP

最大の 10 進の指数

--- MIN_10_EXP

最小の 10 進の指数

--- MAX_EXP

最大の Float::RADIX 進の指数

--- MIN_EXP

最小の Float::RADIX 進の指数

--- RADIX

指数表現の基数

--- ROUNDS

丸めモード (-1: 不定、0: 0.0 の方向に丸め、1: 四捨五入、2:正の無限
大の方向に丸め、3:負の無限大の方向に丸め)
#@end
