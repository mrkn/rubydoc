= class File::Stat < Object

include Comparable

ファイルの情報を格納したオブジェクトのクラス。

[[c:FileTest]] に同名のモジュール関数がある場合はそれと同じ働きをします。ただ、
ファイル名を引数に取るかわりに Stat 自身について判定する点が違います。

  p File::Stat.new($0).directory? #=> false
  p FileTest.directory?($0) #=> false

以下の属性メソッドは、システムによってサポートされていない場合 0 が返ります。
#@if (version >= "1.8.0")
1.8.0 以降では nil が返ります。
#@end

  dev         デバイス番号(ファイルシステム)
#@since 1.8.2
  dev_major   dev の major 番号部
  dev_minor   dev の minor 番号部
#@end
  ino         i-node 番号
  mode        ファイルモード
  nlink       ハードリンクの数
  uid         オーナーのユーザID
  gid         オーナーのグループID
  rdev        デバイスタイプ(スペシャルファイルのみ)
  rdev_major  rdev の major 番号部
  rdev_minor  rdev の minor 番号部
  size        ファイルサイズ(バイト単位)
  blksize     望ましいI/Oのブロックサイズ
  blocks      割り当てられているブロック数
  atime       最終アクセス時刻
  mtime       最終更新時刻
  ctime       最終状態変更時刻(状態の変更とは chmod などによるもので、Unix では i-node の変更を意味します)

== Class Methods

--- new(path)

path に関する File::Stat オブジェクトを生成して返します。
[[m:File.stat]] と同じです。

  p $:[0] 
  #=> 例
  # "C:/Program Files/ruby-1.8/lib/ruby/site_ruby/1.8"
  p File::Stat.new($:[0])
  #=> 例
  #<File::Stat dev=0x2, ino=0, mode=040755, nlink=1, uid=0, gid=0, rdev=0x2, size=0, blksize=nil, blocks=nil, atime=Sun Sep 02 14:15:20 +0900 2007, mtime=Tue Apr 24 23:03:44 +0900 2007, ctime=Tue Apr 24 23:03:37 +0900 2007>

== Instance Methods

--- <=>(o) Fixnum | nil
ファイルの最終更新時刻を比較します。self が other よりも
新しければ正の数を、等しければ 0 を古ければ負の数を返します。
比較できない場合はnilを返します

  require 'tempfile' # for Tempfile

  fp1 = Tempfile.open("first")
  fp1.print "古い方\n"
  sleep(1)
  fp2 = Tempfile.open("second")
  fp2.print "新しい方\n"

  p File::Stat.new(fp1.path) <=> File::Stat.new(fp2.path) #=> -1
  p File::Stat.new(fp2.path) <=> File::Stat.new(fp1.path) #=>  1
  p File::Stat.new(fp1.path) <=> fp2.path #=> nil

--- ftype -> String
ファイルのタイプを表す文字列を返します。文字列は以下のうちの
いずれかです。

  "file"
  "directory"
  "characterSpecial"
  "blockSpecial"
  "fifo"
  "link"
  "socket"
  
  "unknown"

#@# あらい 2002-01-06: 今のところ "unknown" を返すことはないはず。
#@# もしそのようなことがあれば、バグ報告をした方が良いと思われる。
#@# Solaris の Door とかは unknown になる？

サンプル

  fs = File::Stat.new($0)
  p fs.ftype #=> "file"
  p File::Stat.new($:[0]).ftype #=> "directory"


#@#以下の属性メソッドは、システムによってサポートされていない場合 0 が返ります。
#@#@if (version >= "1.8.0")
#@#1.8.0 以降では nil が返ります。
#@#@end

--- dev -> String
デバイス番号(ファイルシステム)

  fs = File::Stat.new($0)
  p fs.dev 
  #例
  #=> 2
#@# WindowsXP ruby1.8.6 でテスト

#@since 1.8.2
--- dev_major -> Integer
dev の major 番号部

  fs = File::Stat.new($0)
  p fs.dev_major
  #例
  #=> nil #この場合ではシステムでサポートされていないため
#@# WindowsXP ruby1.8.6 でテスト

--- dev_minor -> Integer
dev の minor 番号部

  fs = File::Stat.new($0)
  p fs.dev_minor
  #例
  #=> nil
#@# WindowsXP ruby1.8.6 でテスト

#@end

--- ino -> Integer
i-node 番号

  fs = File::Stat.new($0)
  #例
  p fs.ino      #=> 0
#@# WindowsXP ruby1.8.6 でテスト

--- mode -> Integer
ファイルモード

  fs = File::Stat.new($0)
  printf "%o\n", fs.mode 
  #例
  #=> 100644
#@# WindowsXP ruby1.8.6 でテスト

--- nlink -> Integer
ハードリンクの数

  fs = File::Stat.new($0)
  #例
  p fs.nlink    #=> 1
#@# WindowsXP ruby1.8.6 でテスト

--- uid -> Integer
オーナーのユーザID

  fs = File::Stat.new($0)
  #例
  p fs.uid    #=> 0
#@# WindowsXP ruby1.8.6 でテスト

--- gid -> Integer
オーナーのグループID

  fs = File::Stat.new($0)
  #例
  p fs.gid      #=> 0
#@# WindowsXP ruby1.8.6 でテスト

--- rdev -> Integer
デバイスタイプ(スペシャルファイルのみ)

  fs = File::Stat.new($0)
  #例
  p fs.rdev     #=> 2
#@# WindowsXP ruby1.8.6 でテスト

--- rdev_major -> Integer
rdev の major 番号部

  fs = File::Stat.new($0)
  #例
  p fs.rdev_major #=> nil
#@# WindowsXP ruby1.8.6 でテスト

--- rdev_minor -> Integer
rdev の minor 番号部

  fs = File::Stat.new($0)
  #例
  p fs.rdev_minor #=> nil
#@# WindowsXP ruby1.8.6 でテスト

--- size -> Integer
ファイルサイズ(バイト単位)

  fs = File::Stat.new($0)
  #例
  p fs.size    #=> 1548
#@# WindowsXP ruby1.8.6 でテスト

--- blksize -> Integer
望ましいI/Oのブロックサイズ

  fs = File::Stat.new($0)
  #例
  p fs.blksize #=> nil
#@# WindowsXP ruby1.8.6 でテスト

--- blocks -> Integer
割り当てられているブロック数

  fs = File::Stat.new($0)
  #例
  p fs.blocks  #=> nil
#@# WindowsXP ruby1.8.6 でテスト

--- atime -> Time
最終アクセス時刻

  fs = File::Stat.new($0)
  #例
  p fs.atime.to_a  #=> [45, 5, 21, 5, 9, 2007, 3, 248, false, "\223\214\213\236 (\225W\217\200\216\236) "]
#@# WindowsXP ruby1.8.6 でテスト

@see [[c:Time]]

--- mtime -> Time
最終更新時刻

  fs = File::Stat.new($0)
  #例
  p fs.mtime   #=> Wed Sep 05 20:42:18 +0900 2007
#@# WindowsXP ruby1.8.6 でテスト

@see [[c:Time]]

--- ctime -> Time
最終状態変更時刻
(状態の変更とは chmod などによるもので、Unix では i-node の変更を意味します)

  fs = File::Stat.new($0)
  #例
  p fs.ctime.to_f   #=> 1188719843.0

#@# WindowsXP ruby1.8.6 でテスト

@see [[c:Time]]

--- directory? -> bool
ディレクトリの時に真

  p File::Stat.new($0).directory? #=> false

@see [[m:FileTest.directory?]]

--- readable? -> bool
読み込み可能な時に真

  p File::Stat.new($0).readable? #=> true

--- readable_real? -> bool
実ユーザ/実グループによって読み込み可能な時に真

  p File::Stat.new($0).readable_real? #=> true

--- writable? -> bool
書き込み可能な時に真

  p File::Stat.new($0).writable? #=> true

--- writable_real? -> bool
実ユーザ/実グループによって書き込み可能な時に真

  p File::Stat.new($0).writable_real? #=> true

--- executable? -> bool
実効ユーザ/グループIDで実行できる時に真

  p File::Stat.new($0).executable? 
  # 例
  #=> true

--- executable_real? -> bool
実ユーザ/グループIDで実行できる時に真

  p File::Stat.new($0).executable_real? 
  #例
  #=> true

--- file? -> bool
通常ファイルの時に真

  p File::Stat.new($0).file? #=> true

--- zero? -> bool
サイズが0である時に真

  p File::Stat.new($0).zero? #=> false

--- size? -> Integer | nil
サイズが0の時にはnil、それ以外の場合はファイルサイズを返します。

  require 'tempfile'

  fp = Tempfile.new("temp")
  p fp.size #=> 0
  p File::Stat.new(fp.path).size? #=> nil
  fp.print "not 0 "
  fp.close
  p FileTest.exist?(fp.path) #=> true
  p File::Stat.new(fp.path).size? #=> 6

--- owned?
#@todo
自分のものである時に真
--- grpowned?
#@todo
グループIDが実効グループIDと等しい時に真

補助グループIDは考慮されません。

--- pipe?
#@todo
無名パイプおよび名前つきパイプ(FIFO)の時に真
--- symlink?
#@todo
シンボリックリンクである時に真
--- socket?
#@todo
ソケットの時に真

--- blockdev?
#@todo
ブロックスペシャルファイルの時に真
--- chardev?
#@todo
キャラクタスペシャルファイルの時に真

--- setuid?
#@todo
setuidされている時に真
--- setgid?
#@todo
setgidされている時に真
--- sticky?
#@todo
stickyビットが立っている時に真

#@since 1.9.0
#@# bc-rdoc: detected missing name: world_readable?
--- world_readable? => fixnum or nil
#@todo

If stat is readable by others, returns an integer representing
the file permission bits of stat. Returns nil otherwise. The
meaning of the bits is platform dependent; on Unix systems, see
stat(2).

   m = File.stat("/etc/passwd").world_readable?  # => 420
   sprintf("%o", m)                              # => "644"

#@# bc-rdoc: detected missing name: world_writable?
--- world_writable? => fixnum or nil
#@todo

If stat is writable by others, returns an integer representing
the file permission bits of stat. Returns nil otherwise. The
meaning of the bits is platform dependent; on Unix systems, see
stat(2).

   m = File.stat("/tmp").world_writable?         # => 511
   sprintf("%o", m)                              # => "777"

#@end
