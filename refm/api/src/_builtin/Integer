= class Integer < Numeric
#@until 1.9.1
include Precision
#@end

整数の抽象クラス。サブクラスとして [[c:Fixnum]] と [[c:Bignum]] があり
ます。この 2 種類の整数は値の大きさに応じてお互いに自動的に変換されま
す。ビット操作において整数は無限の長さのビットストリングとみなすことが
できます。

== Class Methods

#@until 1.9.1
--- induced_from(num) -> Integer

num を Integer に変換した結果を返します。
引数が数値の場合は小数部が切り捨てられ、そうでない場合はTypeErrorをraiseします。

  Integer.induced_from 1.4  #=> 1
  Integer.induced_from 1.9  #=> 1
  Integer.induced_from -1.9 #=> -1
  Integer.induced_from '1'  #=> TypeError


include している [[c:Precision]] モジュールの [[m:Precision.induced_from]] を
上書きしています。

@param num   数値
@return      数値
#@end

== Instance Methods

--- [](nth) -> Fixnum

nth 番目のビット(最下位ビット(LSB)が 0 番目)が立っている時 1
を、そうでなければ 0 を返します。

@param nth  何ビット目を指すかの数値
@return     1 か 0

self[nth]=bit (つまりビットの修正) が Integer にないのは、Numeric 関連クラスが
immutable であるためです。


--- +(other) -> Fixnum | Bignum | Float

算術演算子。和を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

--- -(other) -> Fixnum | Bignum | Float

算術演算子。差を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

--- *(other) -> Fixnum | Bignum | Float

算術演算子。積を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

--- /(other) -> Fixnum | Bignum | Float

算術演算子。商を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

--- %(other) -> Fixnum | Bignum | Float

算術演算子。剰余を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

--- **(other) -> Fixnum | Bignum | Float

算術演算子。冪(べき乗)を計算します。

@param other 二項演算の右側の引数(対象)
@return 計算結果

--- <=>(other) -> Fixnum

self と other を比較して、self が大きい時に正、
等しい時に 0、小さい時に負の整数を返します。

@param other 比較対象の数値
@return      -1 か 0 か 1 のいずれか

  1 <=> 2 #=> -1
  1 <=> 1 #=> 0
  2 <=> 1 #=> 1

--- ==(other) -> bool

比較演算子。数値として等しいか判定します。

@param other 比較対象の数値
@return      self と other が等しい場合 true を返します。
             そうでなければ false を返します。

--- <(other)  -> bool

比較演算子。数値として小さいか判定します。

@param other 比較対象の数値
@return      self よりも other が大きい場合 true を返します。
             そうでなければ false を返します。

--- <=(other) -> bool

比較演算子。数値として等しいまたは小さいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が大きい場合か、
             両者が等しい場合 true を返します。
             そうでなければ false を返します。

--- >(other)  -> bool

比較演算子。数値として大きいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が小さい場合 true を返します。
             そうでなければ false を返します。

--- >=(other) -> bool

比較演算子。数値として等しいまたは大きいか判定します。

@param other 比較対象の数値
@return      self よりも other の方が小さい場合か、
             両者が等しい場合 true を返します。
             そうでなければ false を返します。

--- ~        -> Fixnum | Bignum
ビット演算子。否定を計算します。

  ~1  #=> -2
  ~3  #=> -4
  ~-4 #=> 3

--- |(other) -> Fixnum | Bignum
ビット二項演算子。論理和を計算します。

@param other 数値

  1 | 1 #=> 1
  2 | 3 #=> 3

--- &(other) -> Fixnum | Bignum
ビット二項演算子。論理積を計算します。

@param other 数値

  1 & 1 #=> 1
  2 & 3 #=> 2

--- ^(other) -> Fixnum | Bignum
ビット二項演算子。排他的論理和を計算します。

@param other 数値

  1 ^ 1 #=> 0
  2 ^ 3 #=> 1

--- <<(bits) -> Fixnum | Bignum

シフト演算子。 bits だけビットを左にシフトします。

@param bits シフトさせるビット数

    printf("%#b\n", 0b0101 << 1) #=> 0b1010
    p -1 << 1 #=> -2

--- >>(bits) -> Fixnum | Bignum
シフト演算子。bits だけビットを右にシフトします。

右シフトは、符号ビット(最上位ビット(MSB))が保持されます。
bitsが実数の場合、小数点以下を切り捨てた値でシフトします。

@param bits シフトさせるビット数

    printf("%#b\n", 0b0101 >> 1) #=> 0b10
    p -1 >> 1 #=> -1

--- chr -> String
文字コードに対応する 1 バイトの文字列を返します。

例えば65.chr は "A" を返します。

逆に文字列から文字コードを得るには "A"[0] とします

@return     1バイト文字列

@raise RangeError self が 0 から 255 の範囲外の場合に発生します。

@see [[m:String#[] ]]

--- downto(min) {|n| ... } -> self
#@since 1.8.7
--- downto(min) -> Enumerable::Enumerator
#@end

self から min まで 1 ずつ減らしながらブロックを繰り返し実行します。
self < min であれば何もしません。

@param min   数値
@return      self を返します。

@see [[m:Integer#upto]], [[m:Integer#step]], [[m:Integer#times]]

--- next -> Fixnum | Bignum
--- succ -> Fixnum | Bignum

self の次の整数を返します。

--- step(limit, step) {|n| ... } -> self

self からはじめ step を足しながら limit を越える
前までブロックを繰り返します。step は負の数も指定できます。
また、limit や step には [[c:Float]] なども指定できます。

#@since 1.8.0
[[m:Numeric#step]] も参照。
#@end

@param limit 数値
@param step  数値
@return      self を返します。
@raise ArgumentError step に 0 を指定した場合に発生します。

@see [[m:Integer#upto]], [[m:Integer#downto]], [[m:Integer#times]]

--- times {|n| ... } -> self
#@since 1.8.7
--- times -> Enumerable::Enumerator
#@end

self 回だけ(0 から self-1 まで)繰り返します。
self が負であれば何もしません。

@return      self を返します。

  3.times { puts "Hello, World!" }
  # Hello, World! と3行続いて表示される。

@see [[m:Integer#upto]], [[m:Integer#downto]], [[m:Integer#step]]

--- to_i   -> self
--- to_int -> self

self を返します。

--- size -> Fixnum

整数の実装上のサイズをバイト数で返します。

現在の実装では [[c:Fixnum]] は、sizeof(long) 固定(多くの 32
bit マシンで 4 バイト)、[[c:Bignum]]は、システム依存です。

    p 1.size
    p 0x1_0000_0000.size
    # => 4
         8

--- to_f -> Float

値を浮動小数点数([[c:Float]])に変換します。

--- to_s -> String
#@since 1.8.0
--- to_s(base) -> String
#@end

整数を 10 進文字列表現に変換します。

#@since 1.8.0
引数を指定すれば、それを基数とした文字列表
現に変換します。

    p 10.to_s(2)    # => "1010"
    p 10.to_s(8)    # => "12"
    p 10.to_s(16)   # => "a"
    p 35.to_s(36)   # => "z"
#@end

@return     数値の文字列表現
#@since 1.8.0
@param base 基数となる 2 - 36 の数値。
@raise ArgumentError base に 2 - 36 以外の数値を指定した場合に発生します。
#@end

--- upto(max) {|n| ... } -> Fixnum | Bignum
#@since 1.8.7
--- upto(max) -> Enumerable::Enumerator
#@end

self から max まで 1 ずつ増やしながら繰り返します。
self > max であれば何もしません。

@param max   数値
@return      self を返します。

@see [[m:Integer#downto]], [[m:Integer#step]], [[m:Integer#times]]

--- integer? -> true

常に真を返します。

#@since 1.8.7
--- even? -> bool

self が偶数であれば真を返します。

Returns true if int is an even number.

--- odd? -> bool

self が奇数であれば真を返します。


Returns true if int is an odd number.

--- ord    -> Integer
#@todo

Returns the int itself.

   ?a.ord    #=> 97

This method is intended for compatibility to character constant
in Ruby 1.9. For example, ?a.ord returns 97 both in 1.8 and 1.9.

--- pred    -> Integer

self から -1 した値を返します。

   1.pred      #=> 0
   (-1).pred   #=> -2

#@end
