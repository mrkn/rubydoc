= class File < IO
#@if (version < "1.8.0")
include File::Constant
#@end

ファイルアクセスのためのクラスです。

通常 [[m:Kernel.#open]] または [[m:File.open]] を使って生成します。
#@since 1.8.0
[[c:IO]] クラスがインクルードしている [[c:File::Constants]] は File クラスに関係する定数を
格納したモジュールです。
#@end
また [[c:File::Stat]] は stat 構造体( [[man:stat(2)]] 参照)を表すクラスです。

== Class Methods

--- atime(filename)    -> Time

最終アクセス時刻を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@raise Errno::EXXX ファイルの時刻の取得に失敗した場合に発生します。

--- ctime(filename)    -> Time

状態が最後に変更された時刻を返します。
状態の変更とは chmod などによるものです。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@raise Errno::EXXX ファイルの時刻の取得に失敗した場合に発生します。

--- mtime(filename)    -> Time

最終更新時刻を返します。

@param filename ファイル名を表す文字列か IO オブジェクトを指定します。

@raise Errno::EXXX ファイルの時刻の取得に失敗した場合に発生します。

--- basename(filename, suffix = "")     -> String

filename の一番後ろのスラッシュに続く要素を返します。もし、
引数 suffix が与えられて、かつそれが filename の末尾に
一致するなら、それを取り除いたものを返します。

  p File.basename("ruby/ruby.c")        #=> "ruby.c"
  p File.basename("ruby/ruby.c", ".c")  #=> "ruby"
  p File.basename("ruby/ruby.c", ".*")  #=> "ruby"
  p File.basename("ruby/ruby.exe", ".*")  #=> "ruby"

#@since 1.8.0
File.basename の動作は [[man:basename(3)]] 
#@#[[url:http://www.unix-systems.org/version3/online.html]]
に従います。
  p File.basename("foo/bar/")      # => "bar"
#@end

@param filename ファイル名を表す文字列を指定します。

@param suffix サフィックスを文字列で与えます。

@see [[m:File.dirname]], [[m:File.extname]]

--- chmod(mode, *filename)    -> Integer

ファイルのモードを mode に変更します。モードを変更したファイ
ルの数を返します。

@param filename ファイル名を表す文字列を指定します。

@param mode [[man:chmod(2)]] と同様に整数で指定します。

@raise Errno::EXXX モードの変更に失敗した場合に発生します。

--- lchmod(mode, *filename)    -> Integer

[[m:File.chmod]] と同様ですが、シンボリックリンクに関してリンクそのものの
モードを変更します。

@param filename ファイル名を表す文字列を指定します。

@param mode [[man:chmod(2)]] と同様に整数で指定します。

@raise NotImplementedError [[man:lchmod(2)]] を実装していないシステムでこのメソッドを呼び出すと発生します。

@raise Errno::EXXX モードの変更に失敗した場合に発生します。

--- chown(owner, group, *filename)    -> Integer

ファイルのオーナーとグループを変更します。スーパーユーザだけがファ
イルのオーナーとグループを変更できます。変更を行ったファイルの数を
返します。

@param filename ファイル名を表す文字列を指定します。

@param owner [[man:chown(2)]] と同様に数値で指定します。nil または -1 を指定することで、オーナーを現在のままにすることができます。

@param group [[man:chown(2)]] と同様に数値で指定します。nil または -1 を指定することで、グループを現在のままにすることができます。

@raise Errno::EXXX 変更に失敗した場合に発生します。

--- lchown(owner, group, *filename)    -> Integer

[[m:File#chown]] と同様ですが、
シンボリックリンクに関してリンクそのもののオーナー、
グループを変更します。

@param filename ファイル名を表す文字列を指定します。

@param owner [[man:chown(2)]] と同様に数値で指定します。nil または -1 を指定することで、オーナーを現在のままにすることができます。

@param group [[man:chown(2)]] と同様に数値で指定します。nil または -1 を指定することで、グループを現在のままにすることができます。

@raise NotImplementedError [[man:lchown(2)]] を実装していないシステムでこのメソッドを呼び出すと発生します。

--- delete(*filename)    -> Integer
--- unlink(*filename)    -> Integer

ファイルを削除します。削除したファイルの数を返します。
削除に失敗した場合は例外 [[c:Errno::EXXX]] が発生します。

このメソッドは通常ファイルの削除用で、ディレクトリの削除には
[[m:Dir.rmdir]] を使います。

@param filename ファイル名を表す文字列を指定します。

@raise Errno::EXXX 失敗した場合に発生します。

--- dirname(filename)    -> String

filename の一番後ろのスラッシュより前を文
字列として返します。スラッシュを含まないファイル名に対しては
"."(カレントディレクトリ)を返します。

    p File.dirname("dir/file.ext")    # => "dir"
    p File.dirname("file.ext")        # => "."

#@if (version >= "1.8.0")
File.dirname の動作は [[man:dirname(3)]]
#@#[[url:http://www.unix-systems.org/version3/online.html]] 
に従います。
    p File.dirname("foo/bar/")      # => "foo"
    p File.dirname("foo//bar")      # => "foo"
#@end

@param filename ファイル名を表す文字列を指定します。

@see [[m:File.basename]], [[m:File.extname]]

--- expand_path(path, default_dir = '.')    -> String

path を絶対パスに展開した文字列を返します。
path が相対パスであれば default_dir を基準にします。

先頭の ~ はホームディレクトリ(環境変数 HOME が使われます)に、
~USER はそのユーザのホームディレクトリに展開されます。

  p File.expand_path("..")         #=> "/home/matz/work"
  p File.expand_path("..", "/tmp") #=> "/"
  p File.expand_path("~")          #=> "/home/matz"
  p File.expand_path("~foo")       #=> "/home/foo"

@param path パスを表す文字列を指定します。

@param default_dir path が相対パスであれば default_dir を基準に展開されます。

--- extname(filename)    -> String

ファイル名 filename の拡張子部分(最後の "." に続く文字列)を
返します。ディレクトリ名に含まれる "." や、ファイル名先頭の "."
は拡張子の一部としては見なされません。filename に拡張子が含
まれない場合は空文字列を返します。

  p File.extname("foo/foo.txt")     # => ".txt"
  p File.extname("foo/foo.tar.gz")  # => ".gz"
  p File.extname("foo/bar")         # => ""
  p File.extname("foo/.bar")        # => ""
  p File.extname("foo.txt/bar")     # => ""
  p File.extname(".foo")            # => ""

@param filename ファイル名を表す文字列を指定します。

@see [[m:File.basename]], [[m:File.dirname]]

--- fnmatch(pattern, path, flags = 0)     -> bool 
--- fnmatch?(pattern, path, flags = 0)    -> bool

ファイル名のパターンマッチ [[man:fnmatch(3)]] を行います。
path が pattern にマッチすれば真を返します。そうでない場合には false を返します。

@param pattern パターンを文字列で指定します。ワイルドカードとして `*', `?', `[]' が使用できま
す。[[m:Dir.glob]] とは違って `{}' や `**/' は使用できません。

    %w(foo foobar bar).each {|f|
      p File.fnmatch("foo*", f)
    }
    # => true
         true
         false

@param path パスを表す文字列を指定します。

@param flags 以下の [[c:File::Constants]] で定義されている定数を論理和で指定することで、パターンマッチの動作を変更することができます。flags のデフォルト値は0(フラグ指定なし)です。

: FNM_NOESCAPE
 エスケープ文字 `\' を普通の文字とみなします。
//emlist{
  # デフォルトでは \ を伴う任意の文字はその文字にマッチしますが、
  # このフラグをつけると、\ が普通の文字として扱われます。
  p File.fnmatch('\a', 'a')                       # => true
  p File.fnmatch('\a', '\a', File::FNM_NOESCAPE)  # => true

  # 前者で * は、エスケープされているので "*" そのものにマッチ
  # します。
  p File.fnmatch('\*', 'a')                       # => false
  p File.fnmatch('\*', '\a', File::FNM_NOESCAPE)  # => true

  # 単体の \ は、このフラグの有無に関わらず \ にマッチします。
  # (シングルクォート文字列中では \\ は、\ であることに注意)
  p File.fnmatch('\\', '\\')                      # => true
  p File.fnmatch('\\', '\\', File::FNM_NOESCAPE)  # => true
//}
: FNM_PATHNAME
 ワイルドカード `*', `?', `[]' が `/' にマッチしなくなります。
 シェルのパターンマッチにはこのフラグが使用されています。
//emlist{
  p File.fnmatch('*', '/', File::FNM_PATHNAME)   # => false
  p File.fnmatch('?', '/', File::FNM_PATHNAME)   # => false
  p File.fnmatch('[/]', '/', File::FNM_PATHNAME) # => false
//}
: FNM_CASEFOLD
 アルファベットの大小文字を区別せずにパターンマッチを行います。
//emlist{
  p File.fnmatch('A', 'a', File::FNM_CASEFOLD)   # => true
//}
: FNM_DOTMATCH
 ワイルドカード `*', `?', `[]' が先頭の `.' にマッチするようになります。
//emlist{
  p File.fnmatch('*', '.', File::FNM_DOTMATCH)           # => true
  p File.fnmatch('?', '.', File::FNM_DOTMATCH)           # => true
  p File.fnmatch('[.]', '.', File::FNM_DOTMATCH)         # => true
  p File.fnmatch('foo/*', 'foo/.', File::FNM_DOTMATCH)   # => true
//}

--- ftype(filename)    -> String

ファイルのタイプを表す文字列を返します。文字列は以下のうちのいずれ
かです。File.lstat(filename).ftype と同じで
す。シンボリックリンクに対して "link" を返します。

 * "file"
 * "directory"
 * "characterSpecial"
 * "blockSpecial"
 * "fifo"
 * "link"
 * "socket"
 * "unknown"

@param filename ファイル名を表す文字列を指定します。 

@raise Errno::EXXX 情報の取得に失敗した場合に発生します。

--- join(*item)    -> String

File::SEPARATORを間に入れて文字列を連結します。

  [item, item, ...].join(File::SEPARATOR)

と同じです。[[unknown:DOSISH 対応]]で環境依存になる予定です。

@param item 連結したいディレクトリ名やファイル名を文字列で与えます。

--- link(old, new)    -> 0

old を指す new という名前のハードリンクを
生成します。old はすでに存在している必要があります。
ハードリンクに成功した場合は 0 を返します。

失敗した場合は例外 [[c:Errno::EXXX]] が発生します。

@param old ファイル名を表す文字列を指定します。 

@param new ファイル名を表す文字列を指定します。 

@raise Errno::EXXX 失敗した場合に発生します。

--- new(path, mode = "r", perm = 0666)                -> File 
--- open(path, mode = "r", perm = 0666)               -> File 
--- open(path, mode = "r", perm = 0666) {|file| ... } -> object

path で指定されるファイルをオープンし、[[c:File]] オブジェクトを生成して
返します。path が整数の場合はファイルディスクリプタとして扱い [[m:IO.open]] を呼びます。

ブロックを指定して呼び出した場合は、File オブジェクトを引数として
ブロックを実行します。ブロックの実行が終了すると、ファイルは自動的に
クローズされます。ブロックの実行結果を返します。

@param path ファイルを文字列で指定します。整数を指定した場合はファイルディスクリプタとして扱います。

@param mode モードを文字列で指定します。[[m:Kernel.#open]] と同じです。

@param perm ファイルを生成する場合のファイルのパーミッションを整数で指定します。[[m:Kernel.#open]] と同じです。

@raise Errno::EXXX ファイルのオープンに失敗した場合に発生します。

#@since 1.9.0
--- path(filename)    -> String

指定されたファイル名を文字列で返します。filename が文字列でない場合は、to_path メソッドを呼びます。

@param filename ファイル名を表す文字列か to_path メソッドが定義されたオブジェクトを指定します。
#@end

--- readlink(path)    -> String

シンボリックリンクのリンク先のパスを文字列で返します。

@param path シンボリックリンクを表す文字列を指定します。

@raise Errno::EXXX 指定された path がシンボリックリンクでない場合や、リンクの読み取りに失敗した場合に発生します。

--- rename(from, to)    -> 0

ファイルの名前を変更します。ディレクトリが異なる場合には移動も行い
ます。[[man:rename(2)]] を参照してください。移動先のファ
イルが存在する時には上書きされます。

ファイルの移動に成功した場合 0 を返します。失敗した場合は例外
[[c:Errno::EXXX]] が発生します。

@param from ファイルの名前を文字列で与えます。

@param to 新しいファイル名を文字列で与えます。

@raise Errno::EXXX 失敗した場合に発生します。

--- split(pathname)    -> [String]

pathname を dirname とbasename に分割して、2 要
素の配列を返します。

  [File.dirname(pathname), File.basename(pathname)]

と同じです。

@param pathname パス名を表す文字列を指定します。 

--- stat(filename)    -> File::Stat

filename の情報を含む [[c:File::Stat]] オブジェクトを生成し
て返します。

@param filename ファイル名を表す文字列を指定します。 

@raise Errno::EXXX 情報の取得に失敗した場合に発生します。

@see [[m:IO#stat]], [[m:File#lstat]]

--- lstat(filename)   -> File::Stat

[[m:File.stat]]と同様ですが、シンボリックリンクに関してリンクそのものの
情報を File::Stat として返します。[[man:lstat(2)]] を実装していないシステムでは、File.stat と同じです。

@param filename ファイル名を表す文字列を指定します。 

@raise Errno::EXXX 情報の取得に失敗した場合に発生します。

@see [[m:IO#stat]], [[m:File#lstat]]

--- symlink(old, new)    -> 0

old への new という名前のシンボリックリンクを生成します。

シンボリックリンクの作成に成功すれば 0 を返します。失敗した場合は
例外 [[c:Errno::EXXX]] が発生します。

@param old ファイル名を表す文字列を指定します。 

@param new シンボリックリンクを表す文字列を指定します。 

@raise Errno::EXXX 失敗した場合に発生します。

--- truncate(path, length)    -> 0

path で指定されたファイルのサイズを最大 length バイト
にします。

サイズの変更に成功すれば 0 を返します。失敗した場合は例外
[[c:Errno::EXXX]] が発生します。

@param path パスを表す文字列を指定します。

@param length 変更したいサイズを整数で与えます。

@raise Errno::EXXX 失敗した場合に発生します。

--- umask           -> Integer

現在の umask の値を返します。

--- umask(umask)    -> Integer

umask を変更します。変更前の umask の値を返します

@param umask 設定したい umask の値を整数で指定します。

--- utime(atime, mtime, *filename)    -> Integer

ファイルの最終アクセス時刻と更新時刻を変更します。変更したファイル
の数を返します。変更に失敗した場合は例外 [[c:Errno::EXXX]] が発生
します。

@param filename ファイル名を表す文字列を指定します。 

@param atime 最終アクセス時刻を [[c:Time]] か、起算時からの経過秒数を数値で指定します。

@param utime 更新時刻を [[c:Time]] か、起算時からの経過秒数を数値で指定します。

@raise Errno::EXXX 変更に失敗した場合に発生します。

--- blockdev?(path)    -> bool

[[m:FileTest.#blockdev?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- chardev?(path)    -> bool

[[m:FileTest.#chardev?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- directory?(path)    -> bool

[[m:FileTest.#directory?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- executable?(path)    -> bool

[[m:FileTest.#executable?]] と同じです。

@param path パスを表す文字列を指定します。

--- executable_real?(path)    -> bool

[[m:FileTest.#executable_real?]] と同じです。

@param path パスを表す文字列を指定します。

--- exist?(path)    -> bool

[[m:FileTest.#exist?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- exists?(path)    -> bool

このメソッドはobsoleteです。

[[m:FileTest.#exist?]] と同じです。
[[m:File#exist?]]を使って下さい。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- file?(path)    -> bool

[[m:FileTest.#file?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- grpowned?(path)    -> bool

[[m:FileTest.#grpowned?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- owned?(path)    -> bool

[[m:FileTest.#owned?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- identical?(filename1, filename2)    -> bool

[[m:FileTest.#identical?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- pipe?(path)    -> bool

[[m:FileTest.#pipe?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- readable?(path)    -> bool

[[m:FileTest.#readable?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- readable_real?(path)    -> bool

[[m:FileTest.#readable_real?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- setgid?(path)    -> bool

[[m:FileTest.#setgid?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- setuid?(path)    -> bool

[[m:FileTest.#setuid?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- size(path)    -> Integer

[[m:FileTest.#size]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- size?(path)    -> bool

[[m:FileTest.#size?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- socket?(path)    -> bool

[[m:FileTest.#socket?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- sticky?(path)    -> bool

[[m:FileTest.#sticky?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- symlink?(path)    -> bool

[[m:FileTest.#symlink?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- writable?(path)    -> bool

[[m:FileTest.#writable?]] と同じです。

@param path パスを表す文字列を指定します。

--- writable_real?(path)    -> bool

[[m:FileTest.#writable_real?]] と同じです。

@param path パスを表す文字列を指定します。

--- zero?(path)    -> bool

[[m:FileTest.#zero?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

#@since 1.9.0
--- world_readable?(path)    -> Integer | nil

path が全てのユーザから読めるならばそのファイルのパーミッションを表す
整数を返します。そうでない場合は nil を返します。

整数の意味はプラットフォームに依存します。

@param path パスを表す文字列か IO オブジェクトを指定します。

   m = File.world_readable?("/etc/passwd")
   "%o" % m                               # => "644"

--- world_writable?(path)    -> bool

path が全てのユーザから書き込めるならば、そのファイルのパーミッションを表す
整数を返します。そうでない場合は nil を返します。

整数の意味はプラットフォームに依存します。

@param path パスを表す文字列か IO オブジェクトを指定します。

   m = File.world_writable?("/tmp")
   "%o" % m                               #=> "777"
#@end

== Instance Methods

--- atime    -> Time

最終アクセス時刻を Time オブジェクトとして返します。

@raise IOError 自身が close されている場合に発生します。

@raise Errno::EXXX ファイルの時刻の取得に失敗した場合に発生します。

--- ctime    -> Time

状態が最後に変更された時刻を Time オブジェクトとして返します。状態の変更とは chmod などによるものです。

@raise IOError 自身が close されている場合に発生します。

@raise Errno::EXXX ファイルの時刻の取得に失敗した場合に発生します。

--- mtime    -> Time

最終更新時刻を Time オブジェクトとして返します。

@raise IOError 自身が close されている場合に発生します。

@raise Errno::EXXX ファイルの時刻の取得に失敗した場合に発生します。

--- chmod(mode)    -> 0

ファイルのモードを指定された mode に変更します。モードの変更に成功した
場合は 0 を返します。失敗した場合は例外 [[c:Errno::EXXX]] が発生し
ます。

@param mode [[man:chmod(2)]] と同様に整数で指定します。

@raise IOError 自身が close されている場合に発生します。

@raise Errno::EXXX 失敗した場合に発生します。

--- chown(owner, group)    -> 0

ファイルのオーナーとグループを変更します。スーパーユーザだけがファ
イルのオーナーとグループを変更できます。所有者の変更に成功した場合
は 0 を返します。変更に失敗した場合は例外 [[c:Errno::EXXX]] が発生
します。

@param owner [[man:chown(2)]] と同様に数値で指定します。nil または -1 を指定することで、オーナーを現在のままにすることができます。

@param group [[man:chown(2)]] と同様に数値で指定します。nil または -1 を指定することで、グループを現在のままにすることができます。

@raise IOError 自身が close されている場合に発生します。

@raise Errno::EXXX 失敗した場合に発生します。

--- flock(operation)    -> 0 | false

ファイルをロックします。ロックを取得するまでブロックされます。
ロックの取得に成功した場合は 0 を返します。
File::LOCK_NB (ノンブロッキング) を指定すると、本来ならブロックされる場合に
ブロックされずに false を返すようになります。

@param operation [[c:File::Constants]] モジュールで定義されている定数を指定します。
       有効な operation は以下の通りです。

: LOCK_SH
 共有ロック。複数のプロセスが同時にロックを共有できます。
 システムによってはロック対象のファイルは読み込みモード
 ("r", "r+" など)でオープンされている必要があります。そのよ
 うなシステムでは読み込み可能でないファイルに対するロックは例外
 [[c:Errno::EXXX]] が発生するかもしれません。
: LOCK_EX
 排他ロック。同時にはただひとつのプロセスだけがロックを保持できます。
 システムによってはロック対象のファイルは書き込みモード
 ("w", "r+" など)でオープンされている必要があります。そのよ
 うなシステムでは書き込み可能でないファイルに対するロックは例外
 [[c:Errno::EXXX]] が発生するかもしれません。
: LOCK_UN
 アンロック。
 この明示的なアンロック以外に、Rubyインタプリタの終了
 (プロセスの終了)によっても自動的にロック状態は解除されます。
: LOCK_NB
 ノンブロックモード。
 File::LOCK_SH | File::LOCK_NB のように他の指定と or することで指
 定します。この指定がない場合、ブロックされる条件での flock
 の呼び出しはロックが解除されるまでブロックされます。

File::LOCK_NB の指定がある場合、ブロックされる条件での
flock は false を返します。

「ブロックされる条件」とは以下のいずれかです。
  * 他のプロセスが排他ロックをすでに行っている場合にロックを行う
  * 他のプロセスがロックしている状態で排他ロックを行う

@raise IOError 自身が close されている場合に発生します。

@raise Errno::EXXX operation に不正な整数を与えた場合などに発生します。

    f = File.open("/tmp/foo", "w")

    f.flock(File::LOCK_EX)
    puts "locked by process1"

    fork {
      f = File.open("/tmp/foo", "r")
      f.flock(File::LOCK_SH)
      puts "locked by process2"
      sleep 5
      puts "unlocked by process2"
    }

    sleep 5

    f.flock(File::LOCK_UN)
    puts "unlocked by process1"
    sleep 1 # <- 子プロセスが確実に先にロックするための sleep
    f.flock(File::LOCK_EX)
    puts "re-locked by process1"

    => locked by process1
       unlocked by process1
       locked by process2
       unlocked by process2
       re-locked by process1

--- path    -> String

オープン時に使用したパスを文字列で返します。

--- lstat    -> File::Stat

ファイルの状態を含む [[c:File::Stat]] オブジェクトを生成して返します。
シンボリックリンクに関してリンクそのものの情報を返します。
[[man:lstat(2)]] を実装していないシステムでは、[[m:IO#stat]]と同じです。

@raise Errno::EXXX 失敗した場合に発生します。

@raise IOError 自身が close されている場合に発生します。

@see [[m:IO#stat]], [[m:File.stat]], [[m:File.lstat]]

--- truncate(length)    -> 0

ファイルのサイズを最大 length バイトにします。

サイズの変更に成功すれば 0 を返します。失敗した場合は例外
[[c:Errno::EXXX]] が発生します。

@raise IOError 自身が書き込み用にオープンされていなければ発生します。

@raise Errno::EXXX サイズの変更に失敗した場合に発生します。

== Constants

--- ALT_SEPARATOR

システムのファイルパスのセパレータが SEPARATOR と異なる場合
に設定されます。MS-DOS などでは "\" です。UNIX や
[[c:Cygwin]] などでは nil です。

--- PATH_SEPARATOR

PATH 環境変数の要素のセパレータです。UNIX では ":" MS-DOS な
どでは ";" です。

--- SEPARATOR
--- Separator

ファイルパスのセパレータです。ファイルを扱うメソッドにパス名を渡す
場合などスクリプト内のパス名は環境によらずこのセパレータで統一され
ます。値は "/" です。

