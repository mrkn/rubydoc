= class Exception < Object

全ての例外の祖先のクラスです。

== Class Methods

--- new(error_message = nil)
--- exception(error_message = nil)

例外オブジェクトを生成して返します。

@param error_message エラーメッセージを表す文字列を指定します。このメッセージは
                     属性 [[m:Exception#message]] の値になり、デフォルトの例外ハンドラで表示されます。

== Instance Methods

--- exception                   -> self
--- exception(error_message)    -> Exception

引数を指定しない場合は self を返します。引数を指定した場合 自身のコピー
を生成し [[m:Exception#message]] 属性を error_message にして返します。

[[m:Kernel.#raise]] は、実質的に、例外オブジェクトの exception
メソッドの呼び出しです。

@param error_message エラーメッセージを表す文字列を指定します。

  begin
   ...        # 何か処理
  rescue => e
   raise e.exception("an error occurs during hogehoge process")  # 詳しいエラーメッセージ
  end

--- backtrace    -> [String]

バックトレース情報を返します。デフォルトでは

  * "#{sourcefile}:#{sourceline}:in `#{method}'"
    (メソッド内の場合)
  * "#{sourcefile}:#{sourceline}"
    (トップレベルの場合)

という形式の [[c:String]] の配列です。

 def methd
   raise
 end
 
 begin
   methd
 rescue => e
   p e.backtrace
 end
 
 #=> ["filename.rb:2:in `methd'", "filename.rb:6"]

--- message    -> String
--- to_s       -> String
--- to_str    -> String

エラーメッセージをあらわす文字列を返します。

  begin 
    1 + nil 
  rescue => e
    p e.message   #=>  "nil can't be coerced into Fixnum"
  end

--- set_backtrace(errinfo)    -> nil | String | [String]

バックトレース情報に errinfo を設定し、設定されたバックトレース
情報を返します。

@param errinfo nil、[[c:String]] あるいは [[c:String]] の配列のいずれかを指定します。

#@since 1.9.0
--- ==(other)    -> bool

自身と指定された other のクラスが同じであり、message と backtrace が == メソッドで比較して
等しい場合に true を返します。そうでない場合に false を返します。

@param other 自身と比較したいオブジェクトを指定します。

#@end