= object ARGF

extend Enumerable

スクリプトに指定した引数
([[m:Kernel::ARGV]] を参照) をファイル名とみなして、
それらのファイルを連結した 1 つの仮想ファイルを表すオブジェクトです。
ARGV が空なら標準入力を対象とします。
ARGV を変更すればこのオブジェクトの動作に影響します。

    while line = ARGF.gets
      ....
    end

は、

    while argv = ARGV.shift
      File.open(argv) {|file|
        while line = file.gets
          ....
        end
      }
    end

のように動作します。

ARGF を処理するごとに ARGV の要素は一つずつ取り除かれます。
最後まで ARGF を読み込んだ後、再度 ARGF から内容を読むと
(ARGV が空なので)標準入力からの読み込みとなります。

    ARGV.replace %w(/tmp/foo /tmp/bar)
    ARGF.each {|line|
        # 処理中の ARGV の内容を表示
        p [ARGF.filename, ARGV]
        ARGF.skip
    }
        # => ["/tmp/foo", ["/tmp/bar"]]
        #    ["/tmp/bar", []]
    # 最後まで読んだ後 (ARGV が空) の動作
    p ARGF.gets      # => nil
    p ARGF.filename  # => "-"

[[m:Kernel#gets]] など一部の組み込み関数は
ARGF.gets などこのオブジェクトをレシーバとしたメソッドの省略形です。

#@if (version >= "1.8.0")
--- filename -> String
--- path -> String

処理対象のファイル名を返します。
標準入力に対しては - を返します。
組み込み変数 [[m:$FILENAME]] と同じです。

  # カレントディレクトリから適当にファイルを選ぶ
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each {|line|
    p [ARGF.filename, ARGF.path, ARGV]
    ARGF.skip
  }
  #例
  #=> ["test.rb", "test.rb", ["test.rb~", "third.txt", "ugo.yaml"]]
  #=> ["test.rb~", "test.rb~", ["third.txt", "ugo.yaml"]]
  #...

--- to_s -> String
常に文字列 "ARGF" を返します。

  # カレントディレクトリから適当にファイルを選ぶ
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  while line = ARGF.gets
    p [ARGF.filename, ARGF.to_s, ARGV]
    ARGF.skip
  end

  #例
  #=> ["test.rb", "ARGF", ["test.rb~", "third.txt", "ugo.yaml"]]
  #=> ["test.rb~", "ARGF", ["third.txt", "ugo.yaml"]]
  #...

#@else

--- filename -> String
--- to_s -> String

処理対象のファイル名を返します。
標準入力に対しては - を返します。
組み込み変数 [[m:$FILENAME]] と同じです。
#@end

--- file -> IO
#@todo

処理対象の [[c:File]] オブジェクト(または [[c:IO]] オブジェクト)を
返します。

--- lineno -> Integer

全引数ファイルを一つのファイルとみなしたときの現在の行番号を返します。
個々の引数ファイル毎の行番号を得るには ARGF.file.lineno とします。

  # カレントディレクトリから適当にファイルを選ぶ
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each {|line|
    if ARGF.lineno < 10
      ARGF.lineno = 10
    end
    p [ ARGF.lineno, line]
  }
  #例
  #=> [10, "cat:\n"]
  #=> [11, " - name: taro\n"]
  #=> [12, "   age: 7\n"]
  #...

--- lineno=(number) -> nil
全引数ファイルを一つのファイルとみなしたときの現在の行番号をnumberに書き換えます

@param number 更新後の行番号を指定する

  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )

  ARGF.each {|line|
    if ARGF.lineno == 4
      ARGF.lineno = 5
    end
    p [ARGF.lineno, line]
  }
  #=> 例
  #=> [1, "cat:\n"]
  #=> [2, " - name: taro\n"]
  #=> [3, "   age: 7\n"]
  #=> [5, " - name: jiro\n"] 
  #=> [6, "   age: 23\n"]
  # ...

--- skip -> self

処理対象のファイルをクローズします。
次回の読み込みは次の引数が処理対象になります。
self を返します。

  # カレントディレクトリから適当にファイルを選ぶ
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  while line = ARGF.gets
    p [ARGF.filename, ARGV, ARGF.skip]
  end
  #例
  #=> ["sample.yaml", ["test.rb", "test.rb~", "third.txt", "ugo.yaml"], ARGF]
  #=> ["test.rb", ["test.rb~", "third.txt", "ugo.yaml"], ARGF]
  #...


--- binmode -> self
#@todo
[[m:IO#binmode]]を参照

--- close -> self
処理対象のファイルをクローズします。開くファイルが残っている場合は次のファイルをオープンします

  # カレントディレクトリから適当にファイルを選ぶ
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each {|line|
    p [ line.chomp, ARGF.filename ]
    ARGF.close
    if ARGF.closed?
      p "ARGF is closed."
    else
      p "ARGF is not closed"
    end
  }
  if ARGF.closed?
    p "ARGF had been closed."
  else
    p "ARGF is not closed"
  end
  
  #例
  #=> ["cat:", "sample.yaml"]
  #=> "ARGF is not closed"
  #=> ["", "test.rb"]
  #=> "ARGF is not closed"
  #=> ["--- !ruby/object:Dog ", "ugo.yaml"]
  #=> "ARGF is closed."
  #=> "ARGF had been closed."

--- closed? -> boolean
ARGFがcloseされていればtrueを返します。

  # カレントディレクトリから適当にファイルを選ぶ
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each {|line|
    p [ line.chomp, ARGF.filename ]
    ARGF.close
    if ARGF.closed?
      p "ARGF is closed."
    else
      p "ARGF is not closed"
    end
  }
  if ARGF.closed?
    p "ARGF had been closed."
  else
    p "ARGF is not closed"
  end
  
  #例
  #=> ["cat:", "sample.yaml"]
  #=> "ARGF is not closed"
  #=> ["", "test.rb"]
  #=> "ARGF is not closed"
  #=> ["--- !ruby/object:Dog ", "ugo.yaml"]
  #=> "ARGF is closed."
  #=> "ARGF had been closed."

@see [[m:IO#closed?]]

--- each(rs = $/) {|line| ... } -> self
--- each_line(rs = $/) {|line| ... } -> self
ARGFの現在位置から一行ずつ文字列として読み込みます。

@param rs 区切り文字を指定する

  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each_line {|line|
    line.chomp!
    printf("'%s' in %s\n", line, ARGF.filename)
  }
  #例
  #=> '--- !ruby/object:Dog ' in ugo.yaml
  #=> 'name: pochi' in ugo.yaml
  #=> '--- ' in ugo.yaml
  #=> ':age: 17' in ugo.yaml
  #=> ':color: white' in ugo.yaml
  #=> '--- ' in ugo.yaml
  #=> '- Chiba' in ugo.yaml
  #=> '- Saitama' in ugo.yaml


@see [[m:IO#each]], [[m:IO#each_line]], 

--- each_byte{|char| ...} -> self
ARGF の現在位置から 1 バイトずつ読み込み、それを整数として与え、ブロックを実行します。

  # カレントディレクトリから適当にファイルを選ぶ
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each_byte {|b|
    printf("%4d <-> %4s\n", b, b.chr)
  }
  #例
  #=>  45 <->    -
  #=>  32 <->
  #=>  83 <->    S
  #=>  97 <->    a
  #=> 105 <->    i
  #=> 116 <->    t
  #=>  97 <->    a
  #=> 109 <->    m
  #=>  97 <->    a
  #=>  10 <->
  #...

@see [[m:IO#each_byte]]

--- eof -> boolean
--- eof? -> boolean
現在開いているファイルがeofに達したらtrueを返します。そうでない場合はfalseを返します。

@raise IOError ファイルがopenされていない場合

  # カレントディレクトリから適当にファイルを選ぶ
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  n = 0
  ARGF.each_line {|line|
    n += 1
    if ARGF.eof
      printf("eof. %s has %d(%d) line\n", ARGF.filename, n, ARGF.lineno)
      n = 0
    end
  }
  begin
    if ARGF.eof?
      printf("%s is eof\n", ARGF.filename)
    end
  rescue IOError
    print "IOError !!\n"
  end

  #=> 例
  #=> eof. sample.yaml has 13(13) line
  #=> eof. test.rb has 159(172) line
  #=> eof. test.rb~ has 159(331) line
  #=> eof. third.txt has 1(332) line
  #=> eof. ugo.yaml has 8(340) line
  #=> IOError !!

@see [[m:IO#eof]], [[m:IO#eof?]]

--- fileno -> Integer
--- to_i -> Integer
#@todo

--- getc -> Integer | nil
#@todo

--- gets -> String | nil
#@todo

--- pos -> Integer
--- tell -> Integer
#@todo
[[m:IO#pos]], [[m:IO#tell]]を参照

--- pos=(n)
#@todo
[[m:IO#pos=]] を参照

--- read -> String
#@todo

--- readchar -> Integer
#@todo

--- readline -> String
#@todo

--- readlines -> [String]
--- to_a -> [String]
#@todo

--- rewind -> 0
#@todo

--- seek -> 0
#@todo

--- to_io -> IO
#@todo

#@if (version >= "1.9.0")
--- readpartial(length, str = nil)
#@todo

#@end


