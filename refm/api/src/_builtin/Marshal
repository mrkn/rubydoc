= module Marshal

Ruby オブジェクトをファイル(または文字列)に書き出したり、読み戻したり
する機能を提供するモジュール。大部分のクラスのインスタンスを書き出す事
ができますが、書き出しの不可能なクラスも存在します(後述)。

ここで「マーシャルデータ」と言う用語は、Marshal.dump が出力する文字列
を指すものとします。

== Module Functions

--- dump(obj[,port][,limit])
#@todo

obj を再帰的にファイルに書き出します。ファイルに書き出せない
オブジェクトをファイルに書き出そうとすると例外 [[c:TypeError]] が
発生します。ファイルに書き出せないオブジェクトは以下の通りです。

 * 名前のついてない [[c:Class]]/[[c:Module]] オブジェクト。(この場
   合は、例外 [[c:ArgumentError]] が発生します。無名クラスについて
   は、[[m:Module.new]] を参照。)
 * システムがオブジェクトの状態を保持するもの。具体的には以下のイン
   スタンス。[[c:Dir]], [[c:File::Stat]], [[c:IO]] とそのサブクラス
   [[c:File]], [[c:Socket]] など。
 * [[c:MatchData]], [[c:Data]], [[c:Method]], [[c:UnboundMethod]],
   [[c:Proc]], [[c:Thread]], [[c:ThreadGroup]], [[c:Continuation]]
   のインスタンス。
 * 特異メソッドを定義したオブジェクト

また、これらのオブジェクトを間接的に指すオブジェクトなども書き出せ
ません。例えば、デフォルト値を求めるブロックを持った [[c:Hash]] は
[[c:Proc]] を間接的に指していることになります。

  p Marshal.dump(Hash.new {})
  => -:1:in `dump': cannot dump hash with default proc (TypeError)

port には [[c:IO]](またはそのサブクラス)のインスタンスを指定
します。この場合、port を返します。省略した場合には
dump はそのオブジェクトをダンプした文字列を返します。

limit を指定した場合、limit 段以上深くリンクしたオブジェ
クトをダンプできません(デフォルトは 100 レベル)。負の limit
を指定すると深さチェックを行いません。

マーシャルの動作を任意に定義することもできます。詳細は、
[[m:Marshal#ユーザ定義のMarshal]] を参照してください。

--- load(port[,proc])
--- restore(port[,proc])
#@todo

port からマーシャルデータを読み込んで、元のオブジェクトと同
じ状態をもつオブジェクトを生成します。port は文字列か
IO(またはそのサブクラス)のインスタンスを指定します。

proc として手続きオブジェクトが与えられた場合には読み込んだ
オブジェクトを引数にその手続きを呼び出します。

  str = Marshal.dump(["a", 1, 10 ** 10, 1.0, :foo])
  p Marshal.load(str, proc {|obj| p obj})

  => "a"
     1
     10000000000
     1.0
     :foo
     ["a", 1, 10000000000, 1.0, :foo]
     ["a", 1, 10000000000, 1.0, :foo]

#@since 1.8.0
== Constants

--- MAJOR_VERSION
--- MINOR_VERSION
#@todo

[[m:Marshal.dump]] が出力するデータフォーマットのバージョン番号です。

[[m:Marshal.load]] は、メジャーバージョンが異なるか、バージョンの大きな
マーシャルデータを読み込んだとき例外 [[c:TypeError]] を発生させます。

マイナーバージョンが古いだけのフォーマットは読み込み可能ですが、
[[m:$VERBOSE]] = true のときには警告メッセージが出力されます

マーシャルされたデータのバージョン番号は以下のようにして取得するこ
とができます。

  obj = Object.new
  major, minor = Marshal.dump(obj).unpack("cc")
  p [major, minor]
#@end
