#@since 1.8.4
#@since 1.8.8
= class Enumerator < Object
#@else
= class Enumerable::Enumerator < Object
#@end

include Enumerable

each 以外のメソッドにも [[c:Enumerable]] の機能を提供するためのラッパークラスです。
#@since 1.8.7
また、外部イテレータとしても使えます。
#@end
#@until 1.8.8
Ruby 1.8.8 以降では Enumerable::Enumerator は Enumerator になっています。
#@end

[[c:Enumerable]] モジュールは、 [[m:Module#include]] 先のクラスが持つ
each メソッドを元に様々なメソッドを提供します。
例えば Array#map は [[m:Array#each]] の繰り返しを元にして定義されます。
Enumerator を介することにより [[m:String#each_byte]] のような
異なる名前のイテレータについても each と同様に Enumerable の機能を利用できます。

Enumerator を生成するには
#@since 1.8.8
[[m:Enumerator.new]]
#@else
[[m:Enumerable::Enumerator.new]]
#@end
あるいは [[m:Object#to_enum]], [[m:Object#enum_for]] を利用します。
#@since 1.9.1
また、一部のイテレータはブロックを渡さずに呼び出すと繰り返しを実行する代わりに
enumerator を生成して返します。
#@end

#@since 1.9.1
=== 注意
外部イテレータとしての機能は [[c:Fiber]] を用いて実装されているため Fiber と同じ制限があります。
例えば以下のようなスレッドをまたいだ呼び出しはエラーになります。

 a = nil
 Thread.new do
   a = [1, 2, 3].each
   a.next
 end.join
 
 p a.next
 #=> t.rb:7:in `next': fiber called across threads (FiberError)
         from t.rb:7:in `<main>'
#@end

== Class Methods

#@since 1.8.8
--- new(obj, method = :each, *args) -> Enumerator
#@else
--- new(obj, method = :each, *args) -> Enumerable::Enumerator
#@end

オブジェクト obj について、 each の代わりに method という
名前のメソッドを使って繰り返すオブジェクトを生成して返します。
args を指定すると、 method の呼び出し時に渡されます。

@param obj イテレータメソッドのレシーバとなるオブジェクト
@param method イテレータメソッドの名前を表すシンボルまたは文字列
@param args イテレータメソッドの呼び出しに渡す任意個の引数

例:

  str = "xyz"
  
#@since 1.8.8
  enum = Enumerator.new(str, :each_byte)
#@else
  enum = Enumerable::Enumerator.new(str, :each_byte)
#@end
  p enum.map {|b| '%02x' % b }   # => ["78", "79", "7a"]


#@since 1.8.8
--- new{|y| ... }                   -> Enumerator

Enumerator オブジェクトを生成して返します。与えられたブロックは Enumerator::Yielder オブジェクトを
引数として実行されます。

生成された Enumerator オブジェクトに対して each を呼ぶと、この生成時に指定されたブロックを
実行し、Yielder オブジェクトに対して << メソッドが呼ばれるたびに、
each に渡されたブロックが繰り返されます。

例:

  enum = Enumerator.new{|y|
    (1..10).each{|i|   
      y << i if i % 5 == 0
    }
  }
  enum.each{|i| p i }  

  #=>  5 
      10


  fib = Enumerator.new { |y|
    a = b = 1
    loop {
      y << a
      a, b = b, a + b
    }
  }

  p fib.take(10) #=> [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]


#@end

== Methods

--- each {...} -> object

生成時のパラメータに従ってブロックを繰り返します。
生成時に指定したイテレータの戻り値をそのまま返します。

例:
  str = "Yet Another Ruby Hacker"
  
#@since 1.8.8
  enum = Enumerator.new(str, :scan, /\w+/)
#@else
  enum = Enumerable::Enumerator.new(str, :scan, /\w+/)
#@end
  enum.each {|word| p word }              # => "Yet"
                                          #    "Another"
                                          #    "Ruby"
                                          #    "Hacker"

  str.scan(/\w+/) {|word| p word }        # => "Yet"
                                          #    "Another"
                                          #    "Ruby"
                                          #    "Hacker"

#@since 1.8.7
--- next -> object
「次」のオブジェクトを返します。

現在までの列挙状態に応じて「次」のオブジェクトを返し、列挙状態を1つ分進めます。
列挙が既に最後へ到達している場合は、列挙状態を最初まで巻き戻すとともに
[[c:StopIteration]] 例外を発生します。

next メソッドによる外部列挙の状態は他のイテレータメソッドによる
内部列挙には影響を与えません。
ただし、 [[m:IO#each_line]] のようにおおもとの列挙メカニズムが副作用を
伴っている場合には影響があり得ます。

@raise StopIteration 列挙状態が既に最後へ到達しているとき
#@since 1.8.8
@see [[m:Enumerator#rewind]]
#@else
@see [[m:Enumerable::Enumerator#rewind]]
#@end

例1:
    str = "xyz"
    enum = str.each_byte
    
    str.bytesize.times do
      puts enum.next
    end
        # => 120
        #    121
        #    122

例2:
    str = "xyz"
    enum = str.each_byte
    
    begin
      puts enum.next while true
    rescue StopIteration
      puts "iteration reached at end"
      puts enum.next
    end
        # => 120
        #    121
        #    122
        #    iteration reached at end
        #    120

例3: [[m:Kernel.#loop]] は StopIteration を捕捉します。
    str = "xyz"
    enum = str.each_byte
    loop do
      puts enum.next
    end
        # => 120
        #    121
        #    122

--- rewind -> self
列挙状態を巻き戻します。

next メソッドによる外部列挙の状態を最初まで巻き戻します。 self を返します。

#@since 1.9.2
内包するオブジェクトが rewind メソッドを持つとき(respond_to?(:rewind) に
真を返すとき) は、その rewind メソッドを呼び出します。
#@end

#@since 1.8.8
@see [[m:Enumerator#next]]
#@else
@see [[m:Enumerable::Enumerator#next]]
#@end

例:
    str = "xyz"
    enum = str.each_byte
    
    p enum.next # => 120
    p enum.next # => 121
    enum.rewind
    p enum.next # => 120

--- to_splat -> Array

この enumerator を多重代入などのための配列に変換します。

#@since 1.9.2
--- with_index(offset = 0) {|(*args), idx| ... } -> object
--- with_index(offset = 0) -> Enumerator
#@else
--- with_index {|(*args), idx| ... } -> object
--- with_index -> Enumerator
#@end

生成時のパラメータに従って、要素にインデックスを添えて繰り返します。
#@since 1.9.2
インデックスは offset から始まります。
#@else
インデックスは 0 から始まります。
#@end

ブロックを指定した場合の戻り値は生成時に指定したレシーバ自身です。

例:
    str = "xyz"
    
#@since 1.8.8
    enum = Enumerator.new(str, :each_byte)
#@else
    enum = Enumerable::Enumerator.new(str, :each_byte)
#@end
    enum.with_index {|byte, idx| p [byte, idx] }
        # => [120, 0]
        #    [121, 1]
        #    [122, 2]
#@since 1.9.2
    
    require "stringio"
    StringIO.new("foo|bar|baz").each("|").with_index(1) {|s, i| p [s, i] }
        # => ["foo|", 0]
        #    ["bar|", 1]
        #    ["baz", 2]
#@end


生成時のパラメータに従って、要素にインデックスを添えてブロックを繰り返します。
インデックスは 0 から始まります。
#@since 1.9.2
[[m:Enumerator#with_index]] は offset 引数を受け取りますが、
each_with_index は受け取りません (引数はイテレータメソッドにそのまま渡されます)。
#@end

#@since 1.9.1
--- with_object(obj) -> Enumerator
--- with_object(obj) {|(*args), memo_obj| ... } -> object
#@todo

@see [[m:Enumerable#each_with_object]]

#@end
#@end
#@end
