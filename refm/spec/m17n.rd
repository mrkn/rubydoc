#@since 1.9.0
= 多言語化

Ruby は複数の文字エンコーディングを扱うことができます。
文字列の内部表現のエンコーディングは固定されていません。

全ての文字列は自身のエンコーディング情報を保持します。
プログラマは各文字列が適切なエンコーディング情報を持つように、常に意識して Ruby スクリプトを
書く必要があります。

Ruby スクリプトにもマルチバイト文字列を使うことができます。
文字列リテラルや正規表現リテラルだけでなく変数名、メソッド名、クラス名などにも
マルチバイトの文字列を使うことができます。ただし文字列・正規表現リテラル以外でのマルチバイト文字列の使用は
推奨されません。

グローバル変数 [[m:$KCODE]] は廃止されました。

=== Ruby がサポートするエンコーディング

Ruby は主だったASCII互換エンコーディングをサポートすることを目標としています。
「ASCII互換エンコーディング」とは、ASCII 文字を表すバイト列が US-ASCII エンコーディングのバイト列
と同じエンコーディングを意味します。
コードポイントが同一という意味ではありません。従って UTF-16 はASCII互換ではありません。
また厳密性を追求せず、おおむね互換なら互換と呼びます。よって Shift_JIS は ASCII 互換です。

==== 7bit クリーンな文字列

ASCII 互換エンコーディングをもつ 7bit クリーンな文字列は
エンコーディングに関わらず ASCII として扱うことができます。
例えば [[m:String#==]] は両者の文字エンコーディングが異なっていても
true を返します。
ASCII 互換エンコーディングをもつ文字列にエンコーディングの変換なしで結合することができます。

例:

  s = "abc"
  a = s.encode("EUC-JP")
  b = s.encode("UTF-8")
  p a == b                           #=> true
  p a + b                            #=> "abcabc"

==== ダミーエンコーディング
#@todo

Ruby では ASCII 互換でないエンコーディング(UTF-16など)をダミーエンコーディングと呼びます。
ダミーエンコーディングを Ruby は以下のように部分的にしかサポートしません。

 * エンコーディングがダミーエンコーディングである文字列のインスタンスメソッドは 1 文字ではなく 1 バイトを
   単位として動作します。
 * 正規表現のマッチングが使えません。例外が発生します。
 * エンコーディングの異なる 7bit クリーンな文字列との結合ができません。例外が発生します。

ただし UTF-16LE と UTF-16BE に関してはフルにサポートされます。

例:

  "a".encode("UTF-16LE") + "b"  #=> ArgumentError: character encodings differ: UTF-16LE and US-ASCII

=== M17N プログラミングの基本

プログラマは Ruby の文字列(と正規表現)が生成される段階で適切なエンコーディング情報を持つように
プログラミングしなければいけません。文字列が生成されるのは主に「リテラルから生成」「IOから生成」 
「文字列操作から生成」の 3 通りです。このうち文字列操作に関しては Ruby インタプリタが適切に
処理しますから、プログラマは 「リテラルから生成」「IO から生成」 の二通りに関して注意する必要があります。
以下ではリテラルのエンコーディングの指定方法を説明します。IO から生成される文字列のエンコーディングに関しては
[[c:IO]] を参照してください。

=== スクリプトエンコーディング

スクリプトエンコーディングとは Ruby スクリプトのエンコーディングです。
magic comment で指定します。
文字列リテラルなどのリテラルから生成されるオブジェクトのエンコーディングは
スクリプトエンコーディングになります。

magic comment を使うことによりスクリプトファイル毎にスクリプトエンコーディングを
指定することができます。あるファイルにマルチバイト文字列を使う場合、magic comment を
必ず設定しなければいけません。
magic comment が指定されなかった場合、コマンド引数 -K, RUBYOPT およびファイルの shebang から
スクリプトエンコーディングは以下のように決定されます。左が優先です。

 magic comment(最優先) > -K > RUBYOPT > shebang 

上のどれもが指定されていない場合、通常のスクリプトなら US-ASCII、-e や stdin から実行されたものなら
locale がスクリプトエンコーディングになります。

=== デフォルト外部エンコーディング

左が優先

 -K > -E > locale

=== 1.8からのscript encodingに関する非互換まとめ

 * -Kがない場合、1.8では1.9のASCII-8BIT相当の挙動だったが、1.9
   ではUS-ASCIIとして扱われる。
   よって、-Kなしでリテラル中に他バイト文字が含まれている場合、
   1.8ではencodingと運によっては大丈夫だったものが、1.9では必
   ずパース時にエラーが発生するようになる。

 * magic commentがあった場合、1.8では無視されるが、1.9ではそれ
   がscript encodingに反映される。-Kよりも優先。

 * 上記の表にはないが、コマンドラインオプション・RUBYOPT・shebang
   の間の優先順位が1.9では変更されている。
   よって、それぞれに矛盾する-K指定が存在した場合、1.8とは異な
   る優先順位でscript encodingが決定される。
   具体的には以下の通り(左が優先)
//emlist{
    1.8 : shebang > RUBYOPT > コマンドライン
    1.9 : コマンドライン > RUBYOPT > shebang
//}

=== Ruby 1.8 からの移行

グローバル変数 $KCODE は廃止されました。


#@end
